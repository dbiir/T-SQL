Steps to add a function to the catalogs
========================================

The steps listed below should be followed if a new function needs to be added 
to the catalog. For instance, if we want to add a new function, fn_sql(),
that will expose the backend function, fn_be() as a built_in function,
the following steps are needed.

1. Get an unused OID by running the script unused_oids located in
   src/include/catalog/unused_oids. Claim an unused OID. For eg, for our
   example we are claiming 5075.

2. Add the new function definition in src/include/catalog/pg_proc.sql.
   An example function definition: 
   	CREATE FUNCTION fn_sql(int4, int4) RETURNS bool LANGUAGE 
  		internal VOLATILE NO SQL AS 'fn_be' 
		WITH (OID=5075, DESCRIPTION="Description of the function");

3. Run the following command in src/include/catalog:

   $ perl catullus.pl -procdef pg_proc.sql -prochdr pg_proc_gp.h

  catullus.pl will re-generate the pg_proc_gp.h file with the appropriate
  DATA statement for the fn_sql function definition.

  For more information on catullus.pl, please refer to 
  src/include/catalog/README.modifying_catalogs.

4. Since the catalogs are being modified, the catalog number in
   src/include/catalog/catversion.h should be bumped up. This is to
   indicate an initdb is required so the version number in the backend matches
   the version number on disk.
 
   Since catversion is bumped up, we have to regenerate the catalog json file,
   gpMgmt/bin/gppylib/data/<version>.json. Otherwise, catversion test would
   fail. The catalog json file is generated by building src/backend/catalog:

   $ make -C src/backend/catalog

5. Run make distclean, make, gpinitsystem and you should be able to see your
   newly added function in pg_proc.

6. Don't forget to "git add" and commit the generated file, pg_proc_gp.h,
   along with any modified files.
