--
-- Test correlated subquery in subplan with motion chooses correct scan type
--
-- Given I have two distributed tables
create table choose_seqscan_t1(id1 int,id2 int);
create table choose_seqscan_t2(id1 int,id2 int);
-- and they have some data
insert into choose_seqscan_t1 select i+1,i from generate_series(1,50)i;
insert into choose_seqscan_t2 select i+1,i from generate_series(1,50)i;
-- and one of the tables has an index on a column which is not the distribution column
create index bidx2 on choose_seqscan_t2(id2);
-- and the statistics reflect the newly inserted data
analyze choose_seqscan_t1; analyze choose_seqscan_t2;
-- making an indexscan cheaper with this GUC is only necessary with this small dataset
-- if you insert more data, you can still ensure an indexscan is considered
set random_page_cost=1;
-- and I query the table with the index from inside a subquery which will be pulled up inside of a subquery that will stay a subplan
select (select id1 from (select * from choose_seqscan_t2) foo where id2=choose_seqscan_t1.id2) from choose_seqscan_t1 order by id1;
 id1 
-----
   2
   3
   4
   5
   6
   7
   8
   9
  10
  11
  12
  13
  14
  15
  16
  17
  18
  19
  20
  21
  22
  23
  24
  25
  26
  27
  28
  29
  30
  31
  32
  33
  34
  35
  36
  37
  38
  39
  40
  41
  42
  43
  44
  45
  46
  47
  48
  49
  50
  51
(50 rows)

explain select (select id1 from (select * from choose_seqscan_t2) foo where id2=choose_seqscan_t1.id2) from choose_seqscan_t1;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..1324216.68 rows=50 width=4)
   ->  Result  (cost=0.00..1324216.68 rows=17 width=4)
         ->  Seq Scan on choose_seqscan_t1  (cost=0.00..1324216.68 rows=334 width=4)
         SubPlan 1  (slice2; segments: 3)
           ->  Result  (cost=0.00..431.17 rows=1 width=4)
                 Filter: (choose_seqscan_t2.id2 = choose_seqscan_t1.id2)
                 ->  Materialize  (cost=0.00..431.01 rows=50 width=8)
                       ->  Broadcast Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.01 rows=50 width=8)
                             ->  Seq Scan on choose_seqscan_t2  (cost=0.00..431.00 rows=17 width=8)
 Optimizer: Pivotal Optimizer (GPORCA) version 3.23.0
(10 rows)

-- then, a sequential scan is chosen because I need a motion to move choose_seqscan_t2
-- start_ignore
drop table if exists choose_seqscan_t1;
drop table if exists choose_seqscan_t2;
-- end_ignore
-- Given I have one replicated table
create table choose_indexscan_t1(id1 int, id2 int);
create table choose_indexscan_t2(id1 int, id2 int) distributed replicated;
-- and it has data
insert into choose_indexscan_t1 select i+1, i from generate_series(1,20)i;
insert into choose_indexscan_t2 select i+1, i from generate_series(1,100)i;
-- and the replicated table has an index on a column which is not the distribution key
create index choose_indexscan_t2_idx on choose_indexscan_t2(id2);
-- and the statistics reflect the newly inserted data
analyze choose_indexscan_t1; analyze choose_indexscan_t2;
-- making an indexscan cheaper with this GUC is only necessary with this small dataset
-- if you insert more data, you can still ensure an indexscan is considered
set random_page_cost=1;
-- and I query the table with the index from inside a subquery which will be pulled up inside of a subquery that will stay a subplan
select (select id1 from (select * from choose_indexscan_t2) foo where id2=choose_indexscan_t1.id2) from choose_indexscan_t1 order by id1;
 id1 
-----
   2
   3
   4
   5
   6
   7
   8
   9
  10
  11
  12
  13
  14
  15
  16
  17
  18
  19
  20
  21
(20 rows)

explain select (select id1 from (select * from choose_indexscan_t2) foo where id2=choose_indexscan_t1.id2) from choose_indexscan_t1;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..1324176.46 rows=20 width=4)
   ->  Result  (cost=0.00..1324176.46 rows=7 width=4)
         ->  Seq Scan on choose_indexscan_t1  (cost=0.00..1324176.46 rows=334 width=4)
         SubPlan 1  (slice1; segments: 3)
           ->  Seq Scan on choose_indexscan_t2  (cost=0.00..431.13 rows=1 width=4)
                 Filter: (id2 = choose_indexscan_t1.id2)
 Optimizer: Pivotal Optimizer (GPORCA) version 3.23.0
(7 rows)

-- then an indexscan is chosen because it is correct to do this on a replicated table since no motion is required
-- start_ignore
drop table if exists choose_indexscan_t1;
drop table if exists choose_indexscan_t2;
-- end_ignore
