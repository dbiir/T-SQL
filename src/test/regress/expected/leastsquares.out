--
-- leastsquares.sql - test for ordinary least squares regression aggregates:
--   * regr_count
--   * regr_avgx
--   * regr_avgy
--   * regr_sxx
--   * regr_sxy
--   * regr_syy
--   * regr_intercept
--   * regr_slope
--   * regr_r2
-- start_matchsubs
-- m|Failed on request of size \d+ bytes|
-- s|Failed on request of size \d+ bytes|Failed on request of size BIGALLOC bytes|
--
-- m/(ERROR|WARNING|CONTEXT|NOTICE):.*\(float\.c\:\d+\)/
-- s/\(float\.c:\d+\)//
--
-- end_matchsubs
CREATE TABLE weibull
(
	id INTEGER NOT NULL,
	x1 DOUBLE PRECISION,
	x2 DOUBLE PRECISION,
	y DOUBLE PRECISION
) DISTRIBUTED BY (id);
COPY weibull (id, x1, x2, y) FROM stdin;
--
-- Testing of basic single linear regression code
--
-- these queries should produce the same result.
select 
    regr_count(y, x1)::real as count,
    regr_avgx(y, x1)::real as avgx,
    regr_avgy(y, x1)::real as avgy,
    regr_sxx(y, x1)::real as sxx,
    regr_sxy(y, x1)::real as sxy,
    regr_syy(y, x1)::real as syy,
    regr_intercept(y, x1)::real as intercept,
    regr_slope(y, x1)::real as slope,
    regr_r2(y, x1)::real as r2
from weibull;
 count |  avgx   | avgy  |   sxx   |   sxy   |   syy   | intercept |  slope  |    r2    
-------+---------+-------+---------+---------+---------+-----------+---------+----------
    17 | 55.3529 | 288.4 | 2182.86 | 5230.02 | 13239.7 |   155.777 | 2.39595 | 0.946458
(1 row)

select
    count(y)::real as count,
    avg(x1)::real as avgx,
    avg(y)::real as avgy,
    ((count(y) * sum(x1*x1) - sum(x1)^2)/count(y))::real as sxx,
    ((count(y) * sum(x1*y) - sum(x1)*sum(y))/count(y))::real as sxy,
    ((count(y) * sum(y*y) - sum(y)^2)/count(y))::real as sxy,
    ((sum(y)*sum(x1*x1) - sum(x1)*sum(x1*y))/(count(y) * sum(x1*x1) - sum(x1)^2))::real as intercept,
    ((count(y) * sum(x1*y) - sum(x1)*sum(y))/(count(y) * sum(x1*x1) - sum(x1)^2))::real as slope,
    ((count(y) * sum(x1*y) - sum(x1)*sum(y))^2/
        ((count(y) * sum(x1*x1) - sum(x1)^2) * (count(y) * sum(y*y) - sum(y)^2)))::real as r2
from weibull;
 count |  avgx   | avgy  |   sxx   |   sxy   |   sxy   | intercept |  slope  |    r2    
-------+---------+-------+---------+---------+---------+-----------+---------+----------
    17 | 55.3529 | 288.4 | 2182.86 | 5230.02 | 13239.7 |   155.777 | 2.39595 | 0.946458
(1 row)

-- Single linear and multivariate should match for a single independent variable
select 
    array[regr_intercept(y, x1), regr_slope(y, x1)]::real[] as coef,
    regr_r2(y,x1)::real as r2
from weibull;
       coef        |    r2    
-------------------+----------
 {155.777,2.39595} | 0.946458
(1 row)

select 
    array[regr_intercept(y, x2), regr_slope(y, x2)]::real[] as coef,
    regr_r2(y,x2)::real as r2
from weibull;
        coef        |    r2    
--------------------+----------
 {-449.025,23.8649} | 0.945513
(1 row)

-- Accumulation/combination order shouldn't matter to the result. These should
-- produce the same result.
select float8_regr_accum(float8_regr_accum(array[0,0,0,0,0,0], 1, 2),  2, 1);
 float8_regr_accum 
-------------------
 {2,3,5,3,5,4}
(1 row)

select float8_regr_accum(float8_regr_accum(array[0,0,0,0,0,0], 2, 1),  1, 2);
 float8_regr_accum 
-------------------
 {2,3,5,3,5,4}
(1 row)

-- Component testing of the individual aggregate callback functions
--  * null handling
--  * malformed state
--  * check for invalid in-place updates of first parameter
select float8_regr_accum(null, 1, 2);
 float8_regr_accum 
-------------------
 
(1 row)

select float8_regr_accum(array[0,0,0,0,0,0], 1, null);
 float8_regr_accum 
-------------------
 
(1 row)

select float8_regr_accum(array[0,0,0,0,0,0], null, 2);
 float8_regr_accum 
-------------------
 
(1 row)

select float8_regr_sxx(null);
 float8_regr_sxx 
-----------------
                
(1 row)

select float8_regr_sxx(array[0,0,0,0,0,0]);
 float8_regr_sxx 
-----------------
                
(1 row)

select float8_regr_sxx(float8_regr_accum(array[0,0,0,0,0,0], 1, 2));
 float8_regr_sxx 
-----------------
               0
(1 row)

select float8_regr_syy(null);
 float8_regr_syy 
-----------------
                
(1 row)

select float8_regr_syy(array[0,0,0,0,0,0]);
 float8_regr_syy 
-----------------
                
(1 row)

select float8_regr_syy(float8_regr_accum(array[0,0,0,0,0,0], 1, 2));
 float8_regr_syy 
-----------------
               0
(1 row)

select float8_regr_sxy(null);
 float8_regr_sxy 
-----------------
                
(1 row)

select float8_regr_sxy(array[0,0,0,0,0,0]);
 float8_regr_sxy 
-----------------
                
(1 row)

select float8_regr_sxy(float8_regr_accum(array[0,0,0,0,0,0], 1, 2));
 float8_regr_sxy 
-----------------
               0
(1 row)

select float8_regr_avgx(null);
 float8_regr_avgx 
------------------
                 
(1 row)

select float8_regr_avgx(array[0,0,0,0,0,0]);
 float8_regr_avgx 
------------------
                 
(1 row)

select float8_regr_avgx(float8_regr_accum(array[0,0,0,0,0,0], 1, 2));
 float8_regr_avgx 
------------------
                2
(1 row)

select float8_regr_avgy(null);
 float8_regr_avgy 
------------------
                 
(1 row)

select float8_regr_avgy(array[0,0,0,0,0,0]);
 float8_regr_avgy 
------------------
                 
(1 row)

select float8_regr_avgy(float8_regr_accum(array[0,0,0,0,0,0], 1, 2));
 float8_regr_avgy 
------------------
                1
(1 row)

select float8_regr_r2(null);
 float8_regr_r2 
----------------
               
(1 row)

select float8_regr_r2(array[0,0,0,0,0,0]);
 float8_regr_r2 
----------------
               
(1 row)

select float8_regr_r2(float8_regr_accum(array[0,0,0,0,0,0], 1, 2));
 float8_regr_r2 
----------------
               
(1 row)

select float8_regr_slope(null);
 float8_regr_slope 
-------------------
                  
(1 row)

select float8_regr_slope(array[0,0,0,0,0,0]);
 float8_regr_slope 
-------------------
                  
(1 row)

select float8_regr_slope(float8_regr_accum(array[0,0,0,0,0,0], 1, 2));
 float8_regr_slope 
-------------------
                  
(1 row)

select float8_regr_intercept(null);
 float8_regr_intercept 
-----------------------
                      
(1 row)

select float8_regr_intercept(array[0,0,0,0,0,0]);
 float8_regr_intercept 
-----------------------
                      
(1 row)

select float8_regr_intercept(float8_regr_accum(array[0,0,0,0,0,0], 1, 2));
 float8_regr_intercept 
-----------------------
                      
(1 row)

select float8_regr_accum('{}'::float8[], 1, 2);
ERROR:  float8_regr_accum: expected 6-element float8 array 
select float8_regr_sxx('{}'::float8[]);
ERROR:  float8_regr_sxx: expected 6-element float8 array 
select float8_regr_syy('{}'::float8[]);
ERROR:  float8_regr_syy: expected 6-element float8 array 
select float8_regr_sxy('{}'::float8[]);
ERROR:  float8_regr_sxy: expected 6-element float8 array 
select float8_regr_avgx('{}'::float8[]);
ERROR:  float8_regr_avgx: expected 6-element float8 array 
select float8_regr_avgy('{}'::float8[]);
ERROR:  float8_regr_avgy: expected 6-element float8 array 
select float8_regr_slope('{}'::float8[]);
ERROR:  float8_regr_slope: expected 6-element float8 array 
select float8_regr_r2('{}'::float8[]);
ERROR:  float8_regr_r2: expected 6-element float8 array 
select float8_regr_intercept('{}'::float8[]);
ERROR:  float8_regr_intercept: expected 6-element float8 array 
CREATE TABLE regr_test as 
   select array[0,0,0,0,0,0]::float8[] as x, array[2,0,0,0,0,0,0,0,0,0] as y
DISTRIBUTED RANDOMLY;
select float8_regr_accum(x, 0, 3), 
       float8_regr_accum(x, 0, 2), 
       x 
from regr_test;
 float8_regr_accum | float8_regr_accum |       x       
-------------------+-------------------+---------------
 {1,3,9,0,0,0}     | {1,2,4,0,0,0}     | {0,0,0,0,0,0}
(1 row)

DROP TABLE regr_test;
DROP TABLE weibull;
