create schema gpexplain;
set search_path = gpexplain;
-- Helper function, to return the EXPLAIN output of a query as a normal
-- result set, so that you can manipulate it further.
create or replace function get_explain_output(explain_query text) returns setof text as
$$
declare
  explainrow text;
begin
  for explainrow in execute 'EXPLAIN ' || explain_query
  loop
    return next explainrow;
  end loop;
end;
$$ language plpgsql;
-- Same, for EXPLAIN ANALYZE VERBOSE
create or replace function get_explain_analyze_output(explain_query text) returns setof text as
$$
declare
  explainrow text;
begin
  for explainrow in execute 'EXPLAIN (ANALYZE, VERBOSE) ' || explain_query
  loop
    return next explainrow;
  end loop;
end;
$$ language plpgsql;
--
-- Test explain_memory_verbosity option
-- 
CREATE TABLE explaintest (id int4);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'id' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO explaintest SELECT generate_series(1, 10);
EXPLAIN ANALYZE SELECT * FROM explaintest;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..3.10 rows=10 width=4)
   ->  Seq Scan on explaintest  (cost=0.00..3.10 rows=4 width=4)
 Slice statistics:
   (slice0)    Executor memory: 318K bytes.
   (slice1)    Executor memory: 50K bytes avg x 3 workers, 50K bytes max (seg0).
 Statement statistics:
   Memory used: 128000K bytes
 Total runtime: 0.998 ms
(10 rows)

set explain_memory_verbosity='summary';
-- The plan should consist of a Gather and a Seq Scan, with a
-- "Memory: ..." line on both nodes.
SELECT COUNT(*) from
  get_explain_analyze_output($$
    SELECT * FROM explaintest;
  $$) as et
WHERE et like '%Memory: %';
 count 
-------
     2
(1 row)

reset explain_memory_verbosity;
EXPLAIN ANALYZE SELECT id FROM 
( SELECT id 
	FROM explaintest
	WHERE id > (
		SELECT avg(id)
		FROM explaintest
	)
) as foo
ORDER BY id
LIMIT 1;
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=6.37..6.39 rows=1 width=4) (actual time=1.532..1.536 rows=1 loops=1)
   InitPlan 1 (returns $0)  (slice3)
     ->  Aggregate  (cost=3.19..3.20 rows=1 width=32) (actual time=1.498..1.498 rows=1 loops=1)
           ->  Gather Motion 3:1  (slice2; segments: 3)  (cost=3.13..3.18 rows=1 width=32) (actual time=1.175..1.444 rows=3 loops=1)
                 ->  Aggregate  (cost=3.13..3.14 rows=1 width=32) (actual time=0.036..0.036 rows=1 loops=1)
                       ->  Seq Scan on explaintest explaintest_1  (cost=0.00..3.10 rows=4 width=4) (actual time=0.004..0.004 rows=5 loops=1)
   ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=3.17..3.19 rows=1 width=4) (actual time=1.530..1.530 rows=1 loops=1)
         Merge Key: explaintest.id
         ->  Limit  (cost=3.17..3.17 rows=1 width=4) (actual time=0.826..0.840 rows=1 loops=1)
               ->  Sort  (cost=3.17..3.17 rows=2 width=4) (actual time=0.826..0.826 rows=1 loops=1)
                     Sort Key: explaintest.id
                     Sort Method:  top-N heapsort  Memory: 51kB
                     ->  Seq Scan on explaintest  (cost=0.00..3.15 rows=2 width=4) (actual time=0.024..0.027 rows=3 loops=1)
                           Filter: ((id)::numeric > $0)
 Planning time: 1.221 ms
   (slice0)    Executor memory: 156K bytes.
 * (slice1)    Executor memory: 124K bytes avg x 3 workers, 124K bytes max (seg0).  Work_mem: 65K bytes max, 1K bytes wanted.
 _ (slice2)    Workers: Workers: 3 not dispatched;.  
 Executor memory: 75K bytes avg x 3 workers, 75K bytes max (seg0).
   (slice3)    Executor memory: 147K bytes.
 Memory used:  128000kB
 Memory wanted:  801kB
 Optimizer: Postgres query optimizer
 Execution time: 4.772 ms
(24 rows)

-- Verify that the column references are OK. This tests for an old ORCA bug,
-- where the Filter clause in the IndexScan of this query was incorrectly
-- printed as something like:
--
--   Filter: "outer".column2 = mpp22263.*::text
CREATE TABLE mpp22263 (
        unique1         int4,
        unique2         int4,
        two                     int4,
        four            int4,
        ten                     int4,
        twenty          int4,
        hundred         int4,
        thousand        int4,
        twothousand     int4,
        fivethous       int4,
        tenthous        int4,
        odd                     int4,
        even            int4,
        stringu1        name,
        stringu2        name,
        string4         name
) distributed by (unique1);
create index mpp22263_idx1 on mpp22263 using btree(unique1);
explain select * from mpp22263, (values(147, 'RFAAAA'), (931, 'VJAAAA')) as v (i, j)
WHERE mpp22263.unique1 = v.i and mpp22263.stringu1 = v.j;
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=0.06..278.70 rows=14 width=280)
   ->  Hash Join  (cost=0.06..278.70 rows=5 width=280)
         Hash Cond: ((mpp22263.unique1 = "*VALUES*".column1) AND ((mpp22263.stringu1)::text = "*VALUES*".column2))
         ->  Seq Scan on mpp22263  (cost=0.00..219.00 rows=3967 width=244)
         ->  Hash  (cost=0.03..0.03 rows=1 width=36)
               ->  Values Scan on "*VALUES*"  (cost=0.00..0.03 rows=1 width=36)
 Optimizer status: Postgres query optimizer
(7 rows)

-- atmsort.pm masks out differences in the Filter line, so just memorizing
-- the output of the above EXPLAIN isn't enough to catch a faulty Filter line.
-- Extract the Filter explicitly.
SELECT * from
  get_explain_output($$
select * from mpp22263, (values(147, 'RFAAAA'), (931, 'VJAAAA')) as v (i, j)
WHERE mpp22263.unique1 = v.i and mpp22263.stringu1 = v.j;
  $$) as et
WHERE et like '%Filter: %';
 et 
----
(0 rows)

--
-- Join condition in explain plan should represent constants with proper
-- variable name
--
create table foo (a int) distributed randomly;
-- "outer", "inner" prefix must also be prefixed to variable name as length of rtable > 1
SELECT trim(et) et from
get_explain_output($$ 
	select * from (values (1)) as f(a) join (values(2)) b(b) on a = b join foo on true join foo as foo2 on true $$) as et
WHERE et like '%Join Filter:%' or et like '%Hash Cond:%';
                           et                           
--------------------------------------------------------
 Hash Cond: ("*VALUES*".column1 = "*VALUES*_1".column1)
(1 row)

SELECT trim(et) et from
get_explain_output($$
	select * from (values (1)) as f(a) join (values(2)) b(b) on a = b$$) as et
WHERE et like '%Hash Cond:%';
                           et                           
--------------------------------------------------------
 Hash Cond: ("*VALUES*".column1 = "*VALUES*_1".column1)
(1 row)

--
-- Test EXPLAINing of the Partition By in a window function. (PostgreSQL
-- doesn't print it at all.)
--
explain (costs off) select count(*) over (partition by g) from generate_series(1, 10) g;
                   QUERY PLAN                   
------------------------------------------------
 WindowAgg
   Partition By: g
   ->  Sort
         Sort Key: g
         ->  Function Scan on generate_series g
 Optimizer: Postgres query optimizer
(6 rows)

--
-- Test non-text format with a few queries that contain GPDB-specific node types.
--
-- The default init_file rules contain a line to mask this out in normal
-- text-format EXPLAIN output, but it doesn't catch these alternative formats.
-- start_matchignore
-- m/Optimizer.*Pivotal Optimizer \(GPORCA\) version .*/
-- end_matchignore
CREATE EXTERNAL WEB TABLE dummy_ext_tab (x text) EXECUTE 'echo foo' FORMAT 'text';
-- External Table Scan
explain (format json, costs off) SELECT * FROM dummy_ext_tab;
                   QUERY PLAN                  
-----------------------------------------------
 [                                            +
   {                                          +
     "Plan": {                                +
       "Node Type": "Gather Motion",          +
       "Senders": 3,                          +
       "Receivers": 1,                        +
       "Slice": 1,                            +
       "Segments": 3,                         +
       "Gang Type": "primary reader",         +
       "Plans": [                             +
         {                                    +
           "Node Type": "External Scan",      +
           "Parent Relationship": "Outer",    +
           "Slice": 1,                        +
           "Segments": 3,                     +
           "Gang Type": "primary reader",     +
           "Relation Name": "dummy_ext_tab",  +
           "Alias": "dummy_ext_tab"           +
         }                                    +
       ]                                      +
     },                                       +
     "Settings": {                            +
       "Optimizer": "Postgres query optimizer"+
     }                                        +
   }                                          +
 ]
(1 row)

-- Seq Scan on an append-only table
CREATE TEMP TABLE dummy_aotab (x int4) WITH (appendonly=true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'x' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
explain (format yaml, costs off) SELECT * FROM dummy_aotab;
                 QUERY PLAN                
-------------------------------------------
 - Plan:                                  +
     Node Type: "Gather Motion"           +
     Senders: 3                           +
     Receivers: 1                         +
     Slice: 1                             +
     Segments: 3                          +
     Gang Type: "primary reader"          +
     Plans:                               +
       - Node Type: "Seq Scan"            +
         Parent Relationship: "Outer"     +
         Slice: 1                         +
         Segments: 3                      +
         Gang Type: "primary reader"      +
         Relation Name: "dummy_aotab"     +
         Alias: "dummy_aotab"             +
   Settings:                              +
     Optimizer: "Postgres query optimizer"
(1 row)

-- DML node (with ORCA)
explain (format xml, costs off) insert into dummy_aotab values (1);
                         QUERY PLAN                          
-------------------------------------------------------------
 <explain xmlns="http://www.postgresql.org/2009/explain">   +
   <Query>                                                  +
     <Plan>                                                 +
       <Node-Type>ModifyTable</Node-Type>                   +
       <Operation>Insert</Operation>                        +
       <Slice>0</Slice>                                     +
       <Segments>1</Segments>                               +
       <Gang-Type>primary writer</Gang-Type>                +
       <Relation-Name>dummy_aotab</Relation-Name>           +
       <Alias>dummy_aotab</Alias>                           +
       <Plans>                                              +
         <Plan>                                             +
           <Node-Type>Result</Node-Type>                    +
           <Parent-Relationship>Member</Parent-Relationship>+
           <Slice>0</Slice>                                 +
           <Segments>1</Segments>                           +
           <Gang-Type>primary writer</Gang-Type>            +
         </Plan>                                            +
       </Plans>                                             +
     </Plan>                                                +
     <Settings>                                             +
       <Optimizer>Postgres query optimizer</Optimizer>      +
     </Settings>                                            +
   </Query>                                                 +
 </explain>
(1 row)

-- github issues 5795. explain fails previously.
explain SELECT * from information_schema.key_column_usage;
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Hash Join  (cost=102.67..1432.09 rows=13 width=389)
   Hash Cond: ((ss.roid = a.attrelid) AND ((ss.x).x = a.attnum))
   Join Filter: (pg_has_role(ss.relowner, 'USAGE'::text) OR has_column_privilege(ss.roid, a.attnum, 'SELECT, INSERT, UPDATE, REFERENCES'::text))
   ->  Subquery Scan on ss  (cost=3.34..106.09 rows=5825 width=333)
         ->  Result  (cost=3.34..47.85 rows=5825 width=341)
               ->  Hash Join  (cost=3.34..47.85 rows=5825 width=341)
                     Hash Cond: (c.connamespace = nc.oid)
                     ->  Hash Join  (cost=2.19..16.06 rows=6 width=281)
                           Hash Cond: (r.relnamespace = nr.oid)
                           ->  Hash Join  (cost=1.04..14.84 rows=7 width=221)
                                 Hash Cond: (r.oid = c.conrelid)
                                 ->  Seq Scan on pg_class r  (cost=0.00..13.41 rows=85 width=76)
                                       Filter: (relkind = 'r'::"char")
                                 ->  Hash  (cost=1.03..1.03 rows=1 width=149)
                                       ->  Seq Scan on pg_constraint c  (cost=0.00..1.03 rows=1 width=149)
                                             Filter: (contype = ANY ('{p,u,f}'::"char"[]))
                           ->  Hash  (cost=1.09..1.09 rows=2 width=68)
                                 ->  Seq Scan on pg_namespace nr  (cost=0.00..1.09 rows=5 width=68)
                                       Filter: (NOT pg_is_other_temp_schema(oid))
                     ->  Hash  (cost=1.07..1.07 rows=3 width=68)
                           ->  Seq Scan on pg_namespace nc  (cost=0.00..1.07 rows=7 width=68)
   ->  Hash  (cost=49.33..49.33 rows=1111 width=70)
         ->  Seq Scan on pg_attribute a  (cost=0.00..49.33 rows=3333 width=70)
               Filter: (NOT attisdropped)
 Optimizer: Postgres query optimizer
(25 rows)

-- github issue 5794.
set gp_enable_explain_allstat=on;
explain analyze SELECT * FROM explaintest;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..3.10 rows=10 width=4) (actual time=0.266..0.384 rows=5 loops=2)
   ->  Seq Scan on explaintest  (cost=0.00..3.10 rows=4 width=4) (actual time=0.011..0.013 rows=2 loops=2)
         allstat: seg_firststart_total_ntuples/seg0_0.745 ms_0.028 ms_3/seg1_0.640 ms_0.025 ms_5/seg2_0.997 ms_0.019 ms_2//end
   (slice0)    Executor memory: 322K bytes.
   (slice1)    Executor memory: 50K bytes avg x 3 workers, 50K bytes max (seg0).
 Memory used:  128000kB
 Optimizer: Postgres query optimizer
 Total runtime: 2.600 ms
(8 rows)

set gp_enable_explain_allstat=DEFAULT;
