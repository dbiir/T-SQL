--start_ignore
drop table if exists cf_executor_test;
NOTICE:  table "cf_executor_test" does not exist, skipping
create table cf_executor_test (a integer);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into cf_executor_test select a from generate_series(1,100) a;
set log_min_messages=debug5;
--end_ignore
set debug_print_slice_table=on;
select count(*) from cf_executor_test;
 count 
-------
   100
(1 row)

--FOR UPDATE/FOR SHARE
select * from cf_executor_test order by a limit 1 for update;
 a 
---
 1
(1 row)

select * from cf_executor_test order by a limit 1 for share;
 a 
---
 1
(1 row)

--returning clause
insert into cf_executor_test values (1) returning *;
 a 
---
 1
(1 row)

drop table cf_executor_test;
create table cf_executor_test (a integer);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into cf_executor_test select a from generate_series(1,5) a;
select * from cf_executor_test limit null;
 a 
---
 3
 4
 5
 1
 2
(5 rows)

select * from cf_executor_test limit 0;
 a 
---
(0 rows)

--start_ignore
reset log_min_messages;
reset debug_print_slice_table;
drop table cf_executor_test;
--end_ignore
