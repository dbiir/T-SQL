--
-- BOOLEAN
--
create table gpd1 (c1 char(1), c2 numeric, c3 numeric) distributed by (c1);
insert into gpd1 values ('a', 1, 1);
insert into gpd1 values ('a', 1, 2);
insert into gpd1 values ('b', 2, 1);
insert into gpd1 values ('b', 1, 2);
insert into gpd1 values ('c', 3, 2);
insert into gpd1 values ('c', 2, 3);
insert into gpd1 values ('d', 4, 4);
insert into gpd1 values ('d', 4, 3);
--
-- ignore
--
select c1 from gpd1;
 c1 
----
 a
 a
 c
 c
 b
 b
 d
 d
(8 rows)

--
-- order 1, 2
--
select c1, c1, c2, c3 from gpd1 order by 1,2;
 c1 | c1 | c2 | c3 
----+----+----+----
 a  | a  |  1 |  1
 a  | a  |  1 |  2
 b  | b  |  2 |  1
 b  | b  |  1 |  2
 c  | c  |  3 |  2
 c  | c  |  2 |  3
 d  | d  |  4 |  4
 d  | d  |  4 |  3
(8 rows)

--
--
select c1, c1, c2, c3 from gpd1 order by 1,2,3,4; -- order 1, 2     , 3    , 4
 c1 | c1 | c2 | c3 
----+----+----+----
 a  | a  |  1 |  1
 a  | a  |  1 |  2
 b  | b  |  1 |  2
 b  | b  |  2 |  1
 c  | c  |  2 |  3
 c  | c  |  3 |  2
 d  | d  |  4 |  3
 d  | d  |  4 |  4
(8 rows)

--
-- ignore
-- order 1, 2
--
select c1, c1, c2, c3 from gpd1 order by 1,2;
 c1 | c1 | c2 | c3 
----+----+----+----
 a  | a  |  1 |  1
 a  | a  |  1 |  2
 b  | b  |  2 |  1
 b  | b  |  1 |  2
 c  | c  |  3 |  2
 c  | c  |  2 |  3
 d  | d  |  4 |  4
 d  | d  |  4 |  3
(8 rows)

--
--  mvd 2,3->1 ; 2,3->4,5
-- order 4
--
select c1, c2, c3, c1, c1, c2 from gpd1 order by 4;
 c1 | c2 | c3 | c1 | c1 | c2 
----+----+----+----+----+----
 a  |  1 |  1 | a  | a  |  1
 a  |  1 |  2 | a  | a  |  1
 b  |  2 |  1 | b  | b  |  2
 b  |  1 |  2 | b  | b  |  1
 c  |  3 |  2 | c  | c  |  3
 c  |  2 |  3 | c  | c  |  2
 d  |  4 |  4 | d  | d  |  4
 d  |  4 |  3 | d  | d  |  4
(8 rows)

--  Brian: the contents of column 1 are not determined by any other 
--  column -- the column "specifies itself"
--
--  mvd 1->1
--
select row_number() over (), c1, c2, c3 from gpd1;
 row_number | c1 | c2 | c3 
------------+----+----+----
          1 | b  |  2 |  1
          2 | b  |  1 |  2
          3 | d  |  4 |  4
          4 | d  |  4 |  3
          5 | a  |  1 |  1
          6 | a  |  1 |  2
          7 | c  |  3 |  2
          8 | c  |  2 |  3
(8 rows)

-- Brian: 1 specifies 2
--  
--
    select -- mvd 1 -> 2
        x,
        row_number() over (partition by x) as y,
        z 
    from (values (1,'A'),(1,'B'),(2,'C'),(2,'D')) r(x,z);
 x | y | z 
---+---+---
 1 | 1 | A
 1 | 2 | B
 2 | 1 | C
 2 | 2 | D
(4 rows)

-- start_ignore
--
-- whatever is here is ignored until we reach end_ignore
--
-- end_ignore
--
-- explain testing
--
set gp_segments_for_planner=4;
set optimizer_segments=4;
set gp_cost_hashjoin_chainwalk=on;
set optimizer_nestloop_factor = 1.0;
explain analyze select a.* from gpd1 as a, gpd1 as b where b.c1 in (select max(c1) from gpd1);
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice5; segments: 3)  (cost=10000000001.14..10000000003.38 rows=4 width=12) (actual time=5.946..5.951 rows=16 loops=1)
   ->  Hash Semi Join  (cost=10000000001.14..10000000003.38 rows=2 width=12) (actual time=4.100..4.745 rows=16 loops=1)
         Hash Cond: b.c1 = (max((max(gpd1.c1))))
         (seg2)   Hash chain length 1.0 avg, 1 max, using 1 of 131072 buckets.
         ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=10000000000.00..10000000002.20 rows=2 width=14) (actual time=0.021..0.041 rows=16 loops=1)
               Hash Key: b.c1
               ->  Nested Loop  (cost=10000000000.00..10000000002.13 rows=2 width=14) (actual time=0.524..1.567 rows=32 loops=1)
                     ->  Seq Scan on gpd1 a  (cost=0.00..1.01 rows=1 width=12) (actual time=0.123..0.127 rows=4 loops=1)
                     ->  Materialize  (cost=0.00..1.08 rows=2 width=2) (actual time=0.094..0.261 rows=8 loops=4)
                           ->  Broadcast Motion 3:3  (slice1; segments: 3)  (cost=0.00..1.06 rows=2 width=2) (actual time=0.055..0.705 rows=8 loops=1)
                                 ->  Seq Scan on gpd1 b  (cost=0.00..1.01 rows=1 width=2) (actual time=0.108..0.115 rows=4 loops=1)
         ->  Hash  (cost=1.12..1.12 rows=1 width=32) (actual time=2.871..2.871 rows=1 loops=1)
               ->  Redistribute Motion 1:3  (slice4; segments: 1)  (cost=1.08..1.12 rows=1 width=32) (actual time=2.852..2.853 rows=1 loops=1)
                     Hash Key: (max((max(gpd1.c1))))
                     ->  Aggregate  (cost=1.08..1.09 rows=1 width=32) (actual time=2.667..2.668 rows=1 loops=1)
                           ->  Gather Motion 3:1  (slice3; segments: 3)  (cost=1.01..1.07 rows=1 width=32) (actual time=1.524..2.512 rows=3 loops=1)
                                 ->  Aggregate  (cost=1.01..1.02 rows=1 width=32) (actual time=0.212..0.212 rows=1 loops=1)
                                       ->  Seq Scan on gpd1  (cost=0.00..1.01 rows=1 width=2) (actual time=0.108..0.113 rows=4 loops=1)
   (slice0)    Executor memory: 518K bytes.
   (slice1)    Executor memory: 66K bytes avg x 3 workers, 66K bytes max (seg0).
   (slice2)    Executor memory: 126K bytes avg x 3 workers, 126K bytes max (seg0).
   (slice3)    Executor memory: 86K bytes avg x 3 workers, 86K bytes max (seg0).
   (slice4)    Executor memory: 66K bytes (seg2).
   (slice5)    Executor memory: 1103K bytes avg x 3 workers, 1114K bytes max (seg2).  Work_mem: 1K bytes max.
 Memory used:  128000kB
 Optimizer: Postgres query optimizer
 Total runtime: 4571.552 ms
(27 rows)

explain select a.* from gpd1 as a, gpd1 as b where b.c1 in (select max(c1) from gpd1);
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice5; segments: 3)  (cost=10000000001.14..10000000003.38 rows=4 width=12)
   ->  Hash Semi Join  (cost=10000000001.14..10000000003.38 rows=2 width=12)
         Hash Cond: b.c1 = (max((max(gpd1.c1))))
         ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=10000000000.00..10000000002.20 rows=2 width=14)
               Hash Key: b.c1
               ->  Nested Loop  (cost=10000000000.00..10000000002.13 rows=2 width=14)
                     ->  Seq Scan on gpd1 a  (cost=0.00..1.01 rows=1 width=12)
                     ->  Materialize  (cost=0.00..1.08 rows=2 width=2)
                           ->  Broadcast Motion 3:3  (slice1; segments: 3)  (cost=0.00..1.06 rows=2 width=2)
                                 ->  Seq Scan on gpd1 b  (cost=0.00..1.01 rows=1 width=2)
         ->  Hash  (cost=1.12..1.12 rows=1 width=32)
               ->  Redistribute Motion 1:3  (slice4; segments: 1)  (cost=1.08..1.12 rows=1 width=32)
                     Hash Key: (max((max(gpd1.c1))))
                     ->  Aggregate  (cost=1.08..1.09 rows=1 width=32)
                           ->  Gather Motion 3:1  (slice3; segments: 3)  (cost=1.01..1.07 rows=1 width=32)
                                 ->  Aggregate  (cost=1.01..1.02 rows=1 width=32)
                                       ->  Seq Scan on gpd1  (cost=0.00..1.01 rows=1 width=2)
 Optimizer: Postgres query optimizer
(18 rows)

select a.* from gpd1 as a, gpd1 as b where b.c1 in (select max(c1) from gpd1);
 c1 | c2 | c3 
----+----+----
 b  |  2 |  1
 b  |  1 |  2
 d  |  4 |  4
 d  |  4 |  3
 b  |  2 |  1
 b  |  1 |  2
 d  |  4 |  4
 d  |  4 |  3
 a  |  1 |  1
 a  |  1 |  2
 c  |  3 |  2
 c  |  2 |  3
 a  |  1 |  1
 a  |  1 |  2
 c  |  3 |  2
 c  |  2 |  3
(16 rows)

set gp_segments_for_planner=40;
set optimizer_segments=40;
set optimizer_nestloop_factor = 1.0;
explain select a.* from gpd1 as a, gpd1 as b where b.c1 in (select max(c1) from gpd1);
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice5; segments: 3)  (cost=10000000001.50..10000000004.64 rows=4 width=12)
   ->  Hash Semi Join  (cost=10000000001.50..10000000004.64 rows=2 width=12)
         Hash Cond: b.c1 = (max((max(gpd1.c1))))
         ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=10000000000.00..10000000003.10 rows=2 width=14)
               Hash Key: b.c1
               ->  Nested Loop  (cost=10000000000.00..10000000003.03 rows=2 width=14)
                     ->  Seq Scan on gpd1 a  (cost=0.00..1.01 rows=1 width=12)
                     ->  Materialize  (cost=0.00..1.62 rows=14 width=2)
                           ->  Broadcast Motion 3:3  (slice1; segments: 3)  (cost=0.00..1.42 rows=14 width=2)
                                 ->  Seq Scan on gpd1 b  (cost=0.00..1.01 rows=1 width=2)
         ->  Hash  (cost=1.49..1.49 rows=1 width=32)
               ->  Redistribute Motion 1:3  (slice4; segments: 1)  (cost=1.45..1.49 rows=1 width=32)
                     Hash Key: (max((max(gpd1.c1))))
                     ->  Aggregate  (cost=1.45..1.46 rows=1 width=32)
                           ->  Gather Motion 3:1  (slice3; segments: 3)  (cost=1.01..1.43 rows=1 width=32)
                                 ->  Aggregate  (cost=1.01..1.02 rows=1 width=32)
                                       ->  Seq Scan on gpd1  (cost=0.00..1.01 rows=1 width=2)
 Optimizer: Postgres query optimizer
(18 rows)

select a.* from gpd1 as a, gpd1 as b where b.c1 in (select max(c1) from gpd1);
 c1 | c2 | c3 
----+----+----
 a  |  1 |  1
 a  |  1 |  2
 c  |  3 |  2
 c  |  2 |  3
 a  |  1 |  1
 a  |  1 |  2
 c  |  3 |  2
 c  |  2 |  3
 b  |  2 |  1
 b  |  1 |  2
 d  |  4 |  4
 d  |  4 |  3
 b  |  2 |  1
 b  |  1 |  2
 d  |  4 |  4
 d  |  4 |  3
(16 rows)

explain analyze select a.* from gpd1 as a, gpd1 as b where b.c1 in (select max(c1) from gpd1);
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice5; segments: 3)  (cost=10000000001.50..10000000004.64 rows=4 width=12) (actual time=1505.871..1505.879 rows=16 loops=1)
   ->  Hash Semi Join  (cost=10000000001.50..10000000004.64 rows=2 width=12) (actual time=1504.363..1505.028 rows=16 loops=1)
         Hash Cond: b.c1 = (max((max(gpd1.c1))))
         (seg2)   Hash chain length 1.0 avg, 1 max, using 1 of 131072 buckets.
         ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=10000000000.00..10000000003.10 rows=2 width=14) (actual time=1502.824..1502.867 rows=16 loops=1)
               Hash Key: b.c1
               ->  Nested Loop  (cost=10000000000.00..10000000003.03 rows=2 width=14) (actual time=0.345..0.677 rows=32 loops=1)
                     ->  Seq Scan on gpd1 a  (cost=0.00..1.01 rows=1 width=12) (actual time=0.076..0.081 rows=4 loops=1)
                     ->  Materialize  (cost=0.00..1.62 rows=14 width=2) (actual time=0.066..0.072 rows=8 loops=4)
                           ->  Broadcast Motion 3:3  (slice1; segments: 3)  (cost=0.00..1.42 rows=14 width=2) (actual time=0.030..0.042 rows=8 loops=1)
                                 ->  Seq Scan on gpd1 b  (cost=0.00..1.01 rows=1 width=2) (actual time=0.078..0.084 rows=4 loops=1)
         ->  Hash  (cost=1.49..1.49 rows=1 width=32) (actual time=1.442..1.442 rows=1 loops=1)
               ->  Redistribute Motion 1:3  (slice4; segments: 1)  (cost=1.45..1.49 rows=1 width=32) (actual time=1.436..1.436 rows=1 loops=1)
                     Hash Key: (max((max(gpd1.c1))))
                     ->  Aggregate  (cost=1.45..1.46 rows=1 width=32) (actual time=0.036..0.036 rows=1 loops=1)
                           ->  Gather Motion 3:1  (slice3; segments: 3)  (cost=1.01..1.43 rows=1 width=32) (actual time=0.017..0.023 rows=3 loops=1)
                                 ->  Aggregate  (cost=1.01..1.02 rows=1 width=32) (actual time=0.093..0.093 rows=1 loops=1)
                                       ->  Seq Scan on gpd1  (cost=0.00..1.01 rows=1 width=2) (actual time=0.055..0.061 rows=4 loops=1)
   (slice0)    Executor memory: 518K bytes.
   (slice1)    Executor memory: 66K bytes avg x 3 workers, 66K bytes max (seg0).
   (slice2)    Executor memory: 126K bytes avg x 3 workers, 126K bytes max (seg0).
   (slice3)    Executor memory: 86K bytes avg x 3 workers, 86K bytes max (seg0).
   (slice4)    Executor memory: 65K bytes (seg2).
   (slice5)    Executor memory: 1103K bytes avg x 3 workers, 1114K bytes max (seg2).  Work_mem: 1K bytes max.
 Memory used:  128000kB
 Optimizer: Postgres query optimizer
 Total runtime: 1507.339 ms
(27 rows)

--
-- Clean up
--
DROP TABLE  gpd1;
-- start_matchsubs
--
-- # create a match/subs expression to handle a value which always changes
--
-- # use zero-width negative look-behind assertion to match "gpmatchsubs1"
-- # that does not follow substring
--
-- m/(?<!substring..)gpmatchsubs1/
-- s/gpmatchsubs1.*/happy sub1/
--
-- m/(?<!substring..)gpmatchsubs2/
-- s/gpmatchsubs2.*/happy sub2/
--
-- end_matchsubs
-- substitute constant values for results
-- use substring because length of time string varies which changes output
select substring('gpmatchsubs1' || now(), 1,  25);
         substring         
---------------------------
 gpmatchsubs1Mon Jul 21 14
(1 row)

select substring('gpmatchsubs2' || now(), 1,  25);
         substring         
---------------------------
 gpmatchsubs2Mon Jul 21 14
(1 row)

-- start_matchignore
--
-- # create a match expression to handle a value which always changes
--
-- m/(?<!substring..)gpmatchignore1/
-- m/(?<!substring..)gpmatchignore2/
--
-- end_matchignore
-- just ignore the results
select substring('gpmatchignore1' || now(), 1,  25);
         substring         
---------------------------
 gpmatchignore1Mon Jul 21 
(1 row)

select substring('gpmatchignore2' || now(), 1,  25);
         substring         
---------------------------
 gpmatchignore2Mon Jul 21 
(1 row)

reset optimizer_nestloop_factor;
-- 
