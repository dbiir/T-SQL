DROP TABLE IF EXISTS filter_test;
NOTICE:  table "filter_test" does not exist, skipping
CREATE TABLE filter_test (i int, j int) DISTRIBUTED BY (i);
INSERT INTO filter_test VALUES
  (1, 1),
  (2, 1),
  (3, 1),
  (4, 2),
  (NULL, 2),
  (6, 2),
  (7, 3),
  (8, NULL),
  (9, 3),
  (10, NULL);
SELECT i,j FROM filter_test order by i;
 i  | j 
----+---
  1 | 1
  2 | 1
  3 | 1
  4 | 2
  6 | 2
  7 | 3
  8 |  
  9 | 3
 10 |  
    | 2
(10 rows)

-- TEST COUNT(*)
SELECT count(*) FROM filter_test;
 count 
-------
    10
(1 row)

SELECT count(*) FILTER (WHERE TRUE) FROM filter_test;
 count 
-------
    10
(1 row)

SELECT count(*) FILTER (WHERE FALSE) FROM filter_test;
 count 
-------
     0
(1 row)

SELECT count(*) FILTER (WHERE i < 5) FROM filter_test;
 count 
-------
     4
(1 row)

SELECT count(*) FROM filter_test WHERE i < 5;
 count 
-------
     4
(1 row)

SELECT count(*) FILTER (WHERE j = 1) FROM filter_test;
 count 
-------
     3
(1 row)

SELECT count(*) FROM filter_test WHERE j = 1;
 count 
-------
     3
(1 row)

-- TEST COUNT(i)
SELECT count(i) FROM filter_test;
 count 
-------
     9
(1 row)

SELECT count(i) FILTER (WHERE TRUE) FROM filter_test;
 count 
-------
     9
(1 row)

SELECT count(i) FILTER (WHERE FALSE) FROM filter_test;
 count 
-------
     0
(1 row)

SELECT count(i) FILTER (WHERE i < 5) FROM filter_test;
 count 
-------
     4
(1 row)

SELECT count(i) FROM filter_test WHERE i < 5;
 count 
-------
     4
(1 row)

SELECT count(i) FILTER (WHERE j = 1) FROM filter_test;
 count 
-------
     3
(1 row)

SELECT count(i) FROM filter_test WHERE j = 1;
 count 
-------
     3
(1 row)

-- TEST MAX(*) => should error
SELECT max(*) FROM filter_test;
ERROR:  function max() does not exist
LINE 1: SELECT max(*) FROM filter_test;
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT max(*) FILTER (WHERE i < 5) FROM filter_test;
ERROR:  function max() does not exist
LINE 1: SELECT max(*) FILTER (WHERE i < 5) FROM filter_test;
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- Use old sort implementation
set gp_enable_mk_sort=off;
-- TEST MAX(i)
SELECT max(i) FROM filter_test;
 max 
-----
  10
(1 row)

SELECT max(i) FILTER (WHERE i < 5) FROM filter_test;
 max 
-----
   4
(1 row)

SELECT max(i) FROM filter_test WHERE i < 5;
 max 
-----
   4
(1 row)

-- TEST MIN(i)
SELECT min(i) FROM filter_test;
 min 
-----
   1
(1 row)

SELECT min(i) FILTER (WHERE i < 5) FROM filter_test;
 min 
-----
   1
(1 row)

SELECT min(i) FROM filter_test WHERE i < 5;
 min 
-----
   1
(1 row)

-- TEST MAX(i)
SELECT MAX(i) FROM filter_test;
 max 
-----
  10
(1 row)

SELECT MAX(i) FILTER (WHERE i < 5) FROM filter_test;
 max 
-----
   4
(1 row)

SELECT MAX(i) FROM filter_test WHERE i < 5;
 max 
-----
   4
(1 row)

-- TEST AVG(i)
SELECT AVG(i) FROM filter_test;
        avg         
--------------------
 5.5555555555555556
(1 row)

SELECT AVG(i) FILTER (WHERE i < 5) FROM filter_test;
        avg         
--------------------
 2.5000000000000000
(1 row)

SELECT AVG(i) FROM filter_test WHERE i < 5;
        avg         
--------------------
 2.5000000000000000
(1 row)

-- TEST SUM(i)
SELECT sum(i) FROM filter_test;
 sum 
-----
  50
(1 row)

SELECT sum(i) FILTER (WHERE i < 5) FROM filter_test;
 sum 
-----
  10
(1 row)

SELECT sum(i) FROM filter_test WHERE i < 5;
 sum 
-----
  10
(1 row)

-- SUM is special since it is non-strict to handle datatype upconversion.
-- Run tests to make sure it works against different datatypes
SELECT sum(i::int2) FILTER (WHERE i < 5) FROM filter_test;
 sum 
-----
  10
(1 row)

SELECT sum(i::int4) FILTER (WHERE i < 5) FROM filter_test;
 sum 
-----
  10
(1 row)

SELECT sum(i::int8) FILTER (WHERE i < 5) FROM filter_test;
 sum 
-----
  10
(1 row)

SELECT sum(i::float) FILTER (WHERE i < 5) FROM filter_test;
 sum 
-----
  10
(1 row)

SELECT sum(i::float8) FILTER (WHERE i < 5) FROM filter_test;
 sum 
-----
  10
(1 row)

SELECT sum(i::numeric) FILTER (WHERE i < 5) FROM filter_test;
 sum 
-----
  10
(1 row)

-- TEST with cumulative aggs
SELECT i, j, count(j) OVER (order by i) FROM filter_test ORDER BY i;
 i  | j | count 
----+---+-------
  1 | 1 |     1
  2 | 1 |     2
  3 | 1 |     3
  4 | 2 |     4
  6 | 2 |     5
  7 | 3 |     6
  8 |   |     6
  9 | 3 |     7
 10 |   |     7
    | 2 |     8
(10 rows)

SELECT i, j, count(j) FILTER (WHERE i % 2 = 1) OVER (order by i) FROM filter_test ORDER BY i;
 i  | j | count 
----+---+-------
  1 | 1 |     1
  2 | 1 |     1
  3 | 1 |     2
  4 | 2 |     2
  6 | 2 |     2
  7 | 3 |     3
  8 |   |     3
  9 | 3 |     4
 10 |   |     4
    | 2 |     4
(10 rows)

SELECT i, j, count(j) OVER (order by i) FROM filter_test WHERE i % 2 = 1 ORDER BY i;
 i | j | count 
---+---+-------
 1 | 1 |     1
 3 | 1 |     2
 7 | 3 |     3
 9 | 3 |     4
(4 rows)

-- TEST with partitioned aggs
select i, j, count(i) over (partition by j) from filter_test ORDER BY j, i;
 i  | j | count 
----+---+-------
  1 | 1 |     3
  2 | 1 |     3
  3 | 1 |     3
  4 | 2 |     2
  6 | 2 |     2
    | 2 |     2
  7 | 3 |     2
  9 | 3 |     2
  8 |   |     2
 10 |   |     2
(10 rows)

select i, j, count(i) filter (WHERE i % 2 = 1) over (partition by j) from filter_test ORDER BY j, i;
 i  | j | count 
----+---+-------
  1 | 1 |     2
  2 | 1 |     2
  3 | 1 |     2
  4 | 2 |     0
  6 | 2 |     0
    | 2 |     0
  7 | 3 |     2
  9 | 3 |     2
  8 |   |     0
 10 |   |     0
(10 rows)

-- TEST with rolling window aggs
select i, j, count(i) over(w) from filter_test 
window w as (order by i rows between 1 preceding and 1 following) ORDER BY i;
 i  | j | count 
----+---+-------
  1 | 1 |     2
  2 | 1 |     3
  3 | 1 |     3
  4 | 2 |     3
  6 | 2 |     3
  7 | 3 |     3
  8 |   |     3
  9 | 3 |     3
 10 |   |     2
    | 2 |     1
(10 rows)

select i, j, count(i) filter (where j = 2) over(w) from filter_test 
window w as (order by i rows between 1 preceding and 1 following) ORDER BY i;
 i  | j | count 
----+---+-------
  1 | 1 |     0
  2 | 1 |     0
  3 | 1 |     1
  4 | 2 |     2
  6 | 2 |     2
  7 | 3 |     1
  8 |   |     0
  9 | 3 |     0
 10 |   |     0
    | 2 |     0
(10 rows)

-- TEST with group by
select j, count(i) from filter_test group by j ORDER BY j;
 j | count 
---+-------
 1 |     3
 2 |     2
 3 |     2
   |     2
(4 rows)

select o.*, sum(count_num) over (order by j) as count_subtotal
from (select j, count(i) filter (WHERE i%2 = 0) as count_even,
                count(i) filter (WHERE i%2 = 1) as count_odd,
                count(i) as count_num
      from filter_test group by j) o
ORDER BY j;
 j | count_even | count_odd | count_num | count_subtotal 
---+------------+-----------+-----------+----------------
 1 |          1 |         2 |         3 |              3
 2 |          2 |         0 |         2 |              5
 3 |          0 |         2 |         2 |              7
   |          2 |         0 |         2 |              9
(4 rows)

select count(i) from filter_test;
 count 
-------
     9
(1 row)

-- TEST with multi-parameter aggs
select covar_pop(i,j) from filter_test;
    covar_pop     
------------------
 2.08163265306122
(1 row)

select covar_pop(i,j) from filter_test where i < 5;
 covar_pop 
-----------
     0.375
(1 row)

select covar_pop(i,j) filter (where i < 5) from filter_test;
 covar_pop 
-----------
     0.375
(1 row)

select covar_pop(i,j) from filter_test where j in (1,2);
 covar_pop 
-----------
      0.72
(1 row)

select covar_pop(i,j) filter (where j in (1,2)) from filter_test;
 covar_pop 
-----------
      0.72
(1 row)

-- TEST with window functions => should error
select i, j, row_number() over (partition by j order by i) from filter_test ORDER BY j,i;
 i  | j | row_number 
----+---+------------
  1 | 1 |          1
  2 | 1 |          2
  3 | 1 |          3
  4 | 2 |          1
  6 | 2 |          2
    | 2 |          3
  7 | 3 |          1
  9 | 3 |          2
  8 |   |          1
 10 |   |          2
(10 rows)

select i, j, row_number() filter (WHERE i % 2 = 1) over (partition by j order by i) 
FROM filter_test ORDER BY j, i;
ERROR:  FILTER is not implemented for non-aggregate window functions
LINE 1: select i, j, row_number() filter (WHERE i % 2 = 1) over (par...
                     ^
select i, rank() over (order by i) from filter_test ORDER BY i;
 i  | rank 
----+------
  1 |    1
  2 |    2
  3 |    3
  4 |    4
  6 |    5
  7 |    6
  8 |    7
  9 |    8
 10 |    9
    |   10
(10 rows)

select i, rank() filter (where true) over (order by i) from filter_test ORDER BY i;
ERROR:  FILTER is not implemented for non-aggregate window functions
LINE 1: select i, rank() filter (where true) over (order by i) from ...
                  ^
select i, ntile(3) over (order by i) from filter_test ORDER BY i;
 i  | ntile 
----+-------
  1 |     1
  2 |     1
  3 |     1
  4 |     1
  6 |     2
  7 |     2
  8 |     2
  9 |     3
 10 |     3
    |     3
(10 rows)

select i, ntile(3) filter (where true) over (order by i) from filter_test ORDER BY i;
ERROR:  FILTER is not implemented for non-aggregate window functions
LINE 1: select i, ntile(3) filter (where true) over (order by i) fro...
                  ^
select i, ntile(4-j) over (partition by j order by i) 
FROM filter_test where j < 4 ORDER BY j, i;
 i | ntile 
---+-------
 1 |     1
 2 |     2
 3 |     3
 4 |     1
 6 |     1
   |     2
 7 |     1
 9 |     1
(8 rows)

select i, ntile(4-j) filter (where true) over (partition by j order by i) 
from filter_test where j < 4 ORDER BY j, i;
ERROR:  FILTER is not implemented for non-aggregate window functions
LINE 1: select i, ntile(4-j) filter (where true) over (partition by ...
                  ^
-- TEST against non aggregate function => should error
select i, lower('Hello') from filter_test order by i;
 i  | lower 
----+-------
  1 | hello
  2 | hello
  3 | hello
  4 | hello
  6 | hello
  7 | hello
  8 | hello
  9 | hello
 10 | hello
    | hello
(10 rows)

select i, lower('Hello') filter (where i < 5) from filter_test order by i;
ERROR:  FILTER specified, but lower is not an aggregate function
LINE 1: select i, lower('Hello') filter (where i < 5) from filter_te...
                  ^
-- TEST against function like projection => should error
create or replace function maketuple() returns setof filter_test 
as 'select * from filter_test' language sql READS SQL DATA;
select i(t), j(t) from (select maketuple() as t) x order by i(t);
 i  | j 
----+---
  1 | 1
  2 | 1
  3 | 1
  4 | 2
  6 | 2
  7 | 3
  8 |  
  9 | 3
 10 |  
    | 2
(10 rows)

select i(t) filter (where true) from (select maketuple() as t) x order by i(t);
ERROR:  function i(filter_test) does not exist
LINE 1: select i(t) filter (where true) from (select maketuple() as ...
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
drop function maketuple();
-- TEST non-exsistant function => same error
select chocolate(i) from filter_test;
ERROR:  function chocolate(integer) does not exist
LINE 1: select chocolate(i) from filter_test;
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
select chocolate(i) filter (where true) from filter_test;
ERROR:  function chocolate(integer) does not exist
LINE 1: select chocolate(i) filter (where true) from filter_test;
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- TEST filter from outside scope => error
select * from (select i from filter_test where j = 1) x1, 
              (select sum(i) filter (where i < x1.i) from filter_test where j = 2) x2;
ERROR:  invalid reference to FROM-clause entry for table "x1"
LINE 2:               (select sum(i) filter (where i < x1.i) from fi...
                                                       ^
HINT:  There is an entry for table "x1", but it cannot be referenced from this part of the query.
-- TEST against user defined aggregation function
create or replace function _maxodd(oldmax int, newval int) returns int as $$
  SELECT CASE WHEN $1 is NULL 
              THEN (CASE WHEN abs($2) % 2 = 1 THEN $2 
                         ELSE NULL END)
              ELSE (CASE WHEN abs($2) % 2 = 0 THEN $1
                         ELSE (CASE WHEN $2 > $1 
                                    THEN $2 ELSE $1 END) 
                         END)
              END;
$$ LANGUAGE sql STRICT CONTAINS SQL;
create aggregate maxodd(sfunc = _maxodd, basetype = int, stype = int, initcond = 0);
SELECT maxodd(i) from filter_test;
 maxodd 
--------
      9
(1 row)

SELECT maxodd(i) FILTER (WHERE TRUE) from filter_test;
 maxodd 
--------
      9
(1 row)

SELECT j, maxodd(i) from filter_test group by j order by j;
 j | maxodd 
---+--------
 1 |      3
 2 |      0
 3 |      9
   |      0
(4 rows)

SELECT j, maxodd(i) FILTER (WHERE TRUE) from filter_test group by j order by j;
 j | maxodd 
---+--------
 1 |      3
 2 |      0
 3 |      9
   |      0
(4 rows)

-- TEST NON-STRICT user defined aggregation function => should error
create or replace function _maxodd(oldmax int, newval int) returns int as $$
  SELECT CASE WHEN $1 is NULL 
              THEN (CASE WHEN abs($2) % 2 = 1 THEN $2 
                         ELSE NULL END)
              ELSE (CASE WHEN abs($2) % 2 = 0 THEN $1
                         ELSE (CASE WHEN $2 > $1 
                                    THEN $2 ELSE $1 END) 
                         END)
              END;
$$ LANGUAGE sql CONTAINS SQL;
SELECT maxodd(i) FROM filter_test;
 maxodd 
--------
      9
(1 row)

SELECT maxodd(i) FILTER (WHERE TRUE) from filter_test;
 maxodd 
--------
      9
(1 row)

SELECT j, maxodd(i) FROM filter_test group by j order by j;
 j | maxodd 
---+--------
 1 |      3
 2 |      0
 3 |      9
   |      0
(4 rows)

SELECT j, maxodd(i) FILTER (WHERE TRUE) from filter_test group by j order by j;
 j | maxodd 
---+--------
 1 |      3
 2 |      0
 3 |      9
   |      0
(4 rows)

-- TEST view deparsing of FILTER expressions.
CREATE VIEW filter_view AS SELECT count(*) FILTER (WHERE TRUE) FROM filter_test;
SELECT definition from pg_views WHERE viewname='filter_view';
                  definition                   
-----------------------------------------------
  SELECT count(*) FILTER (WHERE true) AS count+
    FROM filter_test;
(1 row)

drop aggregate maxodd(int);
drop function _maxodd(int,int);
