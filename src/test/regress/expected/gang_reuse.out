-- This test is to verify the order of reusing idle gangs.
--
-- For example:
-- In the same session,
-- query 1 has 3 slices and it creates gang B, gang C and gang D.
-- query 2 has 2 slices, we hope it reuses gang B and gang C instead of other
-- cases like gang D and gang C.
--
-- In this way, the two queries can have the same send-receive port pair. It's
-- useful in platform like Azure. Because Azure limits the number of different
-- send-receive port pairs (AKA flow) in a certain time period.
-- To verify the order we show the gang id in EXPLAIN ANALYZE output when
-- gp_log_gang is 'debug', turn on this output.
set gp_log_gang to 'debug';
set gp_cached_segworkers_threshold to 10;
set gp_vmem_idle_resource_timeout to '60s';
set optimizer_enable_motion_broadcast to off;
set optimizer_force_multistage_agg to on;
create table test_gang_reuse_t1 (c1 int, c2 int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'c1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
-- this query will create 3 reader gangs with ids C, D and E, we expect they
-- will always be reused in the same order
explain analyze select count(*) from test_gang_reuse_t1 a
  join test_gang_reuse_t1 b using (c2)
  join test_gang_reuse_t1 c using (c2)
;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=88792873.08..88792873.09 rows=1 width=8) (actual time=6.019..6.019 rows=1 loops=1)
   ->  Gather Motion 3:1  (slice4; gang0; segments: 3)  (cost=88792873.01..88792873.06 rows=1 width=8) (actual time=5.614..6.010 rows=3 loops=1)
         ->  Aggregate  (cost=88792873.01..88792873.02 rows=1 width=8) (actual time=3.621..3.621 rows=1 loops=1)
               ->  Hash Join  (cost=7518.50..87197179.56 rows=212759127 width=0) (never executed)
                     Hash Cond: (a.c2 = c.c2)
                     ->  Hash Join  (cost=3759.25..1007440.85 rows=2471070 width=8) (never executed)
                           Hash Cond: (a.c2 = b.c2)
                           ->  Redistribute Motion 3:3  (slice1; gang3; segments: 3)  (cost=0.00..2683.00 rows=28700 width=4) (never executed)
                                 Hash Key: a.c2
                                 ->  Seq Scan on test_gang_reuse_t1 a  (cost=0.00..961.00 rows=28700 width=4) (never executed)
                           ->  Hash  (cost=2683.00..2683.00 rows=28700 width=4) (never executed)
                                 ->  Redistribute Motion 3:3  (slice2; gang6; segments: 3)  (cost=0.00..2683.00 rows=28700 width=4) (never executed)
                                       Hash Key: b.c2
                                       ->  Seq Scan on test_gang_reuse_t1 b  (cost=0.00..961.00 rows=28700 width=4) (never executed)
                     ->  Hash  (cost=2683.00..2683.00 rows=28700 width=4) (never executed)
                           ->  Redistribute Motion 3:3  (slice3; gang9; segments: 3)  (cost=0.00..2683.00 rows=28700 width=4) (never executed)
                                 Hash Key: c.c2
                                 ->  Seq Scan on test_gang_reuse_t1 c  (cost=0.00..961.00 rows=28700 width=4) (never executed)
 Planning time: 3.415 ms
   (slice0)    Executor memory: 127K bytes.
   (slice1)    Executor memory: 60K bytes avg x 3 workers, 60K bytes max (seg0).
   (slice2)    Executor memory: 60K bytes avg x 3 workers, 60K bytes max (seg0).
   (slice3)    Executor memory: 60K bytes avg x 3 workers, 60K bytes max (seg0).
   (slice4)    Executor memory: 2128K bytes avg x 3 workers, 2128K bytes max (seg0).
 Memory used:  128000kB
 Optimizer: Postgres query optimizer
 Execution time: 19.418 ms
(27 rows)

-- so in this query the gangs C and D should be used
explain analyze select count(*) from test_gang_reuse_t1 a
  join test_gang_reuse_t1 b using (c2)
;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=1025973.94..1025973.95 rows=1 width=8) (actual time=4.816..4.816 rows=1 loops=1)
   ->  Gather Motion 3:1  (slice3; gang0; segments: 3)  (cost=1025973.88..1025973.93 rows=1 width=8) (actual time=3.549..4.806 rows=3 loops=1)
         ->  Aggregate  (cost=1025973.88..1025973.89 rows=1 width=8) (actual time=3.772..3.772 rows=1 loops=1)
               ->  Hash Join  (cost=3759.25..1007440.85 rows=2471070 width=0) (never executed)
                     Hash Cond: (a.c2 = b.c2)
                     ->  Redistribute Motion 3:3  (slice1; gang3; segments: 3)  (cost=0.00..2683.00 rows=28700 width=4) (never executed)
                           Hash Key: a.c2
                           ->  Seq Scan on test_gang_reuse_t1 a  (cost=0.00..961.00 rows=28700 width=4) (never executed)
                     ->  Hash  (cost=2683.00..2683.00 rows=28700 width=4) (never executed)
                           ->  Redistribute Motion 3:3  (slice2; gang6; segments: 3)  (cost=0.00..2683.00 rows=28700 width=4) (never executed)
                                 Hash Key: b.c2
                                 ->  Seq Scan on test_gang_reuse_t1 b  (cost=0.00..961.00 rows=28700 width=4) (never executed)
 Planning time: 1.300 ms
   (slice0)    Executor memory: 127K bytes.
   (slice1)    Executor memory: 44K bytes avg x 3 workers, 44K bytes max (seg0).
   (slice2)    Executor memory: 44K bytes avg x 3 workers, 44K bytes max (seg0).
   (slice3)    Executor memory: 4176K bytes avg x 3 workers, 4176K bytes max (seg0).
 Memory used:  128000kB
 Optimizer: Postgres query optimizer
 Execution time: 8.568 ms
(20 rows)

-- so in this query the gangs C, D and E should be used
explain analyze select count(*) from test_gang_reuse_t1 a
  join test_gang_reuse_t1 b using (c2)
  join test_gang_reuse_t1 c using (c2)
;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=88792873.08..88792873.09 rows=1 width=8) (actual time=4.357..4.357 rows=1 loops=1)
   ->  Gather Motion 3:1  (slice4; gang0; segments: 3)  (cost=88792873.01..88792873.06 rows=1 width=8) (actual time=3.881..4.346 rows=3 loops=1)
         ->  Aggregate  (cost=88792873.01..88792873.02 rows=1 width=8) (actual time=2.066..2.066 rows=1 loops=1)
               ->  Hash Join  (cost=7518.50..87197179.56 rows=212759127 width=0) (never executed)
                     Hash Cond: (a.c2 = c.c2)
                     ->  Hash Join  (cost=3759.25..1007440.85 rows=2471070 width=8) (never executed)
                           Hash Cond: (a.c2 = b.c2)
                           ->  Redistribute Motion 3:3  (slice1; gang3; segments: 3)  (cost=0.00..2683.00 rows=28700 width=4) (never executed)
                                 Hash Key: a.c2
                                 ->  Seq Scan on test_gang_reuse_t1 a  (cost=0.00..961.00 rows=28700 width=4) (never executed)
                           ->  Hash  (cost=2683.00..2683.00 rows=28700 width=4) (never executed)
                                 ->  Redistribute Motion 3:3  (slice2; gang6; segments: 3)  (cost=0.00..2683.00 rows=28700 width=4) (never executed)
                                       Hash Key: b.c2
                                       ->  Seq Scan on test_gang_reuse_t1 b  (cost=0.00..961.00 rows=28700 width=4) (never executed)
                     ->  Hash  (cost=2683.00..2683.00 rows=28700 width=4) (never executed)
                           ->  Redistribute Motion 3:3  (slice3; gang9; segments: 3)  (cost=0.00..2683.00 rows=28700 width=4) (never executed)
                                 Hash Key: c.c2
                                 ->  Seq Scan on test_gang_reuse_t1 c  (cost=0.00..961.00 rows=28700 width=4) (never executed)
 Planning time: 1.931 ms
   (slice0)    Executor memory: 127K bytes.
   (slice1)    Executor memory: 44K bytes avg x 3 workers, 44K bytes max (seg0).
   (slice2)    Executor memory: 44K bytes avg x 3 workers, 44K bytes max (seg0).
   (slice3)    Executor memory: 44K bytes avg x 3 workers, 44K bytes max (seg0).
   (slice4)    Executor memory: 2128K bytes avg x 3 workers, 2128K bytes max (seg0).
 Memory used:  128000kB
 Optimizer: Postgres query optimizer
 Execution time: 5.753 ms
(27 rows)

-- so in this query the gangs C and D should be used
explain analyze select count(*) from test_gang_reuse_t1 a
  join test_gang_reuse_t1 b using (c2)
;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=1025973.94..1025973.95 rows=1 width=8) (actual time=5.047..5.047 rows=1 loops=1)
   ->  Gather Motion 3:1  (slice3; gang0; segments: 3)  (cost=1025973.88..1025973.93 rows=1 width=8) (actual time=4.225..5.010 rows=3 loops=1)
         ->  Aggregate  (cost=1025973.88..1025973.89 rows=1 width=8) (actual time=3.209..3.210 rows=1 loops=1)
               ->  Hash Join  (cost=3759.25..1007440.85 rows=2471070 width=0) (never executed)
                     Hash Cond: (a.c2 = b.c2)
                     ->  Redistribute Motion 3:3  (slice1; gang3; segments: 3)  (cost=0.00..2683.00 rows=28700 width=4) (never executed)
                           Hash Key: a.c2
                           ->  Seq Scan on test_gang_reuse_t1 a  (cost=0.00..961.00 rows=28700 width=4) (never executed)
                     ->  Hash  (cost=2683.00..2683.00 rows=28700 width=4) (never executed)
                           ->  Redistribute Motion 3:3  (slice2; gang6; segments: 3)  (cost=0.00..2683.00 rows=28700 width=4) (never executed)
                                 Hash Key: b.c2
                                 ->  Seq Scan on test_gang_reuse_t1 b  (cost=0.00..961.00 rows=28700 width=4) (never executed)
 Planning time: 1.231 ms
   (slice0)    Executor memory: 127K bytes.
   (slice1)    Executor memory: 44K bytes avg x 3 workers, 44K bytes max (seg0).
   (slice2)    Executor memory: 44K bytes avg x 3 workers, 44K bytes max (seg0).
   (slice3)    Executor memory: 4176K bytes avg x 3 workers, 4176K bytes max (seg0).
 Memory used:  128000kB
 Optimizer: Postgres query optimizer
 Execution time: 6.223 ms
(20 rows)

reset optimizer_force_multistage_agg;
