-- Given there is a partitioned table
	create table some_partitioned_table_to_truncate
	(
		a integer
	)
	partition by range (a) (
		partition b start (0)
	);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
NOTICE:  CREATE TABLE will create partition "some_partitioned_table_to_truncate_1_prt_b" for table "some_partitioned_table_to_truncate"
-- And a function that truncates the partitioned table
	CREATE OR REPLACE FUNCTION truncate_a_partition_table() RETURNS VOID AS
	$$
	BEGIN
	    TRUNCATE some_partitioned_table_to_truncate;
	END;
	$$ LANGUAGE plpgsql;
-- When I truncate the table twice
	insert into some_partitioned_table_to_truncate
	       select i from generate_series(1, 10) i;
   	select count(*) from some_partitioned_table_to_truncate;
 count 
-------
    10
(1 row)

	select truncate_a_partition_table();
 truncate_a_partition_table 
----------------------------
 
(1 row)

   	select count(*) from some_partitioned_table_to_truncate;	
 count 
-------
     0
(1 row)

-- Then I get the same result both times (no rows)
	insert into some_partitioned_table_to_truncate
	       select i from generate_series(1, 10) i;
   	select count(*) from some_partitioned_table_to_truncate;
 count 
-------
    10
(1 row)

	select truncate_a_partition_table();
 truncate_a_partition_table 
----------------------------
 
(1 row)

   	select count(*) from some_partitioned_table_to_truncate;	
 count 
-------
     0
(1 row)

