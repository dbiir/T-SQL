--
-- BOOLEAN
--
create table gpd1 (c1 char(1), c2 numeric, c3 numeric) distributed by (c1);
insert into gpd1 values ('a', 1, 1);
insert into gpd1 values ('a', 1, 2);
insert into gpd1 values ('b', 2, 1);
insert into gpd1 values ('b', 1, 2);
insert into gpd1 values ('c', 3, 2);
insert into gpd1 values ('c', 2, 3);
insert into gpd1 values ('d', 4, 4);
insert into gpd1 values ('d', 4, 3);
--
-- ignore
--
select c1 from gpd1;
 c1 
----
 a
 a
 c
 c
 b
 b
 d
 d
(8 rows)

--
-- order 1, 2
--
select c1, c1, c2, c3 from gpd1 order by 1,2;
 c1 | c1 | c2 | c3 
----+----+----+----
 a  | a  |  1 |  1
 a  | a  |  1 |  2
 b  | b  |  2 |  1
 b  | b  |  1 |  2
 c  | c  |  3 |  2
 c  | c  |  2 |  3
 d  | d  |  4 |  4
 d  | d  |  4 |  3
(8 rows)

--
--
select c1, c1, c2, c3 from gpd1 order by 1,2,3,4; -- order 1, 2     , 3    , 4
 c1 | c1 | c2 | c3 
----+----+----+----
 a  | a  |  1 |  1
 a  | a  |  1 |  2
 b  | b  |  1 |  2
 b  | b  |  2 |  1
 c  | c  |  2 |  3
 c  | c  |  3 |  2
 d  | d  |  4 |  3
 d  | d  |  4 |  4
(8 rows)

--
-- ignore
-- order 1, 2
--
select c1, c1, c2, c3 from gpd1 order by 1,2;
 c1 | c1 | c2 | c3 
----+----+----+----
 a  | a  |  1 |  1
 a  | a  |  1 |  2
 b  | b  |  2 |  1
 b  | b  |  1 |  2
 c  | c  |  3 |  2
 c  | c  |  2 |  3
 d  | d  |  4 |  4
 d  | d  |  4 |  3
(8 rows)

--
--  mvd 2,3->1 ; 2,3->4,5
-- order 4
--
select c1, c2, c3, c1, c1, c2 from gpd1 order by 4;
 c1 | c2 | c3 | c1 | c1 | c2 
----+----+----+----+----+----
 a  |  1 |  1 | a  | a  |  1
 a  |  1 |  2 | a  | a  |  1
 b  |  2 |  1 | b  | b  |  2
 b  |  1 |  2 | b  | b  |  1
 c  |  3 |  2 | c  | c  |  3
 c  |  2 |  3 | c  | c  |  2
 d  |  4 |  4 | d  | d  |  4
 d  |  4 |  3 | d  | d  |  4
(8 rows)

--  Brian: the contents of column 1 are not determined by any other 
--  column -- the column "specifies itself"
--
--  mvd 1->1
--
select row_number() over (), c1, c2, c3 from gpd1;
 row_number | c1 | c2 | c3 
------------+----+----+----
          1 | a  |  1 |  1
          2 | a  |  1 |  2
          3 | c  |  3 |  2
          4 | c  |  2 |  3
          5 | b  |  2 |  1
          6 | b  |  1 |  2
          7 | d  |  4 |  4
          8 | d  |  4 |  3
(8 rows)

-- Brian: 1 specifies 2
--  
--
    select -- mvd 1 -> 2
        x,
        row_number() over (partition by x) as y,
        z 
    from (values (1,'A'),(1,'B'),(2,'C'),(2,'D')) r(x,z);
 x | y | z 
---+---+---
 1 | 1 | B
 1 | 2 | A
 2 | 1 | D
 2 | 2 | C
(4 rows)

-- start_ignore
--
-- whatever is here is ignored until we reach end_ignore
--
-- end_ignore
--
-- explain testing
--
set gp_segments_for_planner=4;
set optimizer_segments=4;
set gp_cost_hashjoin_chainwalk=on;
set optimizer_nestloop_factor = 1.0;
explain analyze select a.* from gpd1 as a, gpd1 as b where b.c1 in (select max(c1) from gpd1);
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Hash Join  (cost=0.00..1724.00 rows=1 width=12) (actual time=1.743..2.097 rows=16 loops=1)
   Hash Cond: (gpd1.c1 = (max(gpd1_2.c1)))
   Extra Text: Hash chain length 1.0 avg, 1 max, using 1 of 262144 buckets.
   ->  Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..1293.00 rows=1 width=14) (actual time=0.282..0.291 rows=64 loops=1)
         ->  Nested Loop  (cost=0.00..1293.00 rows=1 width=14) (actual time=0.949..1.287 rows=32 loops=1)
               Join Filter: true
               ->  Seq Scan on gpd1 gpd1_1  (cost=0.00..431.00 rows=1 width=12) (actual time=0.005..0.006 rows=4 loops=1)
               ->  Materialize  (cost=0.00..431.00 rows=2 width=2) (actual time=0.187..0.253 rows=7 loops=5)
                     ->  Broadcast Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.00 rows=2 width=2) (actual time=0.897..1.264 rows=8 loops=1)
                           ->  Seq Scan on gpd1  (cost=0.00..431.00 rows=1 width=2) (actual time=0.012..0.134 rows=4 loops=1)
   ->  Hash  (cost=431.00..431.00 rows=1 width=8) (actual time=0.137..0.137 rows=1 loops=1)
         Buckets: 262144  Batches: 1  Memory Usage: 1kB
         ->  Aggregate  (cost=0.00..431.00 rows=1 width=8) (actual time=0.133..0.133 rows=1 loops=1)
               ->  Gather Motion 3:1  (slice3; segments: 3)  (cost=0.00..431.00 rows=1 width=2) (actual time=0.004..0.097 rows=8 loops=1)
                     ->  Seq Scan on gpd1 gpd1_2  (cost=0.00..431.00 rows=1 width=2) (actual time=0.008..0.009 rows=4 loops=1)
 Planning time: 109.024 ms
   (slice0)    Executor memory: 2216K bytes.  Work_mem: 1K bytes max.
   (slice1)    Executor memory: 60K bytes avg x 3 workers, 60K bytes max (seg0).
   (slice2)    Executor memory: 96K bytes avg x 3 workers, 96K bytes max (seg0).
   (slice3)    Executor memory: 60K bytes avg x 3 workers, 60K bytes max (seg0).
 Memory used:  128000kB
 Optimizer: Pivotal Optimizer (GPORCA) version 3.64.0
 Execution time: 17.954 ms
(23 rows)

explain select a.* from gpd1 as a, gpd1 as b where b.c1 in (select max(c1) from gpd1);
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Hash Join  (cost=0.00..1724.00 rows=1 width=12)
   Hash Cond: (gpd1.c1 = (max(gpd1_2.c1)))
   ->  Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..1293.00 rows=1 width=14)
         ->  Nested Loop  (cost=0.00..1293.00 rows=1 width=14)
               Join Filter: true
               ->  Seq Scan on gpd1 gpd1_1  (cost=0.00..431.00 rows=1 width=12)
               ->  Materialize  (cost=0.00..431.00 rows=2 width=2)
                     ->  Broadcast Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.00 rows=2 width=2)
                           ->  Seq Scan on gpd1  (cost=0.00..431.00 rows=1 width=2)
   ->  Hash  (cost=431.00..431.00 rows=1 width=8)
         ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
               ->  Gather Motion 3:1  (slice3; segments: 3)  (cost=0.00..431.00 rows=1 width=2)
                     ->  Seq Scan on gpd1 gpd1_2  (cost=0.00..431.00 rows=1 width=2)
 Optimizer: Pivotal Optimizer (GPORCA) version 3.64.0
(14 rows)

select a.* from gpd1 as a, gpd1 as b where b.c1 in (select max(c1) from gpd1);
 c1 | c2 | c3 
----+----+----
 a  |  1 |  1
 a  |  1 |  1
 a  |  1 |  2
 a  |  1 |  2
 c  |  3 |  2
 c  |  3 |  2
 c  |  2 |  3
 c  |  2 |  3
 b  |  2 |  1
 b  |  2 |  1
 b  |  1 |  2
 b  |  1 |  2
 d  |  4 |  4
 d  |  4 |  4
 d  |  4 |  3
 d  |  4 |  3
(16 rows)

set gp_segments_for_planner=40;
set optimizer_segments=40;
set optimizer_nestloop_factor = 1.0;
explain select a.* from gpd1 as a, gpd1 as b where b.c1 in (select max(c1) from gpd1);
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice4; segments: 3)  (cost=0.00..1724.00 rows=1 width=12)
   ->  Hash Join  (cost=0.00..1724.00 rows=1 width=12)
         Hash Cond: (max((max(gpd1.c1)))) = gpd1_1.c1
         ->  Redistribute Motion 1:3  (slice2)  (cost=0.00..431.00 rows=1 width=8)
               Hash Key: (max((max(gpd1.c1))))
               ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                     ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..431.00 rows=1 width=8)
                           ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                 ->  Seq Scan on gpd1  (cost=0.00..431.00 rows=1 width=2)
         ->  Hash  (cost=1293.00..1293.00 rows=1 width=14)
               ->  Nested Loop  (cost=0.00..1293.00 rows=1 width=14)
                     Join Filter: true
                     ->  Broadcast Motion 3:3  (slice3; segments: 3)  (cost=0.00..431.00 rows=14 width=12)
                           ->  Seq Scan on gpd1 gpd1_2  (cost=0.00..431.00 rows=1 width=12)
                     ->  Seq Scan on gpd1 gpd1_1  (cost=0.00..431.00 rows=1 width=2)
 Optimizer: Pivotal Optimizer (GPORCA) version 2.74.0
(16 rows)

select a.* from gpd1 as a, gpd1 as b where b.c1 in (select max(c1) from gpd1);
 c1 | c2 | c3 
----+----+----
 b  |  2 |  1
 b  |  2 |  1
 b  |  1 |  2
 b  |  1 |  2
 d  |  4 |  4
 d  |  4 |  4
 d  |  4 |  3
 d  |  4 |  3
 a  |  1 |  1
 a  |  1 |  1
 a  |  1 |  2
 a  |  1 |  2
 c  |  3 |  2
 c  |  3 |  2
 c  |  2 |  3
 c  |  2 |  3
(16 rows)

explain analyze select a.* from gpd1 as a, gpd1 as b where b.c1 in (select max(c1) from gpd1);
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice4; segments: 3)  (cost=0.00..1724.00 rows=1 width=12) (actual time=2.511..2.513 rows=8 loops=2)
   ->  Hash Join  (cost=0.00..1724.00 rows=1 width=12) (actual time=0.974..2.228 rows=8 loops=2)
         Hash Cond: (max((max(gpd1.c1)))) = gpd1_1.c1
         Extra Text: (seg0)   Hash chain length 16.0 avg, 16 max, using 2 of 524288 buckets.
 
         ->  Redistribute Motion 1:3  (slice2)  (cost=0.00..431.00 rows=1 width=8) (actual time=0.002..0.002 rows=0 loops=2)
               Hash Key: (max((max(gpd1.c1))))
               ->  Aggregate  (cost=0.00..431.00 rows=1 width=8) (actual time=0.222..0.222 rows=0 loops=2)
                     ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..431.00 rows=1 width=8) (actual time=0.008..0.208 rows=2 loops=2)
                           ->  Aggregate  (cost=0.00..431.00 rows=1 width=8) (actual time=0.015..0.015 rows=0 loops=2)
                                 ->  Seq Scan on gpd1  (cost=0.00..431.00 rows=1 width=2) (actual time=0.007..0.009 rows=2 loops=2)
         ->  Hash  (cost=1293.00..1293.00 rows=1 width=14) (actual time=0.060..0.060 rows=16 loops=2)
               ->  Nested Loop  (cost=0.00..1293.00 rows=1 width=14) (actual time=0.029..0.051 rows=16 loops=2)
                     Join Filter: true
                     ->  Broadcast Motion 3:3  (slice3; segments: 3)  (cost=0.00..431.00 rows=14 width=12) (actual time=0.009..0.013 rows=4 loops=2)
                           ->  Seq Scan on gpd1 gpd1_2  (cost=0.00..431.00 rows=1 width=12) (actual time=0.008..0.009 rows=2 loops=2)
                     ->  Seq Scan on gpd1 gpd1_1  (cost=0.00..431.00 rows=1 width=2) (actual time=0.003..0.005 rows=3 loops=10)
   (slice0)    Executor memory: 386K bytes.
   (slice1)    Executor memory: 66K bytes avg x 3 workers, 66K bytes max (seg0).
   (slice2)    Executor memory: 161K bytes (entry db).
   (slice3)    Executor memory: 66K bytes avg x 3 workers, 66K bytes max (seg0).
   (slice4)    Executor memory: 4198K bytes avg x 3 workers, 4198K bytes max (seg0).  Work_mem: 2K bytes max.
 Memory used:  128000kB
 Optimizer: Pivotal Optimizer (GPORCA) version 2.74.0
 Total runtime: 6.345 ms
(25 rows)

--
-- Clean up
--
DROP TABLE  gpd1;
-- start_matchsubs
--
-- # create a match/subs expression to handle a value which always changes
--
-- # use zero-width negative look-behind assertion to match "gpmatchsubs1"
-- # that does not follow substring
--
-- m/(?<!substring..)gpmatchsubs1/
-- s/gpmatchsubs1.*/happy sub1/
--
-- m/(?<!substring..)gpmatchsubs2/
-- s/gpmatchsubs2.*/happy sub2/
--
-- end_matchsubs
-- substitute constant values for results
-- use substring because length of time string varies which changes output
select substring('gpmatchsubs1' || now(), 1,  25);
         substring         
---------------------------
 gpmatchsubs1Fri Aug 15 16
(1 row)

select substring('gpmatchsubs2' || now(), 1,  25);
         substring         
---------------------------
 gpmatchsubs2Fri Aug 15 16
(1 row)

-- start_matchignore
--
-- # create a match expression to handle a value which always changes
--
-- m/(?<!substring..)gpmatchignore1/
-- m/(?<!substring..)gpmatchignore2/
--
-- end_matchignore
-- just ignore the results
select substring('gpmatchignore1' || now(), 1,  25);
         substring         
---------------------------
 gpmatchignore1Fri Aug 15 
(1 row)

select substring('gpmatchignore2' || now(), 1,  25);
         substring         
---------------------------
 gpmatchignore2Fri Aug 15 
(1 row)

reset optimizer_nestloop_factor;
-- 
