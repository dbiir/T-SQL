-- Test bitmap AND and OR
-- Currently greenplum sets random_page_cost as 100 while postgres sets it as 4.
-- This makes some BitmapOps cases are not tested as expected, so I'm
-- temporarily settting random_page_cost as 4 to test those functionalities.
-- Also bump up the statistics target, so that the plans are more stable,
-- and add explain tests to make sure BitmapOps are tested.
SET random_page_cost  = 4;
SET default_statistics_target=1000;
-- Generate enough data that we can test the lossy bitmaps.
-- There's 55 tuples per page in the table. 53 is just
-- below 55, so that an index scan with qual a = constant
-- will return at least one hit per page. 59 is just above
-- 55, so that an index scan with qual b = constant will return
-- hits on most but not all pages. 53 and 59 are prime, so that
-- there's a maximum number of a,b combinations in the table.
-- That allows us to test all the different combinations of
-- lossy and non-lossy pages with the minimum amount of data
CREATE TABLE bmscantest (a int, b int, t text);
INSERT INTO bmscantest
  SELECT (r%53), (r%59), 'foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo'
  FROM generate_series(1,70000) r;
CREATE INDEX i_bmtest_a ON bmscantest(a);
CREATE INDEX i_bmtest_b ON bmscantest(b);
-- We want to use bitmapscans. With default settings, the planner currently
-- chooses a bitmap scan for the queries below anyway, but let's make sure.
set enable_indexscan=false;
set enable_seqscan=false;
-- Lower work_mem to trigger use of lossy bitmaps
set work_mem = 64;
WARNING:  "work_mem": setting is deprecated, and may be removed in a future release.
-- Test bitmap-and.
SELECT count(*) FROM bmscantest WHERE a = 1 AND b = 1;
 count 
-------
    23
(1 row)

-- Test bitmap-or.
SELECT count(*) FROM bmscantest WHERE a = 1 OR b = 1;
 count 
-------
  2485
(1 row)

-- Test mix BitmapOp load of on-disk bitmap index scan and in-memory bitmap index scan:
-- 1) heap
CREATE TABLE bmscantest2 (a int, b int, c int, d int, t text);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO bmscantest2
  SELECT (r%53), (r%59), (r%53), (r%59), 'foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo'
  FROM generate_series(1,70000) r;
CREATE INDEX i_bmtest2_a ON bmscantest2 USING BITMAP(a);
CREATE INDEX i_bmtest2_b ON bmscantest2 USING BITMAP(b);
CREATE INDEX i_bmtest2_c ON bmscantest2(c);
CREATE INDEX i_bmtest2_d ON bmscantest2(d);
EXPLAIN SELECT count(*) FROM bmscantest2 WHERE a = 1 AND b = 1 AND c = 1;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Aggregate  (cost=56.88..56.89 rows=1 width=8)
   ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=56.81..56.86 rows=1 width=8)
         ->  Aggregate  (cost=56.81..56.82 rows=1 width=8)
               ->  Bitmap Heap Scan on bmscantest2  (cost=52.69..56.71 rows=15 width=0)
                     Recheck Cond: ((b = 1) AND (a = 1) AND (c = 1))
                     ->  BitmapAnd  (cost=52.69..52.69 rows=1 width=0)
                           ->  Bitmap Index Scan on i_bmtest2_b  (cost=0.00..17.12 rows=406 width=0)
                                 Index Cond: (b = 1)
                           ->  Bitmap Index Scan on i_bmtest2_a  (cost=0.00..17.44 rows=420 width=0)
                                 Index Cond: (a = 1)
                           ->  Bitmap Index Scan on i_bmtest2_c  (cost=0.00..17.60 rows=420 width=0)
                                 Index Cond: (c = 1)
 Planning time: 1.441 ms
 Optimizer: Postgres query optimizer
(14 rows)

SELECT count(*) FROM bmscantest2 WHERE a = 1 AND b = 1 AND c = 1;
 count 
-------
    23
(1 row)

SELECT count(*) FROM bmscantest2 WHERE a = 1 AND (b = 1 OR c = 1) AND d = 1;
 count 
-------
    23
(1 row)

EXPLAIN SELECT count(*) FROM bmscantest2 WHERE a = 1 OR b = 1 OR c = 1;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Aggregate  (cost=447.03..447.04 rows=1 width=8)
   ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=446.96..447.01 rows=1 width=8)
         ->  Aggregate  (cost=446.96..446.97 rows=1 width=8)
               ->  Bitmap Heap Scan on bmscantest2  (cost=34.26..437.65 rows=1242 width=0)
                     Recheck Cond: ((a = 1) OR (b = 1) OR (c = 1))
                     ->  BitmapOr  (cost=34.26..34.26 rows=1265 width=0)
                           ->  Bitmap Index Scan on i_bmtest2_a  (cost=0.00..7.28 rows=437 width=0)
                                 Index Cond: (a = 1)
                           ->  Bitmap Index Scan on i_bmtest2_b  (cost=0.00..6.20 rows=392 width=0)
                                 Index Cond: (b = 1)
                           ->  Bitmap Index Scan on i_bmtest2_c  (cost=0.00..17.99 rows=437 width=0)
                                 Index Cond: (c = 1)
 Planning time: 0.468 ms
 Optimizer: Postgres query optimizer
(14 rows)

SELECT count(*) FROM bmscantest2 WHERE a = 1 OR b = 1 OR c = 1;
 count 
-------
  2485
(1 row)

SELECT count(*) FROM bmscantest2 WHERE a = 1 OR (b = 1 AND c = 1) OR d = 1;
 count 
-------
  2485
(1 row)

-- 2) ao
CREATE TABLE bmscantest_ao (a int, b int, c int, d int, t text) WITH(appendonly=true, orientation=row);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO bmscantest_ao
  SELECT (r%53), (r%59), (r%53), (r%59), 'foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo'
  FROM generate_series(1,70000) r;
CREATE INDEX i_bmtest_ao_a ON bmscantest_ao USING BITMAP(a);
CREATE INDEX i_bmtest_ao_b ON bmscantest_ao USING BITMAP(b);
CREATE INDEX i_bmtest_ao_c ON bmscantest_ao(c);
CREATE INDEX i_bmtest_ao_d ON bmscantest_ao(d);
EXPLAIN SELECT count(*) FROM bmscantest_ao WHERE a = 1 AND b = 1 AND c = 1;
                                               QUERY PLAN                                              
-------------------------------------------------------------------------------------------------------
 Aggregate  (cost=56.95..56.96 rows=1 width=8)
   ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=56.89..56.94 rows=1 width=8)
         ->  Aggregate  (cost=56.89..56.90 rows=1 width=8)
               ->  Bitmap Heap Scan on bmscantest_ao  (cost=52.76..56.78 rows=14 width=0)
                     Recheck Cond: ((b = 1) AND (a = 1) AND (c = 1))
                     ->  BitmapAnd  (cost=52.76..52.76 rows=1 width=0)
                           ->  Bitmap Index Scan on i_bmtest_ao_b  (cost=0.00..16.82 rows=392 width=0)
                                 Index Cond: (b = 1)
                           ->  Bitmap Index Scan on i_bmtest_ao_a  (cost=0.00..17.62 rows=428 width=0)
                                 Index Cond: (a = 1)
                           ->  Bitmap Index Scan on i_bmtest_ao_c  (cost=0.00..17.79 rows=428 width=0)
                                 Index Cond: (c = 1)
 Planning time: 1.009 ms
 Optimizer: Postgres query optimizer
(14 rows)

SELECT count(*) FROM bmscantest_ao WHERE a = 1 AND b = 1 AND c = 1;
 count 
-------
    23
(1 row)

EXPLAIN SELECT count(*) FROM bmscantest_ao WHERE a = 1 AND (b = 1 OR c = 1) AND d = 1;
                                                  QUERY PLAN                                                 
-------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=73.98..73.99 rows=1 width=8)
   ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=73.92..73.97 rows=1 width=8)
         ->  Aggregate  (cost=73.92..73.93 rows=1 width=8)
               ->  Bitmap Heap Scan on bmscantest_ao  (cost=69.77..73.79 rows=18 width=0)
                     Recheck Cond: ((d = 1) AND (a = 1) AND ((b = 1) OR (c = 1)))
                     ->  BitmapAnd  (cost=69.77..69.77 rows=1 width=0)
                           ->  Bitmap Index Scan on i_bmtest_ao_d  (cost=0.00..16.99 rows=392 width=0)
                                 Index Cond: (d = 1)
                           ->  Bitmap Index Scan on i_bmtest_ao_a  (cost=0.00..17.62 rows=428 width=0)
                                 Index Cond: (a = 1)
                           ->  BitmapOr  (cost=34.64..34.64 rows=820 width=0)
                                 ->  Bitmap Index Scan on i_bmtest_ao_b  (cost=0.00..16.82 rows=392 width=0)
                                       Index Cond: (b = 1)
                                 ->  Bitmap Index Scan on i_bmtest_ao_c  (cost=0.00..17.79 rows=428 width=0)
                                       Index Cond: (c = 1)
 Planning time: 0.504 ms
 Optimizer: Postgres query optimizer
(17 rows)

SELECT count(*) FROM bmscantest_ao WHERE a = 1 AND (b = 1 OR c = 1) AND d = 1;
 count 
-------
    23
(1 row)

EXPLAIN SELECT count(*) FROM bmscantest_ao WHERE a = 1 OR b = 1 OR c = 1;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Aggregate  (cost=404.71..404.72 rows=1 width=8)
   ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=404.65..404.70 rows=1 width=8)
         ->  Aggregate  (cost=404.65..404.66 rows=1 width=8)
               ->  Bitmap Heap Scan on bmscantest_ao  (cost=33.96..395.46 rows=1226 width=0)
                     Recheck Cond: ((a = 1) OR (b = 1) OR (c = 1))
                     ->  BitmapOr  (cost=33.96..33.96 rows=1248 width=0)
                           ->  Bitmap Index Scan on i_bmtest_ao_a  (cost=0.00..7.21 rows=428 width=0)
                                 Index Cond: (a = 1)
                           ->  Bitmap Index Scan on i_bmtest_ao_b  (cost=0.00..6.21 rows=392 width=0)
                                 Index Cond: (b = 1)
                           ->  Bitmap Index Scan on i_bmtest_ao_c  (cost=0.00..17.79 rows=428 width=0)
                                 Index Cond: (c = 1)
 Planning time: 0.370 ms
 Optimizer: Postgres query optimizer
(14 rows)

SELECT count(*) FROM bmscantest_ao WHERE a = 1 OR b = 1 OR c = 1;
 count 
-------
  2485
(1 row)

EXPLAIN SELECT count(*) FROM bmscantest_ao WHERE a = 1 OR (b = 1 AND c = 1) OR d = 1;
                                                  QUERY PLAN                                                 
-------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=405.78..405.79 rows=1 width=8)
   ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=405.72..405.77 rows=1 width=8)
         ->  Aggregate  (cost=405.72..405.73 rows=1 width=8)
               ->  Bitmap Heap Scan on bmscantest_ao  (cost=53.62..399.24 rows=864 width=0)
                     Recheck Cond: ((a = 1) OR ((b = 1) AND (c = 1)) OR (d = 1))
                     ->  BitmapOr  (cost=53.62..53.62 rows=827 width=0)
                           ->  Bitmap Index Scan on i_bmtest_ao_a  (cost=0.00..8.81 rows=428 width=0)
                                 Index Cond: (a = 1)
                           ->  BitmapAnd  (cost=26.28..26.28 rows=8 width=0)
                                 ->  Bitmap Index Scan on i_bmtest_ao_b  (cost=0.00..6.94 rows=392 width=0)
                                       Index Cond: (b = 1)
                                 ->  Bitmap Index Scan on i_bmtest_ao_c  (cost=0.00..17.79 rows=428 width=0)
                                       Index Cond: (c = 1)
                           ->  Bitmap Index Scan on i_bmtest_ao_d  (cost=0.00..16.99 rows=392 width=0)
                                 Index Cond: (d = 1)
 Planning time: 0.520 ms
 Optimizer: Postgres query optimizer
(17 rows)

SELECT count(*) FROM bmscantest_ao WHERE a = 1 OR (b = 1 AND c = 1) OR d = 1;
 count 
-------
  2485
(1 row)

-- 3) aocs
CREATE TABLE bmscantest_aocs (a int, b int, c int, d int, t text) WITH(appendonly=true, orientation=column);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO bmscantest_aocs
  SELECT (r%53), (r%59), (r%53), (r%59), 'foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo'
  FROM generate_series(1,70000) r;
CREATE INDEX i_bmtest_aocs_a ON bmscantest_aocs USING BITMAP(a);
CREATE INDEX i_bmtest_aocs_b ON bmscantest_aocs USING BITMAP(b);
CREATE INDEX i_bmtest_aocs_c ON bmscantest_aocs(c);
CREATE INDEX i_bmtest_aocs_d ON bmscantest_aocs(d);
EXPLAIN SELECT count(*) FROM bmscantest_aocs WHERE a = 1 AND b = 1 AND c = 1;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Aggregate  (cost=57.75..57.76 rows=1 width=8)
   ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=57.69..57.74 rows=1 width=8)
         ->  Aggregate  (cost=57.69..57.70 rows=1 width=8)
               ->  Bitmap Heap Scan on bmscantest_aocs  (cost=53.57..57.58 rows=15 width=0)
                     Recheck Cond: ((b = 1) AND (a = 1) AND (c = 1))
                     ->  BitmapAnd  (cost=51.37..51.37 rows=1 width=0)
                           ->  Bitmap Index Scan on i_bmtest_aocs_b  (cost=0.00..16.71 rows=388 width=0)
                                 Index Cond: (b = 1)
                           ->  Bitmap Index Scan on i_bmtest_aocs_a  (cost=0.00..16.98 rows=400 width=0)
                                 Index Cond: (a = 1)
                           ->  Bitmap Index Scan on i_bmtest_aocs_c  (cost=0.00..17.14 rows=400 width=0)
                                 Index Cond: (c = 1)
 Planning time: 1.587 ms
 Optimizer: Postgres query optimizer
(14 rows)

SELECT count(*) FROM bmscantest_aocs WHERE a = 1 AND b = 1 AND c = 1;
 count 
-------
    23
(1 row)

EXPLAIN SELECT count(*) FROM bmscantest_aocs WHERE a = 1 AND (b = 1 OR c = 1) AND d = 1;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=74.62..74.63 rows=1 width=8)
   ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=74.55..74.60 rows=1 width=8)
         ->  Aggregate  (cost=74.55..74.56 rows=1 width=8)
               ->  Bitmap Heap Scan on bmscantest_aocs  (cost=70.40..74.42 rows=18 width=0)
                     Recheck Cond: ((d = 1) AND (a = 1) AND ((b = 1) OR (c = 1)))
                     ->  BitmapAnd  (cost=70.40..70.40 rows=1 width=0)
                           ->  Bitmap Index Scan on i_bmtest_aocs_d  (cost=0.00..16.82 rows=385 width=0)
                                 Index Cond: (d = 1)
                           ->  Bitmap Index Scan on i_bmtest_aocs_a  (cost=0.00..18.11 rows=450 width=0)
                                 Index Cond: (a = 1)
                           ->  BitmapOr  (cost=34.95..34.95 rows=834 width=0)
                                 ->  Bitmap Index Scan on i_bmtest_aocs_b  (cost=0.00..16.65 rows=385 width=0)
                                       Index Cond: (b = 1)
                                 ->  Bitmap Index Scan on i_bmtest_aocs_c  (cost=0.00..18.28 rows=450 width=0)
                                       Index Cond: (c = 1)
 Planning time: 0.495 ms
 Optimizer: Postgres query optimizer
(17 rows)

SELECT count(*) FROM bmscantest_aocs WHERE a = 1 AND (b = 1 OR c = 1) AND d = 1;
 count 
-------
    23
(1 row)

EXPLAIN SELECT count(*) FROM bmscantest_aocs WHERE a = 1 OR b = 1 OR c = 1;
                                                QUERY PLAN                                               
---------------------------------------------------------------------------------------------------------
 Aggregate  (cost=379.50..379.51 rows=1 width=8)
   ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=379.43..379.48 rows=1 width=8)
         ->  Aggregate  (cost=379.43..379.44 rows=1 width=8)
               ->  Bitmap Heap Scan on bmscantest_aocs  (cost=34.64..369.99 rows=1260 width=0)
                     Recheck Cond: ((a = 1) OR (b = 1) OR (c = 1))
                     ->  BitmapOr  (cost=34.64..34.64 rows=1283 width=0)
                           ->  Bitmap Index Scan on i_bmtest_aocs_a  (cost=0.00..7.37 rows=450 width=0)
                                 Index Cond: (a = 1)
                           ->  Bitmap Index Scan on i_bmtest_aocs_b  (cost=0.00..6.16 rows=385 width=0)
                                 Index Cond: (b = 1)
                           ->  Bitmap Index Scan on i_bmtest_aocs_c  (cost=0.00..18.28 rows=450 width=0)
                                 Index Cond: (c = 1)
 Planning time: 0.366 ms
 Optimizer: Postgres query optimizer
(14 rows)

SELECT count(*) FROM bmscantest_aocs WHERE a = 1 OR b = 1 OR c = 1;
 count 
-------
  2485
(1 row)

EXPLAIN SELECT count(*) FROM bmscantest_aocs WHERE a = 1 OR (b = 1 AND c = 1) OR d = 1;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=379.26..379.27 rows=1 width=8)
   ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=379.20..379.25 rows=1 width=8)
         ->  Aggregate  (cost=379.20..379.21 rows=1 width=8)
               ->  Bitmap Heap Scan on bmscantest_aocs  (cost=54.16..372.62 rows=878 width=0)
                     Recheck Cond: ((a = 1) OR ((b = 1) AND (c = 1)) OR (d = 1))
                     ->  BitmapOr  (cost=54.16..54.16 rows=841 width=0)
                           ->  Bitmap Index Scan on i_bmtest_aocs_a  (cost=0.00..9.05 rows=450 width=0)
                                 Index Cond: (a = 1)
                           ->  BitmapAnd  (cost=26.72..26.72 rows=8 width=0)
                                 ->  Bitmap Index Scan on i_bmtest_aocs_b  (cost=0.00..6.88 rows=385 width=0)
                                       Index Cond: (b = 1)
                                 ->  Bitmap Index Scan on i_bmtest_aocs_c  (cost=0.00..18.28 rows=450 width=0)
                                       Index Cond: (c = 1)
                           ->  Bitmap Index Scan on i_bmtest_aocs_d  (cost=0.00..16.82 rows=385 width=0)
                                 Index Cond: (d = 1)
 Planning time: 0.480 ms
 Optimizer: Postgres query optimizer
(17 rows)

SELECT count(*) FROM bmscantest_aocs WHERE a = 1 OR (b = 1 AND c = 1) OR d = 1;
 count 
-------
  2485
(1 row)

-- clean up
DROP TABLE bmscantest;
DROP TABLE bmscantest_ao;
DROP TABLE bmscantest_aocs;
