-- AO/AOCS
CREATE TABLE t_ao (a integer, b text) WITH (appendonly=true, orientation=column);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE t_ao_enc (a integer, b text ENCODING (compresstype=zlib,compresslevel=1,blocksize=32768)) WITH (appendonly=true, orientation=column);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE t_ao_a (LIKE t_ao INCLUDING ALL);
NOTICE:  table doesn't have 'DISTRIBUTED BY' clause, defaulting to distribution columns from LIKE table
CREATE TABLE t_ao_b (LIKE t_ao INCLUDING STORAGE);
NOTICE:  table doesn't have 'DISTRIBUTED BY' clause, defaulting to distribution columns from LIKE table
CREATE TABLE t_ao_c (LIKE t_ao); -- Should create a heap table
NOTICE:  table doesn't have 'DISTRIBUTED BY' clause, defaulting to distribution columns from LIKE table
CREATE TABLE t_ao_enc_a (LIKE t_ao_enc INCLUDING STORAGE);
NOTICE:  table doesn't have 'DISTRIBUTED BY' clause, defaulting to distribution columns from LIKE table
-- Verify gp_default_storage_options GUC doesn't get used
SET gp_default_storage_options = "appendonly=true, orientation=row";
CREATE TABLE t_ao_d (LIKE t_ao INCLUDING ALL);
RESET gp_default_storage_options;
-- Verify created tables and attributes
SELECT
	c.relname,
	c.relstorage,
	a.columnstore,
	a.compresstype,
	a.compresslevel
FROM
	pg_catalog.pg_class c
		LEFT OUTER JOIN pg_catalog.pg_appendonly a ON (c.oid = a.relid)
WHERE
	c.relname LIKE 't_ao%';
  relname   | relstorage | columnstore | compresstype | compresslevel 
------------+------------+-------------+--------------+---------------
 t_ao       | c          | t           |              |             0
 t_ao_enc   | c          | t           |              |             0
 t_ao_a     | c          | t           |              |             0
 t_ao_b     | c          | t           |              |             0
 t_ao_c     | h          |             |              |              
 t_ao_d     | c          | t           |              |             0
 t_ao_enc_a | c          | t           |              |             0
(7 rows)

SELECT
	c.relname,
	a.attnum,
	a.attoptions
FROM
	pg_catalog.pg_class c
		JOIN pg_catalog.pg_attribute_encoding a ON (a.attrelid = c.oid)
WHERE
	c.relname like 't_ao_enc%';
  relname   | attnum |                     attoptions                      
------------+--------+-----------------------------------------------------
 t_ao_enc   |      2 | {compresstype=zlib,compresslevel=1,blocksize=32768}
 t_ao_enc   |      1 | {compresstype=none,blocksize=32768,compresslevel=0}
 t_ao_enc_a |      2 | {compresstype=zlib,compresslevel=1,blocksize=32768}
 t_ao_enc_a |      1 | {compresstype=none,blocksize=32768,compresslevel=0}
(4 rows)

-- Verify that an external table can be dropped and then recreated in consecutive attempts
CREATE OR REPLACE FUNCTION drop_and_recreate_external_table()
	RETURNS void
	LANGUAGE plpgsql
	VOLATILE
AS $function$
DECLARE
BEGIN
DROP EXTERNAL TABLE IF EXISTS t_ext_r;
CREATE EXTERNAL TABLE t_ext_r (
	name varchar
)
LOCATION ('GPFDIST://127.0.0.1/tmp/dummy') ON ALL
FORMAT 'CSV' ( delimiter ' ' null '' escape '"' quote '"' )
ENCODING 'UTF8';
END;
$function$;
do $$
begin
  for i in 1..5 loop
	PERFORM drop_and_recreate_external_table();
  end loop;
end;
$$;
NOTICE:  table "t_ext_r" does not exist, skipping
CONTEXT:  SQL statement "DROP EXTERNAL TABLE IF EXISTS t_ext_r"
PL/pgSQL function drop_and_recreate_external_table() line 4 at SQL statement
SQL statement "SELECT drop_and_recreate_external_table()"
PL/pgSQL function inline_code_block line 4 at PERFORM
