-- More tests related to dispatching and QD->QE communication.
--
-- Test that error messages come out correctly, with non-default
-- client_encoding. (This test assumes that the regression database does
-- *not* use latin1, otherwise this doesn't test anything interesting.)
--
set client_encoding='utf8';
create function raise_notice(t text) returns void as $$
begin
  raise notice 'raise_notice called on "%"', t;
end;
$$ language plpgsql;
create function raise_error(t text) returns void as $$
begin
  raise 'raise_error called on "%"', t;
end;
$$ language plpgsql;
create table enctest(t text);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 't' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
-- Unicode code point 196 is "Latin Capital Letter a with Diaeresis".
insert into enctest values ('funny char ' || chr(196));
select raise_notice(t) from enctest;
NOTICE:  raise_notice called on "funny char Ã„"  (seg2 slice1 127.0.0.1:40002 pid=30772)
 raise_notice 
--------------
 
(1 row)

select raise_error(t) from enctest;
ERROR:  raise_error called on "funny char Ã„"  (seg2 slice1 127.0.0.1:40002 pid=30772)
-- now do it again with latin1
set client_encoding='latin1';
select raise_notice(t) from enctest;
NOTICE:  raise_notice called on "funny char Ä"  (seg2 slice1 127.0.0.1:40002 pid=30772)
 raise_notice 
--------------
 
(1 row)

select raise_error(t) from enctest;
ERROR:  raise_error called on "funny char Ä"  (seg2 slice1 127.0.0.1:40002 pid=30772)
