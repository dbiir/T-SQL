drop table if exists dqa_t1;
NOTICE:  table "dqa_t1" does not exist, skipping
drop table if exists dqa_t2;
NOTICE:  table "dqa_t2" does not exist, skipping
create table dqa_t1 (d int, i int, c char, dt date);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'd' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
create table dqa_t2 (d int, i int, c char, dt date);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'd' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into dqa_t1 select i%23, i%12, (i%10) || '', '2009-06-10'::date + ( (i%34) || ' days')::interval
from generate_series(0, 99) i;
insert into dqa_t2 select i%34, i%45, (i%10) || '', '2009-06-10'::date + ( (i%56) || ' days')::interval
from generate_series(0, 99) i;
set gp_eager_agg_distinct_pruning=on;
set enable_hashagg=on;
set enable_groupagg=off;
-- Also run EXPLAIN on each of these queries, to make sure you get an efficient plan,
-- and not e.g. a naive one that just pulls all the rows to the QD.
-- Distinct keys are distribution keys
select count(distinct d) from dqa_t1;
 count 
-------
    23
(1 row)

explain (costs off) select count(distinct d) from dqa_t1;
                   QUERY PLAN                   
------------------------------------------------
 Aggregate
   ->  Gather Motion 3:1  (slice1; segments: 3)
         ->  Aggregate
               ->  Seq Scan on dqa_t1
 Optimizer: Pivotal Optimizer (GPORCA) version 3.11.0
(5 rows)

select count(distinct d) from dqa_t1 group by i;
 count 
-------
     9
     8
     8
     9
     8
     8
     9
     8
     9
     8
     8
     8
(12 rows)

explain (costs off) select count(distinct d) from dqa_t1 group by i;
                            QUERY PLAN                            
------------------------------------------------------------------
 Gather Motion 3:1  (slice2; segments: 3)
   ->  Result
         ->  HashAggregate
               Group Key: i
               ->  Redistribute Motion 3:3  (slice1; segments: 3)
                     Hash Key: i
                     ->  Result
                           ->  GroupAggregate
                                 Group Key: i
                                 ->  Sort
                                       Sort Key: i, d
                                       ->  Seq Scan on dqa_t1
 Optimizer: Pivotal Optimizer (GPORCA) version 2.70.0
(13 rows)

select count(distinct d), count(distinct dt) from dqa_t1;
 count | count 
-------+-------
    23 |    34
(1 row)

explain (costs off) select count(distinct d), count(distinct dt) from dqa_t1;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Nested Loop
   ->  Aggregate
         ->  Gather Motion 3:1  (slice1; segments: 3)
               ->  HashAggregate
                     Group Key: share0_ref1.d
                     ->  Shared Scan (share slice:id 1:0)
                           ->  Materialize
                                 ->  Seq Scan on dqa_t1
   ->  Aggregate
         ->  Gather Motion 3:1  (slice3; segments: 3)
               ->  HashAggregate
                     Group Key: share0_ref2.dt
                     ->  Redistribute Motion 3:3  (slice2; segments: 3)
                           Hash Key: share0_ref2.dt
                           ->  HashAggregate
                                 Group Key: share0_ref2.dt
                                 ->  Shared Scan (share slice:id 2:0)
 Optimizer: Postgres query optimizer
(18 rows)

select count(distinct d), count(distinct c), count(distinct dt) from dqa_t1;
 count | count | count 
-------+-------+-------
    23 |    10 |    34
(1 row)

explain (costs off) select count(distinct d), count(distinct c), count(distinct dt) from dqa_t1;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Nested Loop
   ->  Nested Loop
         ->  Aggregate
               ->  Gather Motion 3:1  (slice2; segments: 3)
                     ->  HashAggregate
                           Group Key: share0_ref1.c
                           ->  Redistribute Motion 3:3  (slice1; segments: 3)
                                 Hash Key: share0_ref1.c
                                 ->  HashAggregate
                                       Group Key: share0_ref1.c
                                       ->  Shared Scan (share slice:id 1:0)
                                             ->  Materialize
                                                   ->  Seq Scan on dqa_t1
         ->  Aggregate
               ->  Gather Motion 3:1  (slice3; segments: 3)
                     ->  HashAggregate
                           Group Key: share0_ref2.d
                           ->  Shared Scan (share slice:id 3:0)
   ->  Aggregate
         ->  Gather Motion 3:1  (slice5; segments: 3)
               ->  HashAggregate
                     Group Key: share0_ref3.dt
                     ->  Redistribute Motion 3:3  (slice4; segments: 3)
                           Hash Key: share0_ref3.dt
                           ->  HashAggregate
                                 Group Key: share0_ref3.dt
                                 ->  Shared Scan (share slice:id 4:0)
 Optimizer: Postgres query optimizer
(28 rows)

select count(distinct d), count(distinct dt) from dqa_t1 group by c;
 count | count 
-------+-------
    10 |    10
    10 |    10
    10 |    10
    10 |    10
    10 |    10
    10 |    10
    10 |    10
    10 |    10
    10 |    10
    10 |    10
(10 rows)

explain (costs off) select count(distinct d), count(distinct dt) from dqa_t1 group by c;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Gather Motion 3:1  (slice3; segments: 3)
   ->  Hash Join
         Hash Cond: (NOT (share0_ref2.c IS DISTINCT FROM share0_ref1.c))
         ->  HashAggregate
               Group Key: share0_ref2.c
               ->  HashAggregate
                     Group Key: share0_ref2.c, share0_ref2.d
                     ->  Redistribute Motion 3:3  (slice1; segments: 3)
                           Hash Key: share0_ref2.c
                           ->  HashAggregate
                                 Group Key: share0_ref2.c, share0_ref2.d
                                 ->  Shared Scan (share slice:id 1:0)
         ->  Hash
               ->  HashAggregate
                     Group Key: share0_ref1.c
                     ->  HashAggregate
                           Group Key: share0_ref1.c, share0_ref1.dt
                           ->  Redistribute Motion 3:3  (slice2; segments: 3)
                                 Hash Key: share0_ref1.c
                                 ->  HashAggregate
                                       Group Key: share0_ref1.c, share0_ref1.dt
                                       ->  Shared Scan (share slice:id 2:0)
                                             ->  Materialize
                                                   ->  Seq Scan on dqa_t1
 Optimizer: Postgres query optimizer
(25 rows)

select count(distinct d), count(distinct dt) from dqa_t1 group by d;
 count | count 
-------+-------
     1 |     5
     1 |     4
     1 |     4
     1 |     4
     1 |     4
     1 |     5
     1 |     4
     1 |     4
     1 |     4
     1 |     5
     1 |     5
     1 |     4
     1 |     5
     1 |     4
     1 |     4
     1 |     4
     1 |     5
     1 |     4
     1 |     5
     1 |     4
     1 |     4
     1 |     4
     1 |     5
(23 rows)

explain (costs off) select count(distinct d), count(distinct dt) from dqa_t1 group by d;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  Hash Join
         Hash Cond: (NOT (share0_ref2.d IS DISTINCT FROM share0_ref1.d))
         ->  HashAggregate
               Group Key: share0_ref2.d
               ->  HashAggregate
                     Group Key: share0_ref2.d, share0_ref2.d
                     ->  HashAggregate
                           Group Key: share0_ref2.d, share0_ref2.d
                           ->  Shared Scan (share slice:id 1:0)
         ->  Hash
               ->  HashAggregate
                     Group Key: share0_ref1.d
                     ->  HashAggregate
                           Group Key: share0_ref1.d, share0_ref1.dt
                           ->  HashAggregate
                                 Group Key: share0_ref1.d, share0_ref1.dt
                                 ->  Shared Scan (share slice:id 1:0)
                                       ->  Materialize
                                             ->  Seq Scan on dqa_t1
 Optimizer: Postgres query optimizer
(21 rows)

select count(distinct dqa_t1.d) from dqa_t1, dqa_t2 where dqa_t1.d = dqa_t2.d;
 count 
-------
    23
(1 row)

explain (costs off) select count(distinct dqa_t1.d) from dqa_t1, dqa_t2 where dqa_t1.d = dqa_t2.d;
                   QUERY PLAN                   
------------------------------------------------
 Aggregate
   ->  Gather Motion 3:1  (slice1; segments: 3)
         ->  Aggregate
               ->  Hash Join
                     Hash Cond: (dqa_t1.d = dqa_t2.d)
                     ->  Seq Scan on dqa_t1
                     ->  Hash
                           ->  Seq Scan on dqa_t2
 Optimizer: Pivotal Optimizer (GPORCA) version 3.11.0
(9 rows)

select count(distinct dqa_t1.d) from dqa_t1, dqa_t2 where dqa_t1.d = dqa_t2.d group by dqa_t2.dt;
 count 
-------
     1
     2
     1
     1
     1
     1
     1
     2
     1
     2
     2
     1
     2
     1
     1
     1
     1
     2
     2
     1
     2
     1
     1
     1
     1
     1
     1
     1
     1
     1
     2
     1
     1
     1
     1
     1
     1
     1
     1
     1
     2
     1
     2
     2
     1
     1
     1
     1
     2
     1
     1
     1
     1
     1
     1
     1
(56 rows)

explain (costs off) select count(distinct dqa_t1.d) from dqa_t1, dqa_t2 where dqa_t1.d = dqa_t2.d group by dqa_t2.dt;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Gather Motion 3:1  (slice2; segments: 3)
   ->  Result
         ->  GroupAggregate
               Group Key: dqa_t2.dt
               ->  Sort
                     Sort Key: dqa_t2.dt
                     ->  Redistribute Motion 3:3  (slice1; segments: 3)
                           Hash Key: dqa_t2.dt
                           ->  Hash Join
                                 Hash Cond: (dqa_t2.d = dqa_t1.d)
                                 ->  Seq Scan on dqa_t2
                                 ->  Hash
                                       ->  Seq Scan on dqa_t1
 Optimizer: Pivotal Optimizer (GPORCA) version 3.64.0
(14 rows)

-- Distinct keys are not distribution keys
select count(distinct c) from dqa_t1;
 count 
-------
    10
(1 row)

explain (costs off) select count(distinct c) from dqa_t1;
                            QUERY PLAN                            
------------------------------------------------------------------
 Aggregate
   ->  Gather Motion 3:1  (slice2; segments: 3)
         ->  Aggregate
               ->  Redistribute Motion 3:3  (slice1; segments: 3)
                     Hash Key: c
                     ->  Seq Scan on dqa_t1
 Optimizer: Pivotal Optimizer (GPORCA) version 3.64.0
(7 rows)

select count(distinct c) from dqa_t1 group by dt;
 count 
-------
     3
     3
     3
     3
     3
     3
     3
     3
     3
     3
     3
     3
     3
     3
     3
     3
     2
     3
     3
     3
     3
     3
     3
     3
     3
     3
     3
     3
     3
     3
     3
     3
     3
     2
(34 rows)

explain (costs off) select count(distinct c) from dqa_t1 group by dt;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Gather Motion 3:1  (slice2; segments: 3)
   ->  Result
         ->  GroupAggregate
               Group Key: dt
               ->  Sort
                     Sort Key: dt
                     ->  Redistribute Motion 3:3  (slice1; segments: 3)
                           Hash Key: dt
                           ->  Seq Scan on dqa_t1
 Optimizer: Pivotal Optimizer (GPORCA) version 3.64.0
(10 rows)

select count(distinct c) from dqa_t1 group by d;
 count 
-------
     5
     4
     4
     4
     5
     5
     4
     4
     4
     5
     4
     4
     5
     4
     4
     5
     4
     4
     4
     5
     4
     4
     5
(23 rows)

explain (costs off) select count(distinct c) from dqa_t1 group by d;
                      QUERY PLAN                      
------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  Result
         ->  GroupAggregate
               Group Key: d
               ->  Sort
                     Sort Key: d
                     ->  Seq Scan on dqa_t1
 Optimizer: Pivotal Optimizer (GPORCA) version 3.42.0
(8 rows)

select count(distinct c), count(distinct dt) from dqa_t1;
 count | count 
-------+-------
    10 |    34
(1 row)

explain (costs off) select count(distinct c), count(distinct dt) from dqa_t1;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Nested Loop
   ->  Aggregate
         ->  Gather Motion 3:1  (slice2; segments: 3)
               ->  HashAggregate
                     Group Key: share0_ref1.c
                     ->  Redistribute Motion 3:3  (slice1; segments: 3)
                           Hash Key: share0_ref1.c
                           ->  HashAggregate
                                 Group Key: share0_ref1.c
                                 ->  Shared Scan (share slice:id 1:0)
                                       ->  Materialize
                                             ->  Seq Scan on dqa_t1
   ->  Aggregate
         ->  Gather Motion 3:1  (slice4; segments: 3)
               ->  HashAggregate
                     Group Key: share0_ref2.dt
                     ->  Redistribute Motion 3:3  (slice3; segments: 3)
                           Hash Key: share0_ref2.dt
                           ->  HashAggregate
                                 Group Key: share0_ref2.dt
                                 ->  Shared Scan (share slice:id 3:0)
 Optimizer: Postgres query optimizer
(22 rows)

select count(distinct c), count(distinct dt), i from dqa_t1 group by i;
 count | count | i  
-------+-------+----
     5 |     9 |  3
     5 |     8 | 11
     5 |     8 |  5
     5 |     8 |  9
     5 |     9 |  1
     5 |     8 |  7
     5 |     9 |  2
     5 |     8 |  6
     5 |     9 |  0
     5 |     8 |  8
     5 |     8 | 10
     5 |     8 |  4
(12 rows)

explain (costs off) select count(distinct c), count(distinct dt), i from dqa_t1 group by i;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Gather Motion 3:1  (slice3; segments: 3)
   ->  Hash Join
         Hash Cond: (NOT (share0_ref2.i IS DISTINCT FROM share0_ref1.i))
         ->  HashAggregate
               Group Key: share0_ref2.i
               ->  HashAggregate
                     Group Key: share0_ref2.i, share0_ref2.c
                     ->  Redistribute Motion 3:3  (slice1; segments: 3)
                           Hash Key: share0_ref2.i
                           ->  HashAggregate
                                 Group Key: share0_ref2.i, share0_ref2.c
                                 ->  Shared Scan (share slice:id 1:0)
         ->  Hash
               ->  HashAggregate
                     Group Key: share0_ref1.i
                     ->  HashAggregate
                           Group Key: share0_ref1.i, share0_ref1.dt
                           ->  Redistribute Motion 3:3  (slice2; segments: 3)
                                 Hash Key: share0_ref1.i
                                 ->  HashAggregate
                                       Group Key: share0_ref1.i, share0_ref1.dt
                                       ->  Shared Scan (share slice:id 2:0)
                                             ->  Materialize
                                                   ->  Seq Scan on dqa_t1
 Optimizer: Postgres query optimizer
(25 rows)

select count(distinct i), count(distinct c), d from dqa_t1 group by d;
 count | count | d  
-------+-------+----
     5 |     5 |  3
     4 |     4 | 21
     4 |     4 | 19
     4 |     4 | 11
     4 |     4 | 13
     5 |     5 |  5
     4 |     4 | 15
     4 |     4 |  9
     4 |     4 | 17
     5 |     5 |  1
     5 |     5 |  7
     4 |     4 | 20
     5 |     5 |  2
     4 |     4 | 14
     4 |     4 | 12
     4 |     4 | 18
     5 |     5 |  6
     4 |     4 | 22
     5 |     5 |  0
     4 |     4 | 16
     4 |     4 |  8
     4 |     4 | 10
     5 |     5 |  4
(23 rows)

explain (costs off) select count(distinct i), count(distinct c), d from dqa_t1 group by d;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  Hash Join
         Hash Cond: (NOT (share0_ref2.d IS DISTINCT FROM share0_ref1.d))
         ->  HashAggregate
               Group Key: share0_ref2.d
               ->  HashAggregate
                     Group Key: share0_ref2.d, share0_ref2.i
                     ->  HashAggregate
                           Group Key: share0_ref2.d, share0_ref2.i
                           ->  Shared Scan (share slice:id 1:0)
         ->  Hash
               ->  HashAggregate
                     Group Key: share0_ref1.d
                     ->  HashAggregate
                           Group Key: share0_ref1.d, share0_ref1.c
                           ->  HashAggregate
                                 Group Key: share0_ref1.d, share0_ref1.c
                                 ->  Shared Scan (share slice:id 1:0)
                                       ->  Materialize
                                             ->  Seq Scan on dqa_t1
 Optimizer: Postgres query optimizer
(21 rows)

select count(distinct dqa_t1.dt) from dqa_t1, dqa_t2 where dqa_t1.c = dqa_t2.c;
 count 
-------
    34
(1 row)

explain (costs off) select count(distinct dqa_t1.dt) from dqa_t1, dqa_t2 where dqa_t1.c = dqa_t2.c;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Aggregate
   ->  Gather Motion 3:1  (slice4; segments: 3)
         ->  Aggregate
               ->  Redistribute Motion 3:3  (slice3; segments: 3)
                     Hash Key: dqa_t1.dt
                     ->  Hash Join
                           Hash Cond: (dqa_t1.c = dqa_t2.c)
                           ->  Redistribute Motion 3:3  (slice1; segments: 3)
                                 Hash Key: dqa_t1.c
                                 ->  Seq Scan on dqa_t1
                           ->  Hash
                                 ->  Redistribute Motion 3:3  (slice2; segments: 3)
                                       Hash Key: dqa_t2.c
                                       ->  Seq Scan on dqa_t2
 Optimizer: Pivotal Optimizer (GPORCA) version 3.64.0
(15 rows)

select count(distinct dqa_t1.dt) from dqa_t1, dqa_t2 where dqa_t1.c = dqa_t2.c group by dqa_t2.dt;
 count 
-------
    10
    13
    13
    14
    14
    13
    14
    10
    10
    13
    13
    10
    14
    13
    13
    14
    10
    13
    13
    13
    13
    13
    14
    14
    10
    14
    14
    14
    13
    14
    13
    14
    14
    13
    10
    13
    14
    13
    13
    10
    13
    14
    13
    10
    13
    14
    14
    10
    14
    13
    13
    10
    10
    13
    14
    14
(56 rows)

explain (costs off) select count(distinct dqa_t1.dt) from dqa_t1, dqa_t2 where dqa_t1.c = dqa_t2.c group by dqa_t2.dt;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice4; segments: 3)
   ->  Result
         ->  GroupAggregate
               Group Key: dqa_t2.dt
               ->  Sort
                     Sort Key: dqa_t2.dt
                     ->  Redistribute Motion 3:3  (slice3; segments: 3)
                           Hash Key: dqa_t2.dt
                           ->  Hash Join
                                 Hash Cond: (dqa_t1.c = dqa_t2.c)
                                 ->  Redistribute Motion 3:3  (slice1; segments: 3)
                                       Hash Key: dqa_t1.c
                                       ->  Seq Scan on dqa_t1
                                 ->  Hash
                                       ->  Redistribute Motion 3:3  (slice2; segments: 3)
                                             Hash Key: dqa_t2.c
                                             ->  Seq Scan on dqa_t2
 Optimizer: Pivotal Optimizer (GPORCA) version 3.64.0
(18 rows)

-- MPP-19037
drop table if exists fact_route_aggregation;
NOTICE:  table "fact_route_aggregation" does not exist, skipping
drop table if exists dim_devices;
NOTICE:  table "dim_devices" does not exist, skipping
CREATE TABLE fact_route_aggregation
(      
    device_id integer,
    is_route integer ,   
    is_pedestrian integer,
    user_id integer,
    pedestrian_route_length_in_meters integer,
    in_car_route_length_in_meters integer 
) DISTRIBUTED BY (device_id);
insert into fact_route_aggregation select generate_series(1,700),generate_series(200,300),generate_series(300,400), generate_series(400,500),generate_series(500,600),generate_series(600,700);
CREATE TABLE dim_devices
(      
    device_id integer,
    platform integer
) DISTRIBUTED BY (device_id);
-- Repro query from the JIRA
select  distinct 
count(distinct case  when T218094.is_route >= 1 or T218094.is_pedestrian >= 1 then T218094.user_id else NULL end ) as c1,
     sum(cast(T218094.is_route + T218094.is_pedestrian as  DOUBLE PRECISION  )) as c2,
     sum(cast(T218094.is_pedestrian as  DOUBLE PRECISION  )) as c3,
     count(distinct case  when T218094.is_pedestrian >= 1 then T218094.user_id else NULL end ) as c4,
     sum(T218094.pedestrian_route_length_in_meters / 1000.0) as c5,
     sum(T218094.in_car_route_length_in_meters / 1000.0) as c6,
     sum(cast(T218094.is_route as  DOUBLE PRECISION  )) as c7,
     count(distinct case  when T218094.is_route >= 1 then T218094.user_id else NULL end ) as c8,
     T43883.platform as c9
from 
     dim_devices T43883,
     fact_route_aggregation T218094
where  ( T43883.device_id = T218094.device_id ) 
group by T43883.platform;
 c1 | c2 | c3 | c4 | c5 | c6 | c7 | c8 | c9 
----+----+----+----+----+----+----+----+----
(0 rows)

-- cleanup
drop table fact_route_aggreagation;
ERROR:  table "fact_route_aggreagation" does not exist
drop table dim_devices;
-- other test queries for mpp-19037
drop table if exists t1_mdqa;
NOTICE:  table "t1_mdqa" does not exist, skipping
drop table if exists t2_mdqa;
NOTICE:  table "t2_mdqa" does not exist, skipping
create table t1_mdqa(a int, b int, c varchar);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
create table t2_mdqa(a int, b int, c varchar);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into t1_mdqa select i % 5 , i % 10, i || 'value' from generate_series(1, 20) i;
insert into t1_mdqa select i % 5 , i % 10, i || 'value' from generate_series(1, 20) i;
insert into t2_mdqa select i % 10 , i % 5, i || 'value' from generate_series(1, 20) i;
insert into t2_mdqa select i % 10 , i % 5, i || 'value' from generate_series(1, 20) i;
-- simple mdqa
select count(distinct t1.a), count(distinct t2.b), t1.c, t2.c from t1_mdqa t1, t2_mdqa t2 where t1.c = t2.c group by t1.c, t2.c order by t1.c;
 count | count |    c    |    c    
-------+-------+---------+---------
     1 |     1 | 10value | 10value
     1 |     1 | 11value | 11value
     1 |     1 | 12value | 12value
     1 |     1 | 13value | 13value
     1 |     1 | 14value | 14value
     1 |     1 | 15value | 15value
     1 |     1 | 16value | 16value
     1 |     1 | 17value | 17value
     1 |     1 | 18value | 18value
     1 |     1 | 19value | 19value
     1 |     1 | 1value  | 1value
     1 |     1 | 20value | 20value
     1 |     1 | 2value  | 2value
     1 |     1 | 3value  | 3value
     1 |     1 | 4value  | 4value
     1 |     1 | 5value  | 5value
     1 |     1 | 6value  | 6value
     1 |     1 | 7value  | 7value
     1 |     1 | 8value  | 8value
     1 |     1 | 9value  | 9value
(20 rows)

-- distinct on top of some mdqas
select distinct sum(distinct t1.a), avg(t2.a), sum(distinct t2.b), t1.a, t2.b from t1_mdqa t1, t2_mdqa t2 where t1.a = t2.a group by t1.a, t2.b order by t1.a;
 sum |          avg           | sum | a | b 
-----+------------------------+-----+---+---
   0 | 0.00000000000000000000 |   0 | 0 | 0
   1 | 1.00000000000000000000 |   1 | 1 | 1
   2 |     2.0000000000000000 |   2 | 2 | 2
   3 |     3.0000000000000000 |   3 | 3 | 3
   4 |     4.0000000000000000 |   4 | 4 | 4
(5 rows)

select distinct sum (distinct t1.a), avg(distinct t2.a), sum(distinct t2.b), t1.c from t1_mdqa t1, t2_mdqa t2 where t1.a = t2.a group by t1.c order by t1.c;
 sum |          avg           | sum |    c    
-----+------------------------+-----+---------
   0 | 0.00000000000000000000 |   0 | 10value
   1 | 1.00000000000000000000 |   1 | 11value
   2 |     2.0000000000000000 |   2 | 12value
   3 |     3.0000000000000000 |   3 | 13value
   4 |     4.0000000000000000 |   4 | 14value
   0 | 0.00000000000000000000 |   0 | 15value
   1 | 1.00000000000000000000 |   1 | 16value
   2 |     2.0000000000000000 |   2 | 17value
   3 |     3.0000000000000000 |   3 | 18value
   4 |     4.0000000000000000 |   4 | 19value
   1 | 1.00000000000000000000 |   1 | 1value
   0 | 0.00000000000000000000 |   0 | 20value
   2 |     2.0000000000000000 |   2 | 2value
   3 |     3.0000000000000000 |   3 | 3value
   4 |     4.0000000000000000 |   4 | 4value
   0 | 0.00000000000000000000 |   0 | 5value
   1 | 1.00000000000000000000 |   1 | 6value
   2 |     2.0000000000000000 |   2 | 7value
   3 |     3.0000000000000000 |   3 | 8value
   4 |     4.0000000000000000 |   4 | 9value
(20 rows)

-- distinct on group by fields
select distinct t1.c , sum(distinct t1.a), count(t2.b), sum(distinct t2.b) from t1_mdqa t1, t2_mdqa t2 where t1.a = t2.a group by t1.c order by t1.c;
    c    | sum | count | sum 
---------+-----+-------+-----
 10value |   0 |     8 |   0
 11value |   1 |     8 |   1
 12value |   2 |     8 |   2
 13value |   3 |     8 |   3
 14value |   4 |     8 |   4
 15value |   0 |     8 |   0
 16value |   1 |     8 |   1
 17value |   2 |     8 |   2
 18value |   3 |     8 |   3
 19value |   4 |     8 |   4
 1value  |   1 |     8 |   1
 20value |   0 |     8 |   0
 2value  |   2 |     8 |   2
 3value  |   3 |     8 |   3
 4value  |   4 |     8 |   4
 5value  |   0 |     8 |   0
 6value  |   1 |     8 |   1
 7value  |   2 |     8 |   2
 8value  |   3 |     8 |   3
 9value  |   4 |     8 |   4
(20 rows)

-- distinct on normal aggregates
select distinct sum(t1.a), avg(distinct t2.a), sum(distinct (t1.a + t2.a)), t1.a, t2.b from t1_mdqa t1, t2_mdqa t2 where t1.a = t2.a group by t1.a, t2.b order by t1.a;
 sum |          avg           | sum | a | b 
-----+------------------------+-----+---+---
   0 | 0.00000000000000000000 |   0 | 0 | 0
  32 | 1.00000000000000000000 |   2 | 1 | 1
  64 |     2.0000000000000000 |   4 | 2 | 2
  96 |     3.0000000000000000 |   6 | 3 | 3
 128 |     4.0000000000000000 |   8 | 4 | 4
(5 rows)

select distinct avg(t1.a + t2.b), count(distinct t1.c), count(distinct char_length(t1.c)), t1.a, t2.b from t1_mdqa t1, t2_mdqa t2 where t1.a = t2.a group by t1.a, t2.b order by t1.a;
          avg           | count | count | a | b 
------------------------+-------+-------+---+---
 0.00000000000000000000 |     4 |     2 | 0 | 0
     2.0000000000000000 |     4 |     2 | 1 | 1
     4.0000000000000000 |     4 |     2 | 2 | 2
     6.0000000000000000 |     4 |     2 | 3 | 3
     8.0000000000000000 |     4 |     2 | 4 | 4
(5 rows)

-- cleanup
drop table t1_mdqa;
drop table t2_mdqa;
-- other queries from MPP-19037
drop table if exists gp_dqa_r;
NOTICE:  table "gp_dqa_r" does not exist, skipping
drop table if exists gp_dqa_s;
NOTICE:  table "gp_dqa_s" does not exist, skipping
create table gp_dqa_r (a int, b int, c int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
create table gp_dqa_s (d int, e int, f int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'd' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into gp_dqa_r  select i , i %10, i%5 from generate_series(1,20) i;
insert into gp_dqa_s select i, i %15, i%10 from generate_series(1,30) i;
select a, d, count(distinct b) as c1, count(distinct c) as c2 from gp_dqa_r, gp_dqa_s where ( e = a ) group by d, a order by a,d;
 a  | d  | c1 | c2 
----+----+----+----
  1 |  1 |  1 |  1
  1 | 16 |  1 |  1
  2 |  2 |  1 |  1
  2 | 17 |  1 |  1
  3 |  3 |  1 |  1
  3 | 18 |  1 |  1
  4 |  4 |  1 |  1
  4 | 19 |  1 |  1
  5 |  5 |  1 |  1
  5 | 20 |  1 |  1
  6 |  6 |  1 |  1
  6 | 21 |  1 |  1
  7 |  7 |  1 |  1
  7 | 22 |  1 |  1
  8 |  8 |  1 |  1
  8 | 23 |  1 |  1
  9 |  9 |  1 |  1
  9 | 24 |  1 |  1
 10 | 10 |  1 |  1
 10 | 25 |  1 |  1
 11 | 11 |  1 |  1
 11 | 26 |  1 |  1
 12 | 12 |  1 |  1
 12 | 27 |  1 |  1
 13 | 13 |  1 |  1
 13 | 28 |  1 |  1
 14 | 14 |  1 |  1
 14 | 29 |  1 |  1
(28 rows)

select distinct 
count(distinct case when b >= 1 or c >= 1 then b else NULL end ) as c1,
sum(cast(b + c as DOUBLE PRECISION )) as c2,
sum(cast(c as DOUBLE PRECISION )) as c3,
count(distinct case when b >= 1 then b else NULL end ) as c2,
d as c9
from gp_dqa_r, gp_dqa_s
where ( e = a ) 
group by d order by c9;
 c1 | c2 | c3 | c2 | c9 
----+----+----+----+----
  1 |  2 |  1 |  1 |  1
  1 |  4 |  2 |  1 |  2
  1 |  6 |  3 |  1 |  3
  1 |  8 |  4 |  1 |  4
  1 |  5 |  0 |  1 |  5
  1 |  7 |  1 |  1 |  6
  1 |  9 |  2 |  1 |  7
  1 | 11 |  3 |  1 |  8
  1 | 13 |  4 |  1 |  9
  0 |  0 |  0 |  0 | 10
  1 |  2 |  1 |  1 | 11
  1 |  4 |  2 |  1 | 12
  1 |  6 |  3 |  1 | 13
  1 |  8 |  4 |  1 | 14
  1 |  2 |  1 |  1 | 16
  1 |  4 |  2 |  1 | 17
  1 |  6 |  3 |  1 | 18
  1 |  8 |  4 |  1 | 19
  1 |  5 |  0 |  1 | 20
  1 |  7 |  1 |  1 | 21
  1 |  9 |  2 |  1 | 22
  1 | 11 |  3 |  1 | 23
  1 | 13 |  4 |  1 | 24
  0 |  0 |  0 |  0 | 25
  1 |  2 |  1 |  1 | 26
  1 |  4 |  2 |  1 | 27
  1 |  6 |  3 |  1 | 28
  1 |  8 |  4 |  1 | 29
(28 rows)

select distinct 
count(distinct case when b >= 1 or c >= 1 then b else NULL end ) as c1,
count(distinct case when b >= 1 then b else NULL end ) as c2,
d as c9
from gp_dqa_r, gp_dqa_s
where ( e = a ) 
group by d order by c9;
 c1 | c2 | c9 
----+----+----
  1 |  1 |  1
  1 |  1 |  2
  1 |  1 |  3
  1 |  1 |  4
  1 |  1 |  5
  1 |  1 |  6
  1 |  1 |  7
  1 |  1 |  8
  1 |  1 |  9
  0 |  0 | 10
  1 |  1 | 11
  1 |  1 | 12
  1 |  1 | 13
  1 |  1 | 14
  1 |  1 | 16
  1 |  1 | 17
  1 |  1 | 18
  1 |  1 | 19
  1 |  1 | 20
  1 |  1 | 21
  1 |  1 | 22
  1 |  1 | 23
  1 |  1 | 24
  0 |  0 | 25
  1 |  1 | 26
  1 |  1 | 27
  1 |  1 | 28
  1 |  1 | 29
(28 rows)

select distinct count(distinct b) as c1, count(distinct c) as c2, d as c9
from gp_dqa_r, gp_dqa_s
where ( e = a ) 
group by d order by c9;
 c1 | c2 | c9 
----+----+----
  1 |  1 |  1
  1 |  1 |  2
  1 |  1 |  3
  1 |  1 |  4
  1 |  1 |  5
  1 |  1 |  6
  1 |  1 |  7
  1 |  1 |  8
  1 |  1 |  9
  1 |  1 | 10
  1 |  1 | 11
  1 |  1 | 12
  1 |  1 | 13
  1 |  1 | 14
  1 |  1 | 16
  1 |  1 | 17
  1 |  1 | 18
  1 |  1 | 19
  1 |  1 | 20
  1 |  1 | 21
  1 |  1 | 22
  1 |  1 | 23
  1 |  1 | 24
  1 |  1 | 25
  1 |  1 | 26
  1 |  1 | 27
  1 |  1 | 28
  1 |  1 | 29
(28 rows)

select distinct d, count(distinct b) as c1, count(distinct c) as c2, d as c9 from gp_dqa_r, gp_dqa_s group by d order by c9;
 d  | c1 | c2 | c9 
----+----+----+----
  1 | 10 |  5 |  1
  2 | 10 |  5 |  2
  3 | 10 |  5 |  3
  4 | 10 |  5 |  4
  5 | 10 |  5 |  5
  6 | 10 |  5 |  6
  7 | 10 |  5 |  7
  8 | 10 |  5 |  8
  9 | 10 |  5 |  9
 10 | 10 |  5 | 10
 11 | 10 |  5 | 11
 12 | 10 |  5 | 12
 13 | 10 |  5 | 13
 14 | 10 |  5 | 14
 15 | 10 |  5 | 15
 16 | 10 |  5 | 16
 17 | 10 |  5 | 17
 18 | 10 |  5 | 18
 19 | 10 |  5 | 19
 20 | 10 |  5 | 20
 21 | 10 |  5 | 21
 22 | 10 |  5 | 22
 23 | 10 |  5 | 23
 24 | 10 |  5 | 24
 25 | 10 |  5 | 25
 26 | 10 |  5 | 26
 27 | 10 |  5 | 27
 28 | 10 |  5 | 28
 29 | 10 |  5 | 29
 30 | 10 |  5 | 30
(30 rows)

select distinct d, count(distinct b) as c1, count(distinct c) as c2, d as c9 from gp_dqa_r, gp_dqa_s group by d, a order by c9;
 d  | c1 | c2 | c9 
----+----+----+----
  1 |  1 |  1 |  1
  2 |  1 |  1 |  2
  3 |  1 |  1 |  3
  4 |  1 |  1 |  4
  5 |  1 |  1 |  5
  6 |  1 |  1 |  6
  7 |  1 |  1 |  7
  8 |  1 |  1 |  8
  9 |  1 |  1 |  9
 10 |  1 |  1 | 10
 11 |  1 |  1 | 11
 12 |  1 |  1 | 12
 13 |  1 |  1 | 13
 14 |  1 |  1 | 14
 15 |  1 |  1 | 15
 16 |  1 |  1 | 16
 17 |  1 |  1 | 17
 18 |  1 |  1 | 18
 19 |  1 |  1 | 19
 20 |  1 |  1 | 20
 21 |  1 |  1 | 21
 22 |  1 |  1 | 22
 23 |  1 |  1 | 23
 24 |  1 |  1 | 24
 25 |  1 |  1 | 25
 26 |  1 |  1 | 26
 27 |  1 |  1 | 27
 28 |  1 |  1 | 28
 29 |  1 |  1 | 29
 30 |  1 |  1 | 30
(30 rows)

select distinct count(distinct b) as c1, count(distinct c) as c2 from gp_dqa_r, gp_dqa_s;
 c1 | c2 
----+----
 10 |  5
(1 row)

select distinct count(distinct b) as c1, count(distinct c) as c2 from gp_dqa_r;
 c1 | c2 
----+----
 10 |  5
(1 row)

select distinct count(distinct b) as c1, count(distinct c) as c2, d, a from gp_dqa_r, gp_dqa_s where ( e = a)group by d, a order by a,d;
 c1 | c2 | d  | a  
----+----+----+----
  1 |  1 |  1 |  1
  1 |  1 | 16 |  1
  1 |  1 |  2 |  2
  1 |  1 | 17 |  2
  1 |  1 |  3 |  3
  1 |  1 | 18 |  3
  1 |  1 |  4 |  4
  1 |  1 | 19 |  4
  1 |  1 |  5 |  5
  1 |  1 | 20 |  5
  1 |  1 |  6 |  6
  1 |  1 | 21 |  6
  1 |  1 |  7 |  7
  1 |  1 | 22 |  7
  1 |  1 |  8 |  8
  1 |  1 | 23 |  8
  1 |  1 |  9 |  9
  1 |  1 | 24 |  9
  1 |  1 | 10 | 10
  1 |  1 | 25 | 10
  1 |  1 | 11 | 11
  1 |  1 | 26 | 11
  1 |  1 | 12 | 12
  1 |  1 | 27 | 12
  1 |  1 | 13 | 13
  1 |  1 | 28 | 13
  1 |  1 | 14 | 14
  1 |  1 | 29 | 14
(28 rows)

select distinct count(distinct b) as c1, count(distinct c) as c2, d from gp_dqa_r, gp_dqa_s group by d, a order by d,a;
ERROR:  for SELECT DISTINCT, ORDER BY expressions must appear in select list
LINE 1: ...as c2, d from gp_dqa_r, gp_dqa_s group by d, a order by d,a;
                                                                     ^
select distinct count(distinct b) as c1, count(distinct c) as c2, d from gp_dqa_r, gp_dqa_s group by d, a order by d;
 c1 | c2 | d  
----+----+----
  1 |  1 |  1
  1 |  1 |  2
  1 |  1 |  3
  1 |  1 |  4
  1 |  1 |  5
  1 |  1 |  6
  1 |  1 |  7
  1 |  1 |  8
  1 |  1 |  9
  1 |  1 | 10
  1 |  1 | 11
  1 |  1 | 12
  1 |  1 | 13
  1 |  1 | 14
  1 |  1 | 15
  1 |  1 | 16
  1 |  1 | 17
  1 |  1 | 18
  1 |  1 | 19
  1 |  1 | 20
  1 |  1 | 21
  1 |  1 | 22
  1 |  1 | 23
  1 |  1 | 24
  1 |  1 | 25
  1 |  1 | 26
  1 |  1 | 27
  1 |  1 | 28
  1 |  1 | 29
  1 |  1 | 30
(30 rows)

select distinct count(distinct b) as c1, count(distinct c) as c2, d from gp_dqa_r, gp_dqa_s group by d order by d;
 c1 | c2 | d  
----+----+----
 10 |  5 |  1
 10 |  5 |  2
 10 |  5 |  3
 10 |  5 |  4
 10 |  5 |  5
 10 |  5 |  6
 10 |  5 |  7
 10 |  5 |  8
 10 |  5 |  9
 10 |  5 | 10
 10 |  5 | 11
 10 |  5 | 12
 10 |  5 | 13
 10 |  5 | 14
 10 |  5 | 15
 10 |  5 | 16
 10 |  5 | 17
 10 |  5 | 18
 10 |  5 | 19
 10 |  5 | 20
 10 |  5 | 21
 10 |  5 | 22
 10 |  5 | 23
 10 |  5 | 24
 10 |  5 | 25
 10 |  5 | 26
 10 |  5 | 27
 10 |  5 | 28
 10 |  5 | 29
 10 |  5 | 30
(30 rows)

-- cleanup
drop table gp_dqa_r;
drop table gp_dqa_s;
-- setup
drop table if exists gp_dqa_t1;
NOTICE:  table "gp_dqa_t1" does not exist, skipping
drop table if exists gp_dqa_t2;
NOTICE:  table "gp_dqa_t2" does not exist, skipping
create table gp_dqa_t1 (a int, b int) distributed by (a);
create table gp_dqa_t2 (a int, c int) distributed by (a);
insert into gp_dqa_t1 select i , i %5 from generate_series(1,10) i;
insert into gp_dqa_t2 select i , i %4 from generate_series(1,10) i;
select distinct A.a, sum(distinct A.b), count(distinct B.c) from gp_dqa_t1 A left join gp_dqa_t2 B on (A.a = B.a) group by A.a order by A.a;
 a  | sum | count 
----+-----+-------
  1 |   1 |     1
  2 |   2 |     1
  3 |   3 |     1
  4 |   4 |     1
  5 |   0 |     1
  6 |   1 |     1
  7 |   2 |     1
  8 |   3 |     1
  9 |   4 |     1
 10 |   0 |     1
(10 rows)

select distinct A.a, sum(distinct A.b), count(distinct B.c) from gp_dqa_t1 A right join gp_dqa_t2 B on (A.a = B.a) group by A.a order by A.a;
 a  | sum | count 
----+-----+-------
  1 |   1 |     1
  2 |   2 |     1
  3 |   3 |     1
  4 |   4 |     1
  5 |   0 |     1
  6 |   1 |     1
  7 |   2 |     1
  8 |   3 |     1
  9 |   4 |     1
 10 |   0 |     1
(10 rows)

-- Most of the above test queries got planned as hash aggregates. Repeat
-- a few of them as group aggregates
set enable_hashagg=off;
set enable_groupagg=on;
select count(distinct d), count(distinct c), count(distinct dt) from dqa_t1;
 count | count | count 
-------+-------+-------
    23 |    10 |    34
(1 row)

select count(distinct c), count(distinct dt), i from dqa_t1 group by i;
 count | count | i  
-------+-------+----
     5 |     9 |  3
     5 |     8 | 11
     5 |     8 |  5
     5 |     8 |  9
     5 |     9 |  1
     5 |     8 |  7
     5 |     9 |  2
     5 |     8 |  6
     5 |     9 |  0
     5 |     8 |  8
     5 |     8 | 10
     5 |     8 |  4
(12 rows)

-- cleanup
drop table gp_dqa_t1;
drop table gp_dqa_t2;
create table foo_mdqa(x int, y int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'x' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
SELECT distinct C.z, count(distinct FS.x), count(distinct FS.y) FROM (SELECT 1 AS z FROM generate_series(1,10)) C, foo_mdqa FS GROUP BY z;
 z | count | count 
---+-------+-------
(0 rows)

SELECT distinct C.z, count(distinct FS.x), count(distinct FS.y) FROM (SELECT i AS z FROM generate_series(1,10) i) C, foo_mdqa FS GROUP BY z;
 z | count | count 
---+-------+-------
(0 rows)

drop table foo_mdqa;
