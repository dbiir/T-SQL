SELECT min_val, max_val FROM pg_settings WHERE name = 'gp_resqueue_priority_cpucores_per_segment';
 min_val | max_val 
---------+---------
 0.1     | 512
(1 row)

--
-- Test GUC if cursor is opened
--
-- start_ignore
drop table if exists test_cursor_set_table;
NOTICE:  table "test_cursor_set_table" does not exist, skipping
drop function if exists test_set_in_loop();
NOTICE:  function test_set_in_loop() does not exist, skipping
drop function if exists test_call_set_command();
NOTICE:  function test_call_set_command() does not exist, skipping
-- end_ignore
create table test_cursor_set_table as select * from generate_series(1, 100);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'generate_series' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE FUNCTION test_set_in_loop () RETURNS numeric
    AS $$
DECLARE
    rec record;
    result numeric;
    tmp numeric;
BEGIN
	result = 0;
FOR rec IN select * from test_cursor_set_table
LOOP
        select test_call_set_command() into tmp;
        result = result + 1;
END LOOP;
return result;
END;
$$
    LANGUAGE plpgsql NO SQL;
CREATE FUNCTION test_call_set_command() returns numeric
AS $$
BEGIN
       execute 'SET gp_workfile_limit_per_query=524;';
       return 0;
END;
$$
    LANGUAGE plpgsql NO SQL;
SELECT * from test_set_in_loop();
 test_set_in_loop 
------------------
              100
(1 row)

CREATE FUNCTION test_set_within_initplan () RETURNS numeric
AS $$
DECLARE
	result numeric;
	tmp RECORD;
BEGIN
	result = 1;
	execute 'SET gp_workfile_limit_per_query=524;';
	select into tmp * from test_cursor_set_table limit 100;
	return result;
END;
$$
	LANGUAGE plpgsql;
CREATE TABLE test_initplan_set_table as select * from test_set_within_initplan();
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'test_set_within_initplan' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
DROP TABLE if exists test_initplan_set_table;
DROP TABLE if exists test_cursor_set_table;
DROP FUNCTION if exists test_set_in_loop();
DROP FUNCTION if exists test_call_set_command();
-- Set work_mem. It emits a WARNING, but it should only emit it once.
--
-- We used to erroneously set the GUC twice in the QD node, whenever you issue
-- a SET command. If this stops emitting a WARNING in the future, we'll need
-- another way to detect that the GUC's assign-hook is called only once.
set work_mem='1MB';
WARNING:  "work_mem": setting is deprecated, and may be removed in a future release.
reset work_mem;
WARNING:  "work_mem": setting is deprecated, and may be removed in a future release.
--
-- Test if RESET timezone is dispatched to all slices
--
CREATE TABLE timezone_table AS SELECT * FROM (VALUES (123,1513123564),(123,1512140765),(123,1512173164),(123,1512396441)) foo(a, b) DISTRIBUTED RANDOMLY;
SELECT DISTINCT to_timestamp(b)::date FROM timezone_table;
 to_timestamp 
--------------
 12-01-2017
 12-04-2017
 12-12-2017
(3 rows)

SET timezone= 'America/New_York';
SHOW timezone;
     TimeZone     
------------------
 America/New_York
(1 row)

SELECT DISTINCT to_timestamp(b)::date FROM timezone_table;
 to_timestamp 
--------------
 12-01-2017
 12-04-2017
 12-12-2017
(3 rows)

RESET timezone;
SHOW timezone;
 TimeZone 
----------
 PST8PDT
(1 row)

SELECT DISTINCT to_timestamp(b)::date FROM timezone_table;
 to_timestamp 
--------------
 12-01-2017
 12-04-2017
 12-12-2017
(3 rows)

-- Test default_transaction_isolation and transaction_isolation fallback from serializable to repeatable read
CREATE TABLE test_serializable(a int);
insert into test_serializable values(1);
SET SESSION CHARACTERISTICS AS TRANSACTION ISOLATION LEVEL serializable;
show default_transaction_isolation;
 default_transaction_isolation 
-------------------------------
 repeatable read
(1 row)

SELECT * FROM test_serializable;
 a 
---
 1
(1 row)

SET default_transaction_isolation = 'read committed';
SET default_transaction_isolation = 'serializable';
show default_transaction_isolation;
 default_transaction_isolation 
-------------------------------
 repeatable read
(1 row)

SELECT * FROM test_serializable;
 a 
---
 1
(1 row)

SET default_transaction_isolation = 'read committed';
BEGIN TRANSACTION ISOLATION LEVEL serializable;
	show transaction_isolation;
 transaction_isolation 
-----------------------
 repeatable read
(1 row)

	SELECT * FROM test_serializable;
 a 
---
 1
(1 row)

COMMIT;
DROP TABLE test_serializable;
