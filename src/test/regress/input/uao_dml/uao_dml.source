create schema uao_dml_@orientation@;
set search_path=uao_dml_@orientation@;
set gp_default_storage_options='orientation=@orientation@';

-- Some of the UPDATE commands in this test fail with ORCA, with an error:
-- ERROR:  multiple updates to a row by the same query is not allowed
-- The queries in this test are not interesting from the point of view of
-- testing the optimizer, so just disable ORCA to work around that.
set optimizer=off;

-- With gp_select_invisible set true, the snapshot will be SnapshotAnyData.
-- But in one case of IndexOnlyScan, only MVCC snapshots are supported.
-- So we disable IndexOnlyScan here, as what we want to test is gp_select_invisible.
set enable_indexonlyscan=off;

-- @Description Tests basic delete feature with two AO blocks
-- 
DROP TABLE IF EXISTS foo;
CREATE TABLE foo (a INT, b INT, c CHAR(128)) WITH (appendonly=true);
CREATE INDEX foo_index ON foo(b);
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1,10) AS i;

SELECT COUNT(*) FROM foo;
DELETE FROM foo WHERE a < 4;
SELECT COUNT(*) FROM foo;
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(11,20) AS i;
SELECT COUNT(*) FROM foo;
DELETE FROM foo WHERE a = 16;
DELETE FROM foo WHERE a = 17;
SELECT a FROM foo WHERE a > 10;


-- @Description Tests the delete feature with two visimap entries and delete jumping
-- between them.
-- 
DROP TABLE IF EXISTS foo;
CREATE TABLE foo (a INT, b INT, c CHAR(128)) WITH (appendonly=true);
CREATE INDEX foo_index ON foo(b);
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c 
	FROM generate_series(1, 100000) AS i;

SELECT COUNT(*) FROM foo;
DELETE FROM foo WHERE a < 4;
SELECT COUNT(*) FROM foo;
BEGIN;
DELETE FROM foo WHERE a = 99962;
DELETE FROM foo WHERE a = 5;
DELETE FROM foo WHERE a = 99964;
DELETE FROM foo WHERE a = 42;
DELETE FROM foo WHERE a IN (6, 97000, 99, 1700, 99980);
SELECT a, b FROM foo WHERE a >= 99960 AND a < 99970;
SELECT a, b FROM foo WHERE a < 10;
ROLLBACK;


-- @Description Checks analyze behavior w.r.t. to statistics
-- 
DROP TABLE IF EXISTS ao2_@orientation@;
create table ao2_@orientation@ (i int, j varchar(10)) with (appendonly=true) distributed by (i);

insert into ao2_@orientation@ select i,'aa'||i from generate_series(21,30) as i;
select reltuples from pg_class where relname = 'ao2_@orientation@';
select count(*)  from ao2_@orientation@;
insert into ao2_@orientation@ select i,'aa'||i from generate_series(21,30) as i;
select count(*)  from ao2_@orientation@;
select reltuples from pg_class where relname = 'ao2_@orientation@';
insert into ao2_@orientation@ select i,'aa'||i from generate_series(21,30) as i;
select reltuples from pg_class where relname = 'ao2_@orientation@';
select count(*)  from ao2_@orientation@;
delete from ao2_@orientation@ where i < 27;
analyze ao2_@orientation@;
select count(*)  from ao2_@orientation@;
select reltuples from pg_class where relname = 'ao2_@orientation@';


-- @Description Tests delete on compressed ao tables
-- 
DROP TABLE IF EXISTS foo;
CREATE TABLE foo (a INT, b INT, c CHAR(128)) WITH (appendonly=true, compresstype = zlib, compresslevel=3);

INSERT INTO FOO VALUES (1, 1, 'c');
SELECT * FROM foo;
DELETE FROM foo;
SELECT * FROM foo;


-- @Description Tests that aborting a delete works as expected.
-- 
DROP TABLE IF EXISTS foo;
CREATE TABLE foo (a INT, b INT, c CHAR(128)) WITH (appendonly=true);
CREATE INDEX foo_index ON foo(b);
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1,10) AS i;

SELECT COUNT(*) FROM foo;
BEGIN;
DELETE FROM foo WHERE a = 10;
SELECT COUNT(*) FROM foo;
ROLLBACK;
SELECT COUNT(*) FROM foo;


-- @description Tests AO delete with a merge join
-- 
drop table if exists foo;
drop table if exists bar;
CREATE TABLE foo (a INT, b int, c int, d int) with (appendonly = true);
CREATE TABLE bar (a INT, b int, c int, d int) with (appendonly = true);
INSERT INTO foo SELECT i as a,i,i,i  FROM generate_series(1, 100000) AS i;
INSERT INTO bar SELECT i as a,i,i,i  FROM generate_series(1, 100000) AS i;

set enable_hashjoin=off;
set enable_nestloop=off;
set enable_seqscan=off;
set enable_bitmapscan=off;
set enable_mergejoin=on;
DELETE FROM foo using BAR WHERE foo.a = bar.a AND foo.b = bar.b AND foo.c = bar.c AND foo.d = bar.d;

reset enable_hashjoin;
reset enable_nestloop;
reset enable_seqscan;
reset enable_bitmapscan;
reset enable_mergejoin;


-- @Description Tests that delete in a serializable transaction is not supported
-- 
DROP TABLE IF EXISTS foo;
CREATE TABLE foo (a INT, b INT, c CHAR(128)) WITH (appendonly=true);
CREATE INDEX foo_index ON foo(b);
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1,1000) AS i;

BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
DELETE FROM foo WHERE a < 4;
ROLLBACK;


-- @Description Tests that delete in a serializable transaction is not supported
-- even in a subtransaction.
-- 
DROP TABLE IF EXISTS foo;
CREATE TABLE foo (a INT, b INT, c CHAR(128)) WITH (appendonly=true);
CREATE INDEX foo_index ON foo(b);
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1,1000) AS i;

BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
SAVEPOINT my_savepoint;
DELETE FROM foo WHERE a < 4;
ROLLBACK;


-- @Description Tests that delete with sub transactions
-- 
DROP TABLE IF EXISTS foo;
CREATE TABLE foo (a INT, b INT, c CHAR(128)) WITH (appendonly=true);
CREATE INDEX foo_index ON foo(b);
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1,100) AS i;

BEGIN;
SAVEPOINT my_savepoint;
DELETE FROM foo WHERE a < 4;
SELECT COUNT(*) FROM foo;
ROLLBACK TO SAVEPOINT my_savepoint;
SELECT COUNT(*) FROM foo;
COMMIT;
BEGIN;
SELECT COUNT(*) FROM foo;
DELETE FROM foo WHERE a < 10;
SAVEPOINT my_savepoint2;
SELECT COUNT(*) FROM foo;
ROLLBACK TO SAVEPOINT my_savepoint2;
SELECT COUNT(*) FROM foo;
COMMIT;
BEGIN;
SELECT COUNT(*) FROM foo;
SAVEPOINT my_savepoint3;
DELETE FROM foo WHERE a < 20;
SAVEPOINT my_savepoint4;
SELECT COUNT(*) FROM foo;
ROLLBACK TO SAVEPOINT my_savepoint3;
SELECT COUNT(*) FROM foo;
COMMIT;


-- @Description Tests that deleting the same tuple twice within the same
-- commands works fine.
-- 
DROP TABLE IF EXISTS foo;
DROP TABLE IF EXISTS bar;
CREATE TABLE foo (a INT) WITH (appendonly=true);
INSERT INTO foo VALUES (1);
CREATE TABLE bar (a INT) WITH (appendonly=true);
INSERT INTO bar VALUES (1);
INSERT INTO bar VALUES (1);

SELECT * FROM foo;
DELETE FROM foo USING bar WHERE foo.a = bar.a;
SELECT * FROM foo;


-- @Description Tests that deleting tuples twice is handled as expected.
-- 
DROP TABLE IF EXISTS foo;
CREATE TABLE foo (a INT, b INT, c CHAR(128)) WITH (appendonly=true);
CREATE INDEX foo_index ON foo(b);
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1,1000) AS i;

SELECT COUNT(*) FROM foo;
DELETE FROM foo WHERE a < 4;
SELECT COUNT(*) FROM foo;
DELETE FROM foo WHERE a < 4;
SELECT COUNT(*) FROM foo;

-- @Description Tests that deleting the same tuple twice within the same
-- commands works fine.
-- 
DROP TABLE IF EXISTS foo;
DROP TABLE IF EXISTS bar;
CREATE TABLE foo (a INT, b INT) WITH (appendonly=true);
INSERT INTO foo VALUES (10, 10);
CREATE TABLE bar (a INT, b INT) WITH (appendonly=true);
INSERT INTO bar VALUES (15, 10);
INSERT INTO bar VALUES (20, 10);

SELECT * FROM foo;
UPDATE foo SET b = bar.a FROM bar WHERE foo.b = bar.b;
set gp_select_invisible = false;
SELECT count(*) as only_visible FROM foo;
set gp_select_invisible = true;
SELECT count(*) as visible_and_invisible FROM foo;
set gp_select_invisible = false;


-- @Description Checks if gp_autostats gucs are correctly handled
-- 
DROP TABLE IF EXISTS ao2_@orientation@;
create table ao2_@orientation@ (i int, j varchar(10)) with (appendonly=true) distributed by (i);

set gp_autostats_on_change_threshold=1;
set gp_autostats_mode=on_change;
insert into ao2_@orientation@ select i,'aa'||i from generate_series(21,30) as i;
select reltuples from pg_class where relname = 'ao2_@orientation@';
select count(*)  from ao2_@orientation@;
insert into ao2_@orientation@ select i,'aa'||i from generate_series(21,30) as i;
select count(*)  from ao2_@orientation@;
select reltuples from pg_class where relname = 'ao2_@orientation@';
insert into ao2_@orientation@ select i,'aa'||i from generate_series(21,30) as i;
select reltuples from pg_class where relname = 'ao2_@orientation@';
select count(*)  from ao2_@orientation@;
delete from ao2_@orientation@ where i < 27;
select count(*)  from ao2_@orientation@;
select reltuples from pg_class where relname = 'ao2_@orientation@';
reset gp_autostats_on_change_threshold;
reset gp_autostats_mode;


-- @Description Tests that gp_select_invisible is handled correctly with row append-only.
-- 
DROP TABLE IF EXISTS foo;
CREATE TABLE foo (a INT, b INT, c CHAR(128)) WITH (appendonly=true);
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1,10) AS i;
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(11,20) AS i;
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(21,30) AS i;

SELECT COUNT(*) FROM foo;
SET gp_select_invisible=true;
SELECT COUNT(*) FROM foo;
SET gp_select_invisible=false;


-- @Description Tests that gp_select_invisible is working correctly on AO tables
-- with an index.
-- 
DROP TABLE IF EXISTS foo;
CREATE TABLE foo (a INT, b INT, c CHAR(128)) WITH (appendonly=true);
CREATE INDEX foo_index ON foo(b);
CREATE INDEX foo_index2 ON foo(a);
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1,1000) AS i;
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1001,2000) AS i;
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(2001,3000) AS i;

-- Force the usage of the index
SET enable_seqscan=false;
SELECT COUNT(*) FROM foo WHERE a < 4;
DELETE FROM foo WHERE a < 4;
SELECT COUNT(*) FROM foo WHERE a < 4;
SET gp_select_invisible=true;
-- Should display all tuples
SELECT COUNT(*) FROM foo WHERE a < 4;
-- Now an interesting case where we update with gp_select_invisible active
UPDATE foo SET b = 0 WHERE a < 5;
-- We should not re-activate the deleted tuples
SET gp_select_invisible=false;
SELECT COUNT(*) FROM foo WHERE b = 0;
-- Now the same re-activation test with update
SET gp_select_invisible=true;
UPDATE foo SET b = -1 WHERE a = 4;
SET gp_select_invisible=false;
SELECT COUNT(*) FROM foo WHERE a = 4;

RESET enable_seqscan;

-- @Description Tests that gp_select_invisible is handled correctly with UAO
-- 
DROP TABLE IF EXISTS foo;
CREATE TABLE foo (a INT, b INT, c CHAR(128)) WITH (appendonly=true);
CREATE INDEX foo_index ON foo(b);
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1,10) AS i;

SELECT COUNT(*) FROM foo WHERE a < 4;
DELETE FROM foo WHERE a < 4;
SELECT COUNT(*) FROM foo WHERE a < 4;
SET gp_select_invisible=true;
-- Should display all tuples
SELECT COUNT(*) FROM foo WHERE a < 4;
-- Now an interesting case where we update with gp_select_invisible active
UPDATE foo SET b = 0 WHERE a < 5;
-- We should not re-activate the deleted tuples
SET gp_select_invisible=false;
SELECT COUNT(*) FROM foo WHERE b = 0;
-- Now the same re-activation test with update
SET gp_select_invisible=true;
UPDATE foo SET b = -1 WHERE a = 4;
SET gp_select_invisible=false;
SELECT COUNT(*) FROM foo WHERE a = 4;

-- @Description Tests that gp_select_invisible is working correctly for updates
-- Test case for issue reported in STO-258
-- 
DROP table IF EXISTS bar2;
set gp_select_invisible = true;
create table bar2 ( a int, b int) with (appendonly = true);
insert into bar2 select x , x from generate_series(1,10) as x;
SET gp_select_invisible=false;

set gp_select_invisible = true;
-- The test framework assumes that the output of `select ... order by`
-- is in order. It is true but not enought because the order of the
-- tuples with the same order-by key might be different in other cols.
-- To make these kind of test cases not flaky, we should order the
-- results in all the cols. 
select * from (select * from bar2 order by 1) r order by 1, 2;
update bar2 set b = b+200 where a = 5;
select * from (select * from bar2 order by 1) r order by 1, 2;
insert into bar2 select x , x from generate_series(11,20) as x;
select * from bar2 order by 1, 2;
set gp_select_invisible = false;


-- @Description Out of order Update (MPP-21144)
-- 

-- scenario 1
drop table if exists heap_ooo_del_tab1;
create table heap_ooo_del_tab1 (i int, j int ) ;
drop table if exists heap_ooo_del_tab2;
create table heap_ooo_del_tab2 (i int, j int ) ;
insert into  heap_ooo_del_tab1 values (1,10);
insert  into heap_ooo_del_tab2 values (1,11),(1,22);
select * from heap_ooo_del_tab1 order by 2;
select * from heap_ooo_del_tab2 order by 2;
update heap_ooo_del_tab1 set j = heap_ooo_del_tab2.j from heap_ooo_del_tab2 where heap_ooo_del_tab1.i = heap_ooo_del_tab2.i ;
select count(*) from heap_ooo_del_tab2 ;
select count(*) from heap_ooo_del_tab1 ;
set gp_select_invisible = true;
select count(*) from heap_ooo_del_tab1 ;
set gp_select_invisible = false;
-- scenario 2
drop table if exists heap_ooo_del_tab1;
create table heap_ooo_del_tab1 (i int, j int );
drop table if exists heap_ooo_del_tab2;
create table heap_ooo_del_tab2 (i int, j int ) ;
insert into  heap_ooo_del_tab1 values (1,10) ,(1,10) ;
insert  into heap_ooo_del_tab2 values (1,11),(1,22) ;
select * from heap_ooo_del_tab1 order by 2;
select * from heap_ooo_del_tab2 order by 2;
delete from heap_ooo_del_tab1 using heap_ooo_del_tab2 where heap_ooo_del_tab1.i = heap_ooo_del_tab2.i;
select count(*) from heap_ooo_del_tab2 ;
select count(*) from heap_ooo_del_tab1 ;
set gp_select_invisible = true;
select count(*) from heap_ooo_del_tab1 ;
set gp_select_invisible = false;
vacuum heap_ooo_del_tab1;
set gp_select_invisible = true;
select count(*) from heap_ooo_del_tab1 ;
set gp_select_invisible = false;


-- @Description Out of order Update (MPP-21144)
-- 

-- scenario 1
drop table if exists heap_ooo_upd_tab1;
create table heap_ooo_upd_tab1 (i int, j int ) ;
drop table if exists heap_ooo_upd_tab2;
create table heap_ooo_upd_tab2 (i int, j int ) ;
insert into  heap_ooo_upd_tab1 values (1,10);
insert  into heap_ooo_upd_tab2 values (1,11),(1,22);
select * from heap_ooo_upd_tab1 order by 2;
select * from heap_ooo_upd_tab2 order by 2;
update heap_ooo_upd_tab1 set j = heap_ooo_upd_tab2.j from heap_ooo_upd_tab2 where heap_ooo_upd_tab1.i = heap_ooo_upd_tab2.i ;
select count(*) from heap_ooo_upd_tab2 ;
select count(*) from heap_ooo_upd_tab1 ;
set gp_select_invisible = true;
select count(*) from heap_ooo_upd_tab1 ;
set gp_select_invisible = false;
-- scenario 2
drop table if exists heap_ooo_upd_tab1;
create table heap_ooo_upd_tab1 (i int, j int );
drop table if exists heap_ooo_upd_tab2;
create table heap_ooo_upd_tab2 (i int, j int ) ;
insert into  heap_ooo_upd_tab1 values (1,10) ,(1,10) ;
insert  into heap_ooo_upd_tab2 values (1,11),(1,22) ;
select * from heap_ooo_upd_tab1 order by 2;
select * from heap_ooo_upd_tab2 order by 2;
update heap_ooo_upd_tab1 set j = heap_ooo_upd_tab2.j from heap_ooo_upd_tab2 where heap_ooo_upd_tab1.i = heap_ooo_upd_tab2.i ;
select count(*) from heap_ooo_upd_tab2 ;
select count(*) from heap_ooo_upd_tab1 ;
set gp_select_invisible = true;
select count(*) from heap_ooo_upd_tab1 ;
set gp_select_invisible = false;
vacuum heap_ooo_upd_tab1;
set gp_select_invisible = true;
select count(*) from heap_ooo_upd_tab1 ;
set gp_select_invisible = false;


-- @Description Checks if delete using an index works correctly
-- 
DROP TABLE IF EXISTS foo;
CREATE TABLE foo (a INT, b INT, c CHAR(128)) WITH (appendonly=true);
CREATE INDEX foo_index ON foo(b);
INSERT INTO foo VALUES (0, 64000, 'c');
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1, 10) AS i;
INSERT INTO foo VALUES (0, 90002, 'c');
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1, 60000) AS i;
INSERT INTO foo VALUES (0, 64001, 'c');
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(70001, 120000) AS i;
ANALYZE foo;
REINDEX INDEX foo_index;

SET enable_seqscan=false;
SET enable_bitmapscan=false;
DELETE FROM foo WHERE b >= 64000;
SELECT COUNT(*) FROM foo WHERE a = 0;

RESET enable_seqscan;
RESET enable_bitmapscan;


-- @Description Tests basic index stats after vacuuming
-- 
DROP TABLE if exists mytab_@orientation@;
CREATE TABLE mytab_@orientation@(
          col_int int,
          col_text text,
          col_numeric numeric,
          col_unq int
          ) with(appendonly=true) DISTRIBUTED RANDOMLY;

Create index mytab_int_idx1_@orientation@ on mytab_@orientation@(col_int);

insert into mytab_@orientation@ values(1,'aa',1001,101),(2,'bb',1002,102);

select * from mytab_@orientation@;
update mytab_@orientation@ set col_text=' new value' where col_int = 1;
select * from mytab_@orientation@;
vacuum mytab_@orientation@;
SELECT reltuples FROM pg_class WHERE relname = 'mytab_@orientation@';
SELECT reltuples FROM pg_class WHERE relname = 'mytab_int_idx1_@orientation@';


-- @Description Checks that deleting works with many AO blocks.
-- 
DROP TABLE IF EXISTS foo;
CREATE TABLE foo (a INT, b INT, c CHAR(128)) WITH (appendonly=true);
CREATE INDEX foo_index ON foo(b);
BEGIN;
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1, 100000) AS i;
COMMIT;
BEGIN;
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1, 100000) AS i;
COMMIT;
BEGIN;
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1, 100000) AS i;
COMMIT;
BEGIN;
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1, 100000) AS i;
COMMIT;
BEGIN;
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1, 100000) AS i;
COMMIT;
BEGIN;
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1, 100000) AS i;
COMMIT;
BEGIN;
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1, 100000) AS i;
COMMIT;
BEGIN;
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1, 100000) AS i;
COMMIT;
BEGIN;
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1, 100000) AS i;
COMMIT;
BEGIN;
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1, 100000) AS i;
COMMIT;
BEGIN;
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1, 100000) AS i;
COMMIT;

SELECT COUNT(*) FROM foo WHERE b = 17;
DELETE FROM foo WHERE b = 17;
SELECT COUNT(*) FROM foo WHERE b = 17;
SELECT COUNT(*) FROM foo;
DELETE FROM foo WHERE b = 16 OR b = 10000 OR b = 15;
SELECT COUNT(*) FROM foo;
-- @product_version gpdb: [4.3.1.0-4.3.99.99]
-- Bug verification for mpp-23510
drop table  if exists mpp23510 cascade;
create table mpp23510 (a int, b int, c char(128)) with (appendonly=true);
insert into mpp23510 select i, i-2 ,'Hello World'  from generate_series(-10,10) i;
create index mpp23510_idx on mpp23510(a);
-- force an index scan
set enable_seqscan=off;
select count(*) from mpp23510 where a < 5;
delete from mpp23510 where a >= 0 and a < 3;
select count(*) from mpp23510 where a < 5;
-- Restore scan back to sequential/index
set enable_seqscan=on;
select count(*) from mpp23510 where a < 5;
insert into mpp23510 select i, i-2 ,'Hello World2'  from generate_series(-11,-15) i;
select count(*) from mpp23510 where a < 7;
delete from mpp23510 where a >= 0 and a < 7;
select count(*) from mpp23510 where a < 7;
set enable_seqscan=off;
select count(*) from mpp23510 where a < 7;

reset enable_seqscan;


-- @Description Tests that it is possible to delete and update
-- an append-only table that have no index on them.
-- 
DROP TABLE IF EXISTS foo;
CREATE TABLE foo (a INT, b INT) WITH (appendonly=true);
INSERT INTO foo VALUES (0, 0);
INSERT INTO foo VALUES (1, 1);

UPDATE foo SET b=2 WHERE a = 1;
DELETE FROM foo WHERE a = 1;
SELECT a FROM foo;


-- @Description Tests that deleting the same tuple twice within the same
-- commands works fine.
-- 
DROP TABLE IF EXISTS foo;
DROP TABLE IF EXISTS bar;

-- This contrived choice of distribution key is to ensure that
-- subsequent DELETE operations happen on a single GPDB segment.
-- Otherwise, we may not exercise the case of out-of-order delete.
CREATE TABLE foo (a INT, b INT, c CHAR(100)) WITH (appendonly=true)
DISTRIBUTED BY (b);
INSERT INTO foo SELECT i as a, 1 as b, '' as c FROM generate_series(1, 100000) AS i;
INSERT INTO foo SELECT i as a, 2 as b, '' as c FROM generate_series(1, 100000) AS i;
CREATE TABLE bar (a INT, b INT, c CHAR(100)) DISTRIBUTED BY (b);
-- Populate bar such that at least one segment contains multiple
-- occurences of the same value for a.
INSERT INTO bar SELECT i as a, 1 as b, '' as c  FROM generate_series(1, 100000) AS i;
INSERT INTO bar SELECT i as a, 2 as b, '' as c  FROM generate_series(1, 100000) AS i;
INSERT INTO bar SELECT i as a, 1 as b, '' as c  FROM generate_series(1, 100000) AS i;
INSERT INTO bar SELECT i as a, 2 as b, '' as c  FROM generate_series(1, 100000) AS i;
ANALYZE foo;
ANALYZE bar;

DELETE FROM foo USING BAR WHERE foo.b = bar.b AND foo.a = bar.a AND
(bar.a = 10 OR bar.a = 40000 OR bar.a = 20000);

-- MPP-23546: out of order tuples spanning more than one visimap
-- entry.  We have verified through gdb that the following delete
-- statement results in one visimap entry encountered more than once
-- in appendonly_delete_finish() code path.  This is because values 12
-- and 1001 of foo.a are covered by one visimap entry where as the
-- value 80001 is covered by a different visimap entry.  Assumption:
-- the values are inserted in increasing order by a single insert
-- transaction.

-- Ensure that tuples to be deleted are from the same GPDB segment.
-- This query should return the same output irrespective of GPDB
-- configuration (1 segdb, 2 or more segdbs).
SELECT distinct(a) FROM foo
WHERE gp_segment_id = 1 AND foo.a IN (12, 80001, 1001)
ORDER BY a;

DELETE FROM foo USING bar WHERE foo.b = bar.b AND foo.a = bar.a AND
(bar.a = 12 OR bar.a = 80001 OR bar.a = 1001);

-- @Description Tests that out-of-order update works fine.
-- 
DROP TABLE IF EXISTS foo;
DROP TABLE IF EXISTS bar;

-- This contrived choice of distribution key is to ensure that
-- subsequent UPDATE operations happen on a single GPDB segment.
-- Otherwise, we may not exercise the case of out-of-order updates.
CREATE TABLE foo (a INT, b INT, c CHAR(100)) WITH (appendonly=true)
DISTRIBUTED BY(b);
INSERT INTO foo SELECT i as a, 1 as b, '' as c FROM generate_series(1, 100000) AS i;
INSERT INTO foo SELECT i as a, 2 as b, '' as c FROM generate_series(1, 100000) AS i;
CREATE TABLE bar (a INT, b INT, c CHAR(100)) DISTRIBUTED BY(b);
-- Insert unique values for bar.a so that we don't get "multiple
-- updates to a row by the same query is not allowed" error later when
-- we join foo and bar on a in update statements.  This particular
-- error is covered by the test case "doubleupdate_command.sql".
INSERT INTO bar SELECT i as a, 1 as b, '' as c  FROM generate_series(1, 100000) AS i;
INSERT INTO bar SELECT i as a, 2 as b, '' as c  FROM generate_series(1, 100000) AS i;
ANALYZE foo;
ANALYZE bar;


-- MPP-23546.  The following update statements ensure that
-- appendonly_update() sees tuples out of order with respect to their
-- row numbers / tuple ids and also that the tuples seen by update
-- span more than one visimap entry.

set enable_nestloop=false;
UPDATE foo SET a = 0 FROM bar WHERE foo.b = bar.b AND foo.a = bar.a AND
(bar.a = 10 OR bar.a = 40000 OR bar.a = 20000);

-- Ensure that tuples to be updated are all from the same GPDB segment.
SELECT distinct(a) FROM foo WHERE gp_segment_id = 1 AND
foo.a IN (12, 80001, 1001) ORDER BY a;

UPDATE foo SET a = 1 FROM bar WHERE
foo.b = bar.b AND foo.a = bar.a AND
(bar.a = 12 OR bar.a = 80001 OR bar.a = 1001);

reset enable_nestloop;


-- @Description select into
--
DROP TABLE IF EXISTS uao_orders_into;
DROP TABLE IF EXISTS new_uao_orders_into;
CREATE TABLE uao_orders_into(order_id serial , customer_id integer,
      order_datetime timestamp, order_total numeric(10,2)) with (appendonly=true);

INSERT INTO uao_orders_into(customer_id, order_datetime, order_total)
VALUES (1,'2009-05-01 10:00 AM', 500),
    (1,'2009-05-15 11:00 AM', 650),
    (2,'2009-05-11 11:00 PM', 100),
    (2,'2009-05-12 11:00 PM', 5),
       (3,'2009-04-11 11:00 PM', 100),
          (1,'2009-05-20 11:00 AM', 3);

select * into new_uao_orders_into from uao_orders_into where order_total > 500 order by order_id;

select * from new_uao_orders_into;


-- @Description Very simple test of delete
-- 
DROP TABLE IF EXISTS foo;
CREATE TABLE foo (a INT, b INT, c CHAR(128)) WITH (appendonly=true);
INSERT INTO FOO VALUES (1, 1, 'c');
SELECT * FROM foo;

DELETE FROM foo;
SELECT * FROM foo;

-- @Description Tests that pg_class statistics are up-to-date when deleting and updating.
-- 
DROP TABLE IF EXISTS foo_@orientation@;
CREATE TABLE foo_@orientation@ (a INT, b INT, c CHAR(128)) WITH (appendonly=true) DISTRIBUTED BY (a);
CREATE INDEX foo_@orientation@_index ON foo_@orientation@(b);
INSERT INTO foo_@orientation@ SELECT i as a, i as b, 'hello world' as c FROM generate_series(1,1000) AS i;

SELECT reltuples FROM pg_class WHERE relname = 'foo_@orientation@';
SELECT reltuples FROM pg_class WHERE relname = 'foo_@orientation@_index';
DELETE FROM foo_@orientation@ WHERE a < 100;
SELECT reltuples FROM pg_class WHERE relname = 'foo_@orientation@';
SELECT reltuples FROM pg_class WHERE relname = 'foo_@orientation@_index';
UPDATE foo_@orientation@ SET b=42 WHERE a < 200;
SELECT reltuples FROM pg_class WHERE relname = 'foo_@orientation@';
SELECT reltuples FROM pg_class WHERE relname = 'foo_@orientation@_index';
set enable_seqscan=false;
SELECT COUNT(*) FROM foo_@orientation@ WHERE b=42;

reset enable_seqscan;

-- @Description Checks the behavior of TRUNCATE.
-- Note that the contents of the visimap is not checked here.
-- 
DROP TABLE IF EXISTS foo;
CREATE TABLE foo (a INT, b INT, c CHAR(128)) WITH (appendonly=true);
CREATE INDEX foo_index ON foo(b);
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1,10) AS i;

SELECT COUNT(*) FROM foo;
DELETE FROM foo;
SELECT COUNT(*) FROM foo;
TRUNCATE foo;
SELECT COUNT(*) FROM foo;
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1,10) AS i;
SELECT COUNT(*) FROM foo;


-- @Description Out of order Update (MPP-21144)
-- 

-- scenario 1
drop table if exists uao_ooo_del_tab1;
create table uao_ooo_del_tab1 (i int, j int ) with (appendonly=true);
drop table if exists uao_ooo_del_tab2;
create table uao_ooo_del_tab2 (i int, j int )  with (appendonly=true);
insert into  uao_ooo_del_tab1 values (1,10);
insert  into uao_ooo_del_tab2 values (1,11),(1,22);
select * from uao_ooo_del_tab1 order by 2;
select * from uao_ooo_del_tab2 order by 2;
delete from uao_ooo_del_tab1 using uao_ooo_del_tab2 where uao_ooo_del_tab1.i = uao_ooo_del_tab2.i;
select count(*) from uao_ooo_del_tab2 ;
select count(*) from uao_ooo_del_tab1 ;
set gp_select_invisible = true;
select count(*) from uao_ooo_del_tab1 ;
set gp_select_invisible = false;
-- scenario 2
drop table if exists uao_ooo_del_tab1;
create table uao_ooo_del_tab1 (i int, j int ) with (appendonly=true);;
drop table if exists uao_ooo_del_tab2;
create table uao_ooo_del_tab2 (i int, j int ) with (appendonly=true); ;
insert into  uao_ooo_del_tab1 values (1,10) ,(1,0) ;
update uao_ooo_del_tab1 set j = j + 2 where j = 0;
update uao_ooo_del_tab1 set j = j + 3 where j = 10;
insert  into uao_ooo_del_tab2 values (1,11),(1,22),(1,33),(1,44),(1,55) ;
update uao_ooo_del_tab2 set j = j + 1 where j = 11;
update uao_ooo_del_tab2 set j = j + 2 where j = 22;
select * from uao_ooo_del_tab1 order by 2;
select * from uao_ooo_del_tab2 order by 2;
delete from uao_ooo_del_tab1 using uao_ooo_del_tab2 where uao_ooo_del_tab1.i = uao_ooo_del_tab2.i;
select count(*) from uao_ooo_del_tab2 ;
select count(*) from uao_ooo_del_tab1 ;
set gp_select_invisible = true;
select count(*) from uao_ooo_del_tab1 ;
set gp_select_invisible = false;
vacuum uao_ooo_del_tab1;
set gp_select_invisible = true;
select count(*) from uao_ooo_del_tab1 ;
set gp_select_invisible = false;
-- scenario 3
drop table if exists uao_ooo_upd_tab1;
create table uao_ooo_upd_tab1 (i int, j int ) with (appendonly=true) ;
drop table if exists uao_ooo_upd_tab2;
create table uao_ooo_upd_tab2 (i int, j int ) with (appendonly=true) ;
insert into  uao_ooo_upd_tab1 values (1,10) ,(1,10) ;
insert  into uao_ooo_upd_tab2 values (1,11),(1,22),(1,33),(1,44),(1,55)  ;
BEGIN;
update uao_ooo_upd_tab1 set j = j + 3 where j = 10;
select * from uao_ooo_upd_tab1 order by 2;
select * from uao_ooo_upd_tab2 order by 2;
delete from uao_ooo_del_tab1 using uao_ooo_del_tab2 where uao_ooo_del_tab1.i = uao_ooo_del_tab2.i;
select count(*) from uao_ooo_upd_tab2 ;
select count(*) from uao_ooo_upd_tab1 ;
select * from uao_ooo_upd_tab1 order by 2;
ROLLBACK;
set gp_select_invisible = true;
select count(*) from uao_ooo_upd_tab1 ;
select * from uao_ooo_upd_tab1 order by 2;
set gp_select_invisible = false;
vacuum uao_ooo_upd_tab1;
set gp_select_invisible = true;
select count(*) from uao_ooo_upd_tab1 ;
set gp_select_invisible = false;


-- @Description Out of order Update (MPP-21144)
-- 

-- scenario 1
drop table if exists uao_ooo_upd_tab1;
create table uao_ooo_upd_tab1 (i int, j int ) with (appendonly=true);
drop table if exists uao_ooo_upd_tab2;
create table uao_ooo_upd_tab2 (i int, j int )  with (appendonly=true);
insert into  uao_ooo_upd_tab1 values (1,10);
insert  into uao_ooo_upd_tab2 values (1,11),(1,22);
select * from uao_ooo_upd_tab1 order by 2;
select * from uao_ooo_upd_tab2 order by 2;
update uao_ooo_upd_tab1 set j = uao_ooo_upd_tab2.j from uao_ooo_upd_tab2 where uao_ooo_upd_tab1.i = uao_ooo_upd_tab2.i ;
select count(*) from uao_ooo_upd_tab2 ;
select count(*) from uao_ooo_upd_tab1 ;
set gp_select_invisible = true;
select count(*) from uao_ooo_upd_tab1 ;
set gp_select_invisible = false;
-- scenario 2
drop table if exists uao_ooo_upd_tab1;
create table uao_ooo_upd_tab1 (i int, j int ) with (appendonly=true) ;
drop table if exists uao_ooo_upd_tab2;
create table uao_ooo_upd_tab2 (i int, j int ) with (appendonly=true) ;
insert into  uao_ooo_upd_tab1 values (1,10) ,(1,10) ;
update uao_ooo_upd_tab1 set j = j + 3 where j = 10;
insert  into uao_ooo_upd_tab2 values (1,11),(1,22),(1,33),(1,44),(1,55)  ;
select * from uao_ooo_upd_tab1 order by 2;
select * from uao_ooo_upd_tab2 order by 2;
update uao_ooo_upd_tab1 set j = uao_ooo_upd_tab2.j from uao_ooo_upd_tab2 where uao_ooo_upd_tab1.i = uao_ooo_upd_tab2.i ;
select count(*) from uao_ooo_upd_tab2 ;
select count(*) from uao_ooo_upd_tab1 ;
set gp_select_invisible = true;
select count(*) from uao_ooo_upd_tab1 ;
set gp_select_invisible = false;
vacuum uao_ooo_upd_tab1;
set gp_select_invisible = true;
select count(*) from uao_ooo_upd_tab1 ;
set gp_select_invisible = false;
select * from uao_ooo_upd_tab1 ;

-- scenario 3
drop table if exists uao_ooo_upd_tab1;
create table uao_ooo_upd_tab1 (i int, j int ) with (appendonly=true) ;
drop table if exists uao_ooo_upd_tab2;
create table uao_ooo_upd_tab2 (i int, j int ) with (appendonly=true) ;
insert into  uao_ooo_upd_tab1 values (1,10) ,(1,10) ;
insert  into uao_ooo_upd_tab2 values (1,11),(1,22),(1,33),(1,44),(1,55)  ;
BEGIN;
update uao_ooo_upd_tab1 set j = j + 3 where j = 10;
select * from uao_ooo_upd_tab1 order by 2;
select * from uao_ooo_upd_tab2 order by 2;
update uao_ooo_upd_tab1 set j = uao_ooo_upd_tab2.j from uao_ooo_upd_tab2 where uao_ooo_upd_tab1.i = uao_ooo_upd_tab2.i ;
select count(*) from uao_ooo_upd_tab2 ;
select count(*) from uao_ooo_upd_tab1 ;
select * from uao_ooo_upd_tab1 order by 2;
ROLLBACK;
set gp_select_invisible = true;
select count(*) from uao_ooo_upd_tab1 ;
select * from uao_ooo_upd_tab1 order by 2;
set gp_select_invisible = false;
vacuum uao_ooo_upd_tab1;
set gp_select_invisible = true;
select count(*) from uao_ooo_upd_tab1 ;
select * from uao_ooo_upd_tab1 order by 2;
set gp_select_invisible = false;


-- @Description Tests basic update commands on ao tables when aborted
-- 
DROP TABLE IF EXISTS foo;
CREATE TABLE foo (a INT, b INT, c CHAR(128)) WITH (appendonly=true);
CREATE INDEX foo_index ON foo(b);
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1,1000) AS i;

BEGIN;
UPDATE foo SET b=42 WHERE a < 10;
SELECT COUNT(b) FROM foo WHERE b = 42;
SELECT COUNT(b) FROM foo WHERE b < 10;
ROLLBACK;
SELECT COUNT(b) FROM foo WHERE b = 42;
SELECT COUNT(b) FROM foo WHERE b < 10;
set gp_select_invisible=true;
SELECT COUNT(b) FROM foo WHERE b = 42;
SELECT COUNT(b) FROM foo WHERE b < 10;
set gp_select_invisible=false;

-- @Description Tests basic update commands on ao tables.
-- 
DROP TABLE IF EXISTS foo;
CREATE TABLE foo (a INT, b INT, c CHAR(128)) WITH (appendonly=true);
CREATE INDEX foo_index ON foo(b);
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1,1000) AS i;

UPDATE foo SET b=42 WHERE a < 10;
SELECT COUNT(b) FROM foo WHERE b = 42;
SELECT COUNT(b) FROM foo WHERE b < 10;
UPDATE foo SET b=1001 WHERE b < 4;
DELETE FROM foo WHERE a < 4;
UPDATE foo SET b=1002 WHERE a < 5;


-- @Description Tests the update command with many blocks.
-- 
DROP TABLE IF EXISTS foo;
CREATE TABLE foo (a INT, b INT, c CHAR(128)) WITH (appendonly=true);
CREATE INDEX foo_index ON foo(b);
BEGIN;
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1, 100000) AS i;
COMMIT;
BEGIN;
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1, 100000) AS i;
COMMIT;
BEGIN;
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1, 100000) AS i;
COMMIT;
BEGIN;
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1, 100000) AS i;
COMMIT;
BEGIN;
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1, 100000) AS i;
COMMIT;
BEGIN;
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1, 100000) AS i;
COMMIT;
BEGIN;
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1, 100000) AS i;
COMMIT;
BEGIN;
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1, 100000) AS i;
COMMIT;
BEGIN;
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1, 100000) AS i;
COMMIT;
BEGIN;
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1, 100000) AS i;
COMMIT;
BEGIN;
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1, 100000) AS i;
COMMIT;

SELECT SUM(b) FROM foo WHERE a = 17;
UPDATE foo SET b = 2*b WHERE a = 17;
SELECT SUM(b) FROM foo WHERE a = 17;
BEGIN;
UPDATE foo SET b = 2*b WHERE a = 17;
COMMIT;
SELECT SUM(b) FROM foo WHERE a = 17;
BEGIN;
UPDATE foo SET b = 2*b WHERE a = 17;
SELECT SUM(b) FROM foo WHERE a = 17;
ROLLBACK;
SELECT SUM(b) FROM foo WHERE a = 17;


-- @description Tests AO update with a merge join
-- 
drop table if exists foo;
drop table if exists bar;
CREATE TABLE foo (a INT, b int, c int, d int) with (appendonly = true);
CREATE TABLE bar (a INT, b int, c int, d int) with (appendonly = true);
INSERT INTO foo SELECT i as a,i,i,i  FROM generate_series(1, 100000) AS i;
INSERT INTO bar SELECT i as a,i,i,i  FROM generate_series(1, 100000) AS i;

set enable_hashjoin=off;
set enable_nestloop=off;
set enable_seqscan=off;
set enable_bitmapscan=off;
set enable_mergejoin=on;
UPDATE foo SET b = bar.a FROM bar WHERE foo.a = bar.a AND foo.b = bar.b AND foo.c = bar.c AND foo.d = bar.d;

reset enable_hashjoin;
reset enable_nestloop;
reset enable_seqscan;
reset enable_bitmapscan;
reset enable_mergejoin;


-- @Description Tests that update in a serializable transaction is not supported
-- 
DROP TABLE IF EXISTS foo;
CREATE TABLE foo (a INT, b INT, c CHAR(128)) WITH (appendonly=true);
CREATE INDEX foo_index ON foo(b);
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1,1000) AS i;

BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
UPDATE foo SET b = 1 WHERE a < 4;
ROLLBACK;

-- @Description Tests that update is supported in a subtransaction.
-- 
DROP TABLE IF EXISTS foo;
CREATE TABLE foo (a INT, b INT, c CHAR(128)) WITH (appendonly=true);
CREATE INDEX foo_index ON foo(b);
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1, 100) AS i;

BEGIN;
SAVEPOINT my_savepoint;
SELECT COUNT(*) FROM foo WHERE b = 1;
UPDATE foo SET b = 1 WHERE a < 4;
SAVEPOINT my_savepoint2;
ROLLBACK To my_savepoint;
SELECT COUNT(*) FROM foo WHERE b = 1;
UPDATE foo SET b = 1 WHERE a < 4;
COMMIT;

BEGIN;
SAVEPOINT my_savepoint;
SELECT COUNT(*) FROM foo WHERE b = 1;
UPDATE foo SET b = 1 WHERE a < 8;
SAVEPOINT my_savepoint2;
UPDATE foo SET b = 2 WHERE a < 12;
SELECT COUNT(*) FROM foo WHERE b = 1;
ROLLBACK To my_savepoint2;
SELECT COUNT(*) FROM foo WHERE b = 1;
ROLLBACK To my_savepoint;
SELECT COUNT(*) FROM foo WHERE b = 1;
COMMIT;


-- @Description Tests that update in a serializable transaction is not supported
-- even in a subtransaction.
-- 
DROP TABLE IF EXISTS foo;
CREATE TABLE foo (a INT, b INT, c CHAR(128)) WITH (appendonly=true);
CREATE INDEX foo_index ON foo(b);
INSERT INTO foo SELECT i as a, i as b, 'hello world' as c FROM generate_series(1,1000) AS i;

BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
SAVEPOINT my_savepoint;
UPDATE foo SET b = 1 WHERE a < 4;
ROLLBACK;
