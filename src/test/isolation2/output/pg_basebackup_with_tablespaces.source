include: helpers/gp_management_utils_helpers.sql;
CREATE

-- Given a segment with a database that has a tablespace
!\retcode mkdir -p @testtablespace@/some_basebackup_tablespace;
-- start_ignore

-- end_ignore
(exited with code 0)

drop tablespace if exists some_basebackup_tablespace;
DROP
create tablespace some_basebackup_tablespace location '@testtablespace@/some_basebackup_tablespace';
CREATE

-- And a database using the tablespace
drop database if exists some_database_with_tablespace;
DROP
create database some_database_with_tablespace tablespace some_basebackup_tablespace;
CREATE

-- And a database without using the tablespace
drop database if exists some_database_without_tablespace;
DROP
create database some_database_without_tablespace;
CREATE

-- And a table and index, temp table and index using the tablespace
1:@db_name some_database_without_tablespace: CREATE TABLE test(a INT, b INT) TABLESPACE some_basebackup_tablespace;
CREATE
1:@db_name some_database_without_tablespace: CREATE INDEX test_index on test(a) TABLESPACE some_basebackup_tablespace;
CREATE
2:@db_name some_database_without_tablespace: CREATE TEMP TABLE test_tmp(a INT, b INT) TABLESPACE some_basebackup_tablespace;
CREATE
2:@db_name some_database_without_tablespace: CREATE INDEX test_tmp_index on test_tmp(a) TABLESPACE some_basebackup_tablespace;
CREATE

1q: ... <quitting>

-- When we create a full backup
select pg_basebackup(address, 100, port, 'some_replication_slot', '@testtablespace@/some_basebackup_datadir', false, 'stream') from gp_segment_configuration where content = 0 and role = 'p';
 pg_basebackup 
---------------
               
(1 row)

-- Then we should have two directories in newly created target tablespace, some_database_with_tablespace and some_database_without_tablespace
select count_of_items_in_directory('@testtablespace@/some_basebackup_tablespace/100/GPDB_*/');
 count_of_items_in_directory 
-----------------------------
 2                           
(1 row)

-- Then we should have four files in newly created target tablespace under the some_database_without_tablespace, test, test_index, test_tmp, test_tmp_index
select count_of_items_in_database_directory('@testtablespace@/some_basebackup_tablespace/100/GPDB_*/', oid) from pg_database where datname='some_database_without_tablespace';
 count_of_items_in_database_directory 
--------------------------------------
 4                                    
(1 row)

-- Then we should have the tablespace symlink link to the mapped tablespace directory
select validate_tablespace_symlink('@testtablespace@/some_basebackup_datadir', '@testtablespace@/some_basebackup_tablespace', 100, oid) from pg_tablespace where spcname='some_basebackup_tablespace';
 validate_tablespace_symlink 
-----------------------------
 t                           
(1 row)

-- When we create a full backup again for the same target using force overwrite
select pg_basebackup(address, 100, port, 'some_replication_slot', '@testtablespace@/some_basebackup_datadir', true, 'stream') from gp_segment_configuration where content = 0 and role = 'p';
 pg_basebackup 
---------------
               
(1 row)

-- Then we should have two directories in newly created target tablespace, some_database_with_tablespace and some_database_without_tablespace
select count_of_items_in_directory('@testtablespace@/some_basebackup_tablespace/100/GPDB_*/');
 count_of_items_in_directory 
-----------------------------
 2                           
(1 row)

-- Then we should have four files in newly created target tablespace under the some_database_without_tablespace, test, test_index, test_tmp, test_tmp_index
select count_of_items_in_database_directory('@testtablespace@/some_basebackup_tablespace/100/GPDB_*/', oid) from pg_database where datname='some_database_without_tablespace';
 count_of_items_in_database_directory 
--------------------------------------
 4                                    
(1 row)

-- Then we should have the tablespace symlink link to the mapped tablespace directory
select validate_tablespace_symlink('@testtablespace@/some_basebackup_datadir', '@testtablespace@/some_basebackup_tablespace', 100, oid) from pg_tablespace where spcname='some_basebackup_tablespace';
 validate_tablespace_symlink 
-----------------------------
 t                           
(1 row)

2q: ... <quitting>

-- Cleanup things we've created
0U: select pg_drop_replication_slot('some_replication_slot');
 pg_drop_replication_slot 
--------------------------
                          
(1 row)
drop database some_database_with_tablespace;
DROP
drop database some_database_without_tablespace;
DROP
drop tablespace some_basebackup_tablespace;
DROP
!\retcode rm -rf @testtablespace@/some_basebackup_datadir/;
-- start_ignore

-- end_ignore
(exited with code 0)
!\retcode rm -rf @testtablespace@/some_basebackup_tablespace/100;
-- start_ignore

-- end_ignore
(exited with code 0)

-- Given a segment (content=0) with a tablespace mapped to a location different from that of other segments
!\retcode mkdir -p @testtablespace@/some_basebackup_tablespace;
-- start_ignore

-- end_ignore
(exited with code 0)
!\retcode mkdir -p @testtablespace@/some_basebackup_tablespace_c0;
-- start_ignore

-- end_ignore
(exited with code 0)
!\retcode mkdir -p @testtablespace@/some_basebackup_datadir;
-- start_ignore

-- end_ignore
(exited with code 0)

create tablespace some_basebackup_tablespace LOCATION '@testtablespace@/some_basebackup_tablespace' WITH (content0='@testtablespace@/some_basebackup_tablespace_c0');
CREATE

-- And a database without using the tablespace
drop database if exists some_database_without_tablespace;
DROP
create database some_database_without_tablespace;
CREATE

-- And a table and index, temp table and index using the tablespace
1:@db_name some_database_without_tablespace: CREATE TABLE test(a INT, b INT) TABLESPACE some_basebackup_tablespace;
CREATE
1:@db_name some_database_without_tablespace: CREATE INDEX test_index on test(a) TABLESPACE some_basebackup_tablespace;
CREATE
2:@db_name some_database_without_tablespace: CREATE TEMP TABLE test_tmp(a INT, b INT) TABLESPACE some_basebackup_tablespace;
CREATE
2:@db_name some_database_without_tablespace: CREATE INDEX test_tmp_index on test_tmp(a) TABLESPACE some_basebackup_tablespace;
CREATE

1q: ... <quitting>

-- When we create a full backup
select pg_basebackup(address, 100, port, 'some_replication_slot', '@testtablespace@/some_basebackup_datadir', false, 'stream') from gp_segment_configuration where content = 0 and role = 'p';
 pg_basebackup 
---------------
               
(1 row)

-- Then we should have one directory in the newly created target tablespace, some_database_without_tablespace
select count_of_items_in_directory('@testtablespace@/some_basebackup_tablespace_c0/100/GPDB_*/');
 count_of_items_in_directory 
-----------------------------
 1                           
(1 row)

-- Then we should have six directories under some_basebackup_tablespace - db id = {1, 3, 4, 6, 7, 8}. 100 should not be present.
select count_of_items_in_directory('@testtablespace@/some_basebackup_tablespace');
 count_of_items_in_directory 
-----------------------------
 6                           
(1 row)

-- Then we should have the tablespace symlink link to the mapped tablespace directory
select validate_tablespace_symlink('@testtablespace@/some_basebackup_datadir', '@testtablespace@/some_basebackup_tablespace_c0', 100, oid) from pg_tablespace where spcname='some_basebackup_tablespace';
 validate_tablespace_symlink 
-----------------------------
 t                           
(1 row)

2q: ... <quitting>

-- Cleanup things we've created
0U: select pg_drop_replication_slot('some_replication_slot');
 pg_drop_replication_slot 
--------------------------
                          
(1 row)
drop database some_database_without_tablespace;
DROP
drop tablespace some_basebackup_tablespace;
DROP
!\retcode rm -rf @testtablespace@/some_basebackup_datadir/;
-- start_ignore

-- end_ignore
(exited with code 0)
!\retcode rm -rf @testtablespace@/some_basebackup_tablespace_c0/100;
-- start_ignore

-- end_ignore
(exited with code 0)

