DROP ROLE IF EXISTS role1_memory_test;
DROP
DROP ROLE IF EXISTS role2_memory_test;
DROP
-- start_ignore
DROP RESOURCE GROUP rg1_memory_test;
ERROR:  resource group "rg1_memory_test" does not exist
DROP RESOURCE GROUP rg2_memory_test;
ERROR:  resource group "rg2_memory_test" does not exist
-- end_ignore

CREATE OR REPLACE FUNCTION repeatPalloc(int, int) RETURNS int AS '@abs_builddir@/../regress/regress@DLSUFFIX@', 'repeatPalloc' LANGUAGE C READS SQL DATA;
CREATE

CREATE OR REPLACE FUNCTION hold_memory(int, int) RETURNS int AS $$ SELECT * FROM repeatPalloc(1, $2) $$ LANGUAGE sql;
CREATE

CREATE OR REPLACE VIEW eat_memory_on_qd AS SELECT hold_memory(0,20);
CREATE

CREATE OR REPLACE VIEW eat_memory_on_one_slice AS SELECT count(null) FROM gp_dist_random('gp_id') t1 WHERE hold_memory(t1.dbid,20)=0 ;
CREATE

CREATE OR REPLACE VIEW eat_memory_on_slices AS SELECT count(null) FROM gp_dist_random('gp_id') t1, gp_dist_random('gp_id') t2 WHERE hold_memory(t1.dbid,20)=0 AND hold_memory(t2.dbid,20)=0 ;
CREATE

CREATE OR REPLACE FUNCTION round_test(float, integer) RETURNS float AS $$ SELECT round($1 / $2) * $2 $$ LANGUAGE sql;
CREATE

CREATE OR REPLACE VIEW memory_result AS SELECT rsgname, ismaster, round_test(avg(memory_usage), 10) AS avg_mem FROM( SELECT rsgname, CASE (j->'key')::text WHEN '"-1"'::text THEN 1 ELSE 0 END AS ismaster, ((j->'value')->>'used')::int AS memory_usage FROM( SELECT rsgname, row_to_json(json_each(memory_usage::json)) AS j FROM gp_toolkit.gp_resgroup_status WHERE rsgname='rg1_memory_test' OR rsgname='rg2_memory_test' )a )b GROUP BY (rsgname, ismaster) ORDER BY rsgname, ismaster;
CREATE

CREATE RESOURCE GROUP rg1_memory_test WITH (concurrency=2, cpu_rate_limit=10, memory_limit=30);
CREATE
CREATE ROLE role1_memory_test RESOURCE GROUP rg1_memory_test;
CREATE
CREATE RESOURCE GROUP rg2_memory_test WITH (concurrency=2, cpu_rate_limit=10, memory_limit=30);
CREATE
CREATE ROLE role2_memory_test RESOURCE GROUP rg2_memory_test;
CREATE

GRANT ALL ON eat_memory_on_qd TO role1_memory_test;
GRANT
GRANT ALL ON eat_memory_on_one_slice TO role1_memory_test;
GRANT
GRANT ALL ON eat_memory_on_slices TO role1_memory_test;
GRANT
GRANT ALL ON memory_result TO role1_memory_test;
GRANT

GRANT ALL ON eat_memory_on_qd TO role2_memory_test;
GRANT
GRANT ALL ON eat_memory_on_one_slice TO role2_memory_test;
GRANT
GRANT ALL ON eat_memory_on_slices TO role2_memory_test;
GRANT
GRANT ALL ON memory_result TO role2_memory_test;
GRANT

-- 1.1) QD only in transaction
1: SET ROLE TO role1_memory_test;
SET
-- check initial state
SELECT * FROM memory_result;
 rsgname         | ismaster | avg_mem 
-----------------+----------+---------
 rg1_memory_test | 0        | 0.0     
 rg1_memory_test | 1        | 0.0     
 rg2_memory_test | 0        | 0.0     
 rg2_memory_test | 1        | 0.0     
(4 rows)
1: BEGIN;
BEGIN
1: SELECT * FROM eat_memory_on_qd;
 hold_memory 
-------------
 0           
(1 row)
SELECT * FROM memory_result;
 rsgname         | ismaster | avg_mem 
-----------------+----------+---------
 rg1_memory_test | 0        | 0.0     
 rg1_memory_test | 1        | 20.0    
 rg2_memory_test | 0        | 0.0     
 rg2_memory_test | 1        | 0.0     
(4 rows)
1q: ... <quitting>

-- 1.2) QD only
1: SET ROLE TO role1_memory_test;
SET
-- check initial state
SELECT * FROM memory_result;
 rsgname         | ismaster | avg_mem 
-----------------+----------+---------
 rg1_memory_test | 0        | 0.0     
 rg1_memory_test | 1        | 0.0     
 rg2_memory_test | 0        | 0.0     
 rg2_memory_test | 1        | 0.0     
(4 rows)
1: SELECT * FROM eat_memory_on_qd;
 hold_memory 
-------------
 0           
(1 row)
SELECT * FROM memory_result;
 rsgname         | ismaster | avg_mem 
-----------------+----------+---------
 rg1_memory_test | 0        | 0.0     
 rg1_memory_test | 1        | 0.0     
 rg2_memory_test | 0        | 0.0     
 rg2_memory_test | 1        | 0.0     
(4 rows)
1q: ... <quitting>

-- 2.1) QEs on one slice
1: SET ROLE TO role1_memory_test;
SET
1: SELECT 1 FROM eat_memory_on_one_slice;
 ?column? 
----------
 1        
(1 row)
SELECT * FROM memory_result;
 rsgname         | ismaster | avg_mem 
-----------------+----------+---------
 rg1_memory_test | 0        | 0.0     
 rg1_memory_test | 1        | 0.0     
 rg2_memory_test | 0        | 0.0     
 rg2_memory_test | 1        | 0.0     
(4 rows)
1q: ... <quitting>

-- 2.2) QEs on one slice in transaction
1: SET ROLE TO role1_memory_test;
SET
1: BEGIN;
BEGIN
1: SELECT 1 FROM eat_memory_on_one_slice;
 ?column? 
----------
 1        
(1 row)
SELECT * FROM memory_result;
 rsgname         | ismaster | avg_mem 
-----------------+----------+---------
 rg1_memory_test | 0        | 20.0    
 rg1_memory_test | 1        | 0.0     
 rg2_memory_test | 0        | 0.0     
 rg2_memory_test | 1        | 0.0     
(4 rows)
1q: ... <quitting>

-- 2.3) QEs on one slice change resource group
1: SET ROLE TO role1_memory_test;
SET
1: SELECT 1 FROM eat_memory_on_one_slice;
 ?column? 
----------
 1        
(1 row)
SELECT * FROM memory_result;
 rsgname         | ismaster | avg_mem 
-----------------+----------+---------
 rg1_memory_test | 0        | 0.0     
 rg1_memory_test | 1        | 0.0     
 rg2_memory_test | 0        | 0.0     
 rg2_memory_test | 1        | 0.0     
(4 rows)
1: SET ROLE TO role2_memory_test;
SET
1: SELECT 1 FROM eat_memory_on_one_slice;
 ?column? 
----------
 1        
(1 row)
SELECT * FROM memory_result;
 rsgname         | ismaster | avg_mem 
-----------------+----------+---------
 rg1_memory_test | 0        | 0.0     
 rg1_memory_test | 1        | 0.0     
 rg2_memory_test | 0        | 0.0     
 rg2_memory_test | 1        | 0.0     
(4 rows)
1q: ... <quitting>

-- 3) QEs on multiple slices
1: SET ROLE TO role1_memory_test;
SET
1: SELECT 1 FROM eat_memory_on_slices;
 ?column? 
----------
 1        
(1 row)
SELECT * FROM memory_result;
 rsgname         | ismaster | avg_mem 
-----------------+----------+---------
 rg1_memory_test | 0        | 0.0     
 rg1_memory_test | 1        | 0.0     
 rg2_memory_test | 0        | 0.0     
 rg2_memory_test | 1        | 0.0     
(4 rows)
1q: ... <quitting>

-- recheck after cleanup
SELECT * FROM memory_result;
 rsgname         | ismaster | avg_mem 
-----------------+----------+---------
 rg1_memory_test | 0        | 0.0     
 rg1_memory_test | 1        | 0.0     
 rg2_memory_test | 0        | 0.0     
 rg2_memory_test | 1        | 0.0     
(4 rows)

-- 4) single role concurrency test
1: SET ROLE TO role1_memory_test;
SET
2: SET ROLE TO role1_memory_test;
SET
-- QEs on multiple slices
1: SELECT 1 FROM eat_memory_on_slices;
 ?column? 
----------
 1        
(1 row)
2: SELECT 1 FROM eat_memory_on_slices;
 ?column? 
----------
 1        
(1 row)
SELECT * FROM memory_result;
 rsgname         | ismaster | avg_mem 
-----------------+----------+---------
 rg1_memory_test | 0        | 0.0     
 rg1_memory_test | 1        | 0.0     
 rg2_memory_test | 0        | 0.0     
 rg2_memory_test | 1        | 0.0     
(4 rows)
1q: ... <quitting>
2q: ... <quitting>

-- 5) multi role concurrency test
1: SET ROLE TO role1_memory_test;
SET
2: SET ROLE TO role2_memory_test;
SET
-- QEs on multiple slices
1: SELECT * FROM eat_memory_on_slices;
 count 
-------
 0     
(1 row)
2: SELECT * FROM eat_memory_on_slices;
 count 
-------
 0     
(1 row)
SELECT * FROM memory_result;
 rsgname         | ismaster | avg_mem 
-----------------+----------+---------
 rg1_memory_test | 0        | 0.0     
 rg1_memory_test | 1        | 0.0     
 rg2_memory_test | 0        | 0.0     
 rg2_memory_test | 1        | 0.0     
(4 rows)
1q: ... <quitting>
2q: ... <quitting>

-- cleanup
REVOKE ALL ON eat_memory_on_qd FROM role1_memory_test;
REVOKE
REVOKE ALL ON eat_memory_on_one_slice FROM role1_memory_test;
REVOKE
REVOKE ALL ON eat_memory_on_slices FROM role1_memory_test;
REVOKE
REVOKE ALL ON memory_result FROM role1_memory_test;
REVOKE

REVOKE ALL ON eat_memory_on_qd FROM role2_memory_test;
REVOKE
REVOKE ALL ON eat_memory_on_one_slice FROM role2_memory_test;
REVOKE
REVOKE ALL ON eat_memory_on_slices FROM role2_memory_test;
REVOKE
REVOKE ALL ON memory_result FROM role2_memory_test;
REVOKE

ALTER ROLE role1_memory_test RESOURCE GROUP none;
ALTER
ALTER ROLE role2_memory_test RESOURCE GROUP none;
ALTER

DROP ROLE role1_memory_test;
DROP
DROP ROLE role2_memory_test;
DROP
DROP RESOURCE GROUP rg1_memory_test;
DROP
DROP RESOURCE GROUP rg2_memory_test;
DROP
DROP VIEW memory_result;
DROP
