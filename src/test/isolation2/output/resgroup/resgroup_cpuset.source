
CREATE LANGUAGE plpythonu;
CREATE
CREATE EXTENSION IF NOT EXISTS gp_inject_fault;
CREATE

CREATE RESOURCE GROUP rg1_cpuset_test WITH (memory_limit = 10, cpuset='0');
CREATE
CREATE ROLE role1_cpuset_test RESOURCE GROUP rg1_cpuset_test;
CREATE

-- check whether the queries running in the specific group on the specific core set
-- @param grp: the resource group queries running in
-- @param cpuset: cpu cores which the queries should only be run on them, e.g. 0,1
-- @return bool: true/false indicating whether it corresponds to the rule
CREATE FUNCTION check_cpuset(grp TEXT, cpuset TEXT) RETURNS BOOL AS $$ import subprocess import pygresql.pg as pg import time import re 
conn = pg.connect(dbname="isolation2resgrouptest") pt = re.compile(r'con(\d+)') 
def check(expect_cpus, sess_ids): procs = subprocess.check_output(['ps', '-eF']).split('\n') head, proc_stats = procs[0], procs[1:] PSR = [id for id, attr in enumerate(head.split()) if attr.strip() == 'PSR'][0] cpus = [proc_stat.split()[PSR].strip() for proc_stat in proc_stats if 'postgres' in proc_stat and pt.findall(proc_stat) and set(pt.findall(proc_stat)).issubset(sess_ids)] return set(cpus).issubset(set(expect_cpus)) 
def get_all_sess_ids_in_group(group_name): sql = "select sess_id from pg_stat_activity where rsgname = '%s'" % group_name result = conn.query(sql).getresult() return set([str(r[0]) for r in result]) 
expect_cpu = [] conf = cpuset if conf == '': fd = open("@cgroup_mnt_point@/cpuset/gpdb/cpuset.cpus") line = fd.readline() fd.close() conf = line.strip('\n') 
tokens = conf.split(",") for token in tokens: if token.find('-') != -1: interval = token.split("-") num1 = interval[0] num2 = interval[1] for num in range(int(num1), int(num2) + 1): expect_cpu.append(str(num)) else: expect_cpu.append(token) sess_ids = get_all_sess_ids_in_group(grp) 
for i in xrange(1000): time.sleep(0.01) if not check(expect_cpu, sess_ids): return False 
return True $$ LANGUAGE plpythonu;
CREATE

-- create a resource group that contains all the cpu cores
CREATE FUNCTION create_allcores_group(grp TEXT) RETURNS BOOL AS $$ import pygresql.pg as pg conn = pg.connect(dbname="isolation2resgrouptest") file = "@cgroup_mnt_point@/cpuset/gpdb/cpuset.cpus" fd = open(file) line = fd.readline() fd.close() line = line.strip('\n') sql = "create resource group " + grp + " with (" \ + "memory_limit=1, cpuset='" + line + "')" result = conn.query(sql) 
file = "@cgroup_mnt_point@/cpuset/gpdb/1/cpuset.cpus" fd = open(file) line = fd.readline() fd.close() line = line.strip('\n') if line != "0": return False 
return True $$ LANGUAGE plpythonu;
CREATE

-- check whether the cpuset value in cgroup is valid according to the rule
CREATE FUNCTION check_rules() RETURNS BOOL AS $$ import pygresql.pg as pg 
def get_all_group_which_cpuset_is_set(): sql = "select groupid,cpuset from gp_toolkit.gp_resgroup_config where cpuset != '-1'" result = conn.query(sql).getresult() return result 
def parse_cpuset(line): line = line.strip('\n') if len(line) == 0: return set([]) tokens = line.split(",") cpuset = [] for token in tokens: if token.find('-') != -1: interval = token.split("-") num1 = interval[0] num2 = interval[1] for num in range(int(num1), int(num2) + 1): cpuset.append(str(num)) else: cpuset.append(token) return set(cpuset) 
def get_cgroup_cpuset(group): group = str(group) if group == '0': file = "@cgroup_mnt_point@/cpuset/gpdb/cpuset.cpus" else: file = "@cgroup_mnt_point@/cpuset/gpdb/" + group + "/cpuset.cpus" fd = open(file) line = fd.readline() fd.close() return parse_cpuset(line) 
conn = pg.connect(dbname="isolation2resgrouptest") config_groups = get_all_group_which_cpuset_is_set() groups_cpuset = set([]) # check whether cpuset in config and cgroup are same, and have no overlap for config_group in config_groups: groupid = config_group[0] cpuset_value = config_group[1] config_cpuset = parse_cpuset(cpuset_value) cgroup_cpuset = get_cgroup_cpuset(groupid) if len(groups_cpuset & cgroup_cpuset) > 0: return False groups_cpuset |= cgroup_cpuset if not(config_cpuset.issubset(cgroup_cpuset) and cgroup_cpuset.issubset(config_cpuset)): return False # check whether cpuset in resource group union default group is universal set default_cpuset = get_cgroup_cpuset(1) all_cpuset = get_cgroup_cpuset(0) if not (default_cpuset | groups_cpuset).issubset(all_cpuset): return False if not all_cpuset.issubset(default_cpuset | groups_cpuset): return False # if all the cores are allocated to resource group, default group must has a core left if len(default_cpuset & groups_cpuset) > 0 and \ (len(default_cpuset) != 1 or \ (not default_cpuset.issubset(all_cpuset))): return False 
return True $$ LANGUAGE plpythonu;
CREATE

CREATE TABLE bigtable AS SELECT i AS c1, 'abc' AS c2 FROM generate_series(1,50000) i;
CREATE 50000

CREATE VIEW busy AS SELECT count(*) FROM bigtable t1, bigtable t2, bigtable t3, bigtable t4, bigtable t5 WHERE 0 = (t1.c1 % 2 + 10000)! AND 0 = (t2.c1 % 2 + 10000)! AND 0 = (t3.c1 % 2 + 10000)! AND 0 = (t4.c1 % 2 + 10000)! AND 0 = (t5.c1 % 2 + 10000)! ;
CREATE

CREATE VIEW cancel_all AS SELECT pg_cancel_backend(pid) FROM pg_stat_activity WHERE query LIKE 'SELECT * FROM busy%';
CREATE

GRANT ALL ON busy TO role1_cpuset_test;
GRANT

-- we suppose core 0 & 1 are available

10: SET ROLE TO role1_cpuset_test;
SET
10: BEGIN;
BEGIN
10&: SELECT * FROM busy;  <waiting ...>

select pg_sleep(2);
 pg_sleep 
----------
          
(1 row)

11: BEGIN;
BEGIN
11: SELECT check_cpuset('rg1_cpuset_test', '0');
 check_cpuset 
--------------
 t            
(1 row)

ALTER RESOURCE GROUP rg1_cpuset_test SET cpuset '1';
ALTER
select pg_sleep(2);
 pg_sleep 
----------
          
(1 row)

11: SELECT check_cpuset('rg1_cpuset_test', '1');
 check_cpuset 
--------------
 t            
(1 row)

ALTER RESOURCE GROUP rg1_cpuset_test SET cpuset '0,1';
ALTER
select pg_sleep(2);
 pg_sleep 
----------
          
(1 row)

11: SELECT check_cpuset('rg1_cpuset_test', '0,1');
 check_cpuset 
--------------
 t            
(1 row)
11: END;
END

-- change to cpu_rate_limit while the transaction is running
ALTER RESOURCE GROUP rg1_cpuset_test SET cpu_rate_limit 10;
ALTER

-- cancel the transaction
-- start_ignore
select * from cancel_all;
 pg_cancel_backend 
-------------------
 t                 
(1 row)

10<:  <... completed>
ERROR:  canceling statement due to user request
10q: ... <quitting>
11q: ... <quitting>
-- end_ignore

-- test whether the cpu_rate_limit had taken effect
10: SET ROLE TO role1_cpuset_test;
SET
10: BEGIN;
BEGIN
10&: SELECT * FROM busy;  <waiting ...>

select pg_sleep(2);
 pg_sleep 
----------
          
(1 row)

11: BEGIN;
BEGIN
11: SELECT check_cpuset('rg1_cpuset_test', '');
 check_cpuset 
--------------
 t            
(1 row)

-- cancel the transaction
-- start_ignore
select * from cancel_all;
 pg_cancel_backend 
-------------------
 t                 
(1 row)

10<:  <... completed>
ERROR:  canceling statement due to user request
10q: ... <quitting>
11q: ... <quitting>
-- end_ignore

-- test cpu_usage
10: SET ROLE TO role1_cpuset_test;
SET
10: BEGIN;
BEGIN
10&: SELECT * FROM busy;  <waiting ...>

select pg_sleep(2);
 pg_sleep 
----------
          
(1 row)

11: BEGIN;
BEGIN
11: select (cpu_usage::json->>'0')::float > 50 from gp_toolkit.gp_resgroup_status where rsgname='rg1_cpuset_test';
 ?column? 
----------
 t        
(1 row)
-- cancel the transaction
-- start_ignore
select * from cancel_all;
 pg_cancel_backend 
-------------------
 t                 
(1 row)

10<:  <... completed>
ERROR:  canceling statement due to user request
10q: ... <quitting>
11q: ... <quitting>
-- end_ignore

-- positive: cgroup cpuset must correspond to config cpuset
-- default group value must be valid
-- suppose the cores numbered 0 & 1 are available
SELECT check_rules();
 check_rules 
-------------
 t           
(1 row)
CREATE RESOURCE GROUP rg1_test_group WITH (memory_limit=10, cpuset='0');
CREATE
SELECT check_rules();
 check_rules 
-------------
 t           
(1 row)
CREATE RESOURCE GROUP rg2_test_group WITH (memory_limit=10, cpuset='1');
CREATE
SELECT check_rules();
 check_rules 
-------------
 t           
(1 row)
ALTER RESOURCE GROUP rg1_test_group SET cpu_rate_limit 1;
ALTER
SELECT check_rules();
 check_rules 
-------------
 t           
(1 row)
ALTER RESOURCE GROUP rg1_test_group SET cpuset '0';
ALTER
SELECT check_rules();
 check_rules 
-------------
 t           
(1 row)
ALTER RESOURCE GROUP rg1_test_group SET cpu_rate_limit 1;
ALTER
SELECT check_rules();
 check_rules 
-------------
 t           
(1 row)
DROP RESOURCE GROUP rg1_test_group;
DROP
SELECT check_rules();
 check_rules 
-------------
 t           
(1 row)
DROP RESOURCE GROUP rg2_test_group;
DROP
SELECT check_rules();
 check_rules 
-------------
 t           
(1 row)
-- positive: create a resource group contains all cpu core
-- the minimum numbered core left in default cpuset group
SELECT create_allcores_group('rg1_test_group');
 create_allcores_group 
-----------------------
 t                     
(1 row)
SELECT check_rules();
 check_rules 
-------------
 t           
(1 row)
DROP RESOURCE GROUP rg1_test_group;
DROP
SELECT check_rules();
 check_rules 
-------------
 t           
(1 row)
-- negative: simulate DDL fail
-- create fail
SELECT gp_inject_fault('create_resource_group_fail', 'error', 1);
 gp_inject_fault 
-----------------
 Success:        
(1 row)
CREATE RESOURCE GROUP rg1_test_group WITH (memory_limit=10, cpuset='0');
ERROR:  fault triggered, fault name:'create_resource_group_fail' fault type:'error'
SELECT groupid, groupname, cpuset FROM gp_toolkit.gp_resgroup_config WHERE cpuset != '-1';
 groupid | groupname | cpuset 
---------+-----------+--------
(0 rows)
SELECT check_rules();
 check_rules 
-------------
 t           
(1 row)
SELECT gp_inject_fault('create_resource_group_fail', 'reset', 1);
 gp_inject_fault 
-----------------
 Success:        
(1 row)

REVOKE ALL ON busy FROM role1_cpuset_test;
REVOKE
DROP ROLE role1_cpuset_test;
DROP
DROP RESOURCE GROUP rg1_cpuset_test;
DROP
DROP FUNCTION check_rules();
DROP
DROP FUNCTION check_cpuset(TEXT, TEXT);
DROP
DROP FUNCTION create_allcores_group(TEXT);
DROP
DROP LANGUAGE plpythonu CASCADE;
DROP
DROP VIEW cancel_all;
DROP
DROP VIEW busy;
DROP
DROP TABLE bigtable;
DROP
