1:CREATE EXTENSION IF NOT EXISTS gp_inject_fault;
CREATE
1:CREATE TABLE crash_test_redundant(c1 int);
CREATE

1:SELECT role, preferred_role, content, mode, status FROM gp_segment_configuration;
 role | preferred_role | content | mode | status 
------+----------------+---------+------+--------
 m    | m              | -1      | s    | u      
 m    | m              | 0       | s    | u      
 m    | m              | 1       | s    | u      
 m    | m              | 2       | s    | u      
 p    | p              | -1      | n    | u      
 p    | p              | 0       | s    | u      
 p    | p              | 1       | s    | u      
 p    | p              | 2       | s    | u      
(8 rows)
-- transaction of session 2 suspend after inserted 'COMMIT' record
1:select gp_inject_fault_infinite('dtm_broadcast_commit_prepared', 'suspend', 1);
 gp_inject_fault_infinite 
--------------------------
 Success:                 
(1 row)
-- checkpoint suspend before scanning proc array
1:select gp_inject_fault_infinite('checkpoint_dtx_info', 'suspend', 1);
 gp_inject_fault_infinite 
--------------------------
 Success:                 
(1 row)
1&:CHECKPOINT;  <waiting ...>

-- wait till checkpoint reaches intended point
2:select gp_wait_until_triggered_fault('checkpoint_dtx_info', 1, 1);
 gp_wait_until_triggered_fault 
-------------------------------
 Success:                      
(1 row)
-- the 'COMMIT' record is logically after REDO pointer
2&:insert into crash_test_redundant values (1);  <waiting ...>

-- resume checkpoint
3:select gp_inject_fault('checkpoint_dtx_info', 'reset', 1);
 gp_inject_fault 
-----------------
 Success:        
(1 row)
1<:  <... completed>
CHECKPOINT

-- wait till insert reaches intended point
1:select gp_wait_until_triggered_fault('dtm_broadcast_commit_prepared', 1, 1);
 gp_wait_until_triggered_fault 
-------------------------------
 Success:                      
(1 row)
-- trigger crash
1:select gp_inject_fault('before_read_command', 'panic', 1);
 gp_inject_fault 
-----------------
 Success:        
(1 row)
-- start_ignore
-- We ignore the output here because PANIC output is intermittent and is
-- unrelated to this test. Test simply cares to trigger fault.
1:select 1;
PANIC:  fault triggered, fault name:'before_read_command' fault type:'panic'
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
-- end_ignore

2<:  <... completed>
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.

-- transaction of session 2 should be recovered properly
4:select * from crash_test_redundant;
 c1 
----
 1  
(1 row)
