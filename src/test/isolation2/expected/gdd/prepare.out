
-- t0r is the reference table to provide the data distribution info.
DROP TABLE IF EXISTS t0p;
DROP
CREATE TABLE t0p (id int, val int);
CREATE
INSERT INTO t0p (id, val) SELECT i, i FROM generate_series(1, 100) i;
INSERT 100

DROP TABLE IF EXISTS t0r;
DROP
CREATE TABLE t0r (id int, val int, segid int) DISTRIBUTED REPLICATED;
CREATE
INSERT INTO t0r (id, val, segid) SELECT id, val, gp_segment_id from t0p;
INSERT 100

-- GDD tests rely on the data distribution, but depends on the number of
-- the segments the distribution might be different.
-- so we provide this helper function to return the nth id on a segment.
-- * `seg` is the segment id, starts from 0;
-- * `idx` is the index on the segment, starts from 1;
CREATE OR REPLACE FUNCTION segid(seg int, idx int) RETURNS int AS $$ SELECT id FROM t0r WHERE segid=$1 ORDER BY id LIMIT 1 OFFSET ($2-1) $$ LANGUAGE sql;
CREATE

-- In some of the testcases the execution order of two background queries
-- must be enforced not only on master but also on segments, for example
-- in below case the order of 10 and 20 on segments results in different
-- waiting relations:
--
--     30: UPDATE t SET val=val WHERE id=1;
--     10&: UPDATE t SET val=val WHERE val=1;
--     20&: UPDATE t SET val=val WHERE val=1;
--
-- There is no perfect way to ensure this.  The '&' command in the isolation2
-- framework only ensures that the QD is being blocked, but this might not be
-- true on segments.  In fact on slow machines this exception occurs quite
-- offen on heave load. (e.g. when multiple testcases are executed in parallel)
--
-- So we provide this barrier function to ensure the execution order.
-- It's implemented with sleep now, but should at least work.
CREATE OR REPLACE FUNCTION barrier() RETURNS void AS $$ SELECT pg_sleep(4) $$ LANGUAGE sql;
CREATE

-- verify the function
-- Data distribution is sensitive to the underlying hash algorithm, we need each
-- segment has enough tuples for test, 10 should be enough.
SELECT segid(0,10) is not null;
 ?column? 
----------
 t        
(1 row)
SELECT segid(1,10) is not null;
 ?column? 
----------
 t        
(1 row)
SELECT segid(2,10) is not null;
 ?column? 
----------
 t        
(1 row)

-- start_ignore
! gpconfig -c gp_global_deadlock_detector_period -v 10;
20180313:15:24:17:085127 gpconfig:zlv:gpadmin-[INFO]:-completed successfully with parameters '-c gp_global_deadlock_detector_period -v 10'

! gpstop -u;
20180313:15:24:17:085283 gpstop:zlv:gpadmin-[INFO]:-Starting gpstop with args: -u
20180313:15:24:17:085283 gpstop:zlv:gpadmin-[INFO]:-Gathering information and validating the environment...
20180313:15:24:17:085283 gpstop:zlv:gpadmin-[INFO]:-Obtaining Greenplum Master catalog information
20180313:15:24:17:085283 gpstop:zlv:gpadmin-[INFO]:-Obtaining Segment details from master...
20180313:15:24:17:085283 gpstop:zlv:gpadmin-[INFO]:-Greenplum Version: 'postgres (Greenplum Database) 6.0.0-alpha.0+dev.3836.g671368b build dev-oss'
20180313:15:24:17:085283 gpstop:zlv:gpadmin-[INFO]:-Signalling all postmaster processes to reload
. 

-- end_ignore

-- the new setting need some time to be loaded
SELECT pg_sleep(2);
 pg_sleep 
----------
          
(1 row)

SHOW gp_global_deadlock_detector_period;
 gp_global_deadlock_detector_period 
------------------------------------
 10s                                
(1 row)
