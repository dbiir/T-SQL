DROP TABLE IF EXISTS t105;
DROP
CREATE TABLE t105 (id int, val int);
CREATE
INSERT INTO t105 (id, val) SELECT i, i FROM generate_series(1, 100) i;
INSERT 100

10: BEGIN;
BEGIN
20: BEGIN;
BEGIN
30: BEGIN;
BEGIN

30: UPDATE t105 SET val=30 WHERE id=segid(1,1);
UPDATE 1

10: UPDATE t105 SET val=10 WHERE val=segid(0,2);
UPDATE 1

-- seg 0: con20 ==> con10, xid lock
-- seg 1: con20 ==> con30, xid lock
20&: UPDATE t105 SET val=20 WHERE val=segid(0,2) OR id=segid(1,1);  <waiting ...>

SELECT barrier();
 barrier 
---------
         
(1 row)

-- seg 1: con10 ~~> con20, tuple lock
10&: UPDATE t105 SET val=10 WHERE val=segid(1,1);  <waiting ...>

-- so far there is no deadlock yet as con30 is idle in transaction
SELECT pg_sleep(20);
 pg_sleep 
----------
          
(1 row)

-- when con30 quits the edge from con10 to con20 on seg 1 will change:
-- seg 1: con10 ==> con20, xid lock
-- then a global deadlock is formed
30q: ... <quitting>

-- con20 will be cancelled by gdd
20<:  <... completed>
ERROR:  canceling statement due to user request: "cancelled by global deadlock detector"
20q: ... <quitting>

-- no more deadlock
10<:  <... completed>
UPDATE 1
10q: ... <quitting>
