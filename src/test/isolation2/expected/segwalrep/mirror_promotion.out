-- Tests mirror promotion triggered by FTS in 2 different scenarios.
--
-- 1st: Shut-down of primary and hence unavailability of primary
-- leading to mirror promotion. In this case the connection between
-- primary and mirror is disconnected prior to promotion and
-- walreceiver doesn't exist.
--
-- 2nd: Primary is alive but using fault injector simulated to not
-- respond to fts. This helps to validate fts time-out logic for
-- probes. Plus also mirror promotion triggered while connection
-- between primary and mirror is still alive and hence walreceiver
-- also exist during promotion.

create extension if not exists gp_inject_fault;
CREATE

include: helpers/server_helpers.sql;
CREATE

SELECT role, preferred_role, content, mode, status FROM gp_segment_configuration;
 role | preferred_role | content | mode | status 
------+----------------+---------+------+--------
 m    | m              | -1      | s    | u      
 m    | m              | 0       | s    | u      
 m    | m              | 1       | s    | u      
 m    | m              | 2       | s    | u      
 p    | p              | -1      | n    | u      
 p    | p              | 0       | s    | u      
 p    | p              | 1       | s    | u      
 p    | p              | 2       | s    | u      
(8 rows)
-- stop a primary in order to trigger a mirror promotion
select pg_ctl((select datadir from gp_segment_configuration c where c.role='p' and c.content=0), 'stop');
 pg_ctl                                               
------------------------------------------------------
 waiting for server to shut down done
server stopped
 
(1 row)

-- trigger failover
select gp_request_fts_probe_scan();
 gp_request_fts_probe_scan 
---------------------------
 t                         
(1 row)

-- expect: to see the content 0, preferred primary is mirror and it's down
-- the preferred mirror is primary and it's up and not-in-sync
select content, preferred_role, role, status, mode from gp_segment_configuration where content = 0;
 content | preferred_role | role | status | mode 
---------+----------------+------+--------+------
 0       | p              | m    | d      | n    
 0       | m              | p    | u      | n    
(2 rows)

-- wait for content 0 (earlier mirror, now primary) to finish the promotion
0U: select 1;
 ?column? 
----------
 1        
(1 row)
-- Quit this utility mode session, as need to start fresh one below
0Uq: ... <quitting>

-- fully recover the failed primary as new mirror
!\retcode gprecoverseg -aF --no-progress;
-- start_ignore
-- end_ignore
(exited with code 0)

-- loop while segments come in sync
do $$ begin /* in func */ for i in 1..120 loop /* in func */ if (select mode = 's' from gp_segment_configuration where content = 0 limit 1) then /* in func */ return; /* in func */ end if; /* in func */ perform gp_request_fts_probe_scan(); /* in func */ end loop; /* in func */ end; /* in func */ $$;
DO

-- expect: to see roles flipped and in sync
select content, preferred_role, role, status, mode from gp_segment_configuration where content = 0;
 content | preferred_role | role | status | mode 
---------+----------------+------+--------+------
 0       | m              | p    | u      | s    
 0       | p              | m    | u      | s    
(2 rows)

-- set GUCs to speed-up the test
!\retcode gpconfig -c gp_fts_probe_retries -v 2 --masteronly;
-- start_ignore
-- end_ignore
(exited with code 0)
!\retcode gpconfig -c gp_fts_probe_timeout -v 5 --masteronly;
-- start_ignore
-- end_ignore
(exited with code 0)
!\retcode gpstop -u;
-- start_ignore
-- end_ignore
(exited with code 0)

-- start_ignore
select dbid from gp_segment_configuration where content = 0 and role = 'p';
 dbid 
------
 5    
(1 row)
-- end_ignore

select gp_inject_fault_infinite('fts_handle_message', 'infinite_loop', dbid) from gp_segment_configuration where content = 0 and role = 'p';
 gp_inject_fault_infinite 
--------------------------
 Success:                 
(1 row)

-- trigger failover
select gp_request_fts_probe_scan();
 gp_request_fts_probe_scan 
---------------------------
 t                         
(1 row)

-- trigger one more probe right away which mostly results in sending
-- promotion request again to mirror, while its going through
-- promotion, which is nice condition to test as well.
select gp_request_fts_probe_scan();
 gp_request_fts_probe_scan 
---------------------------
 t                         
(1 row)

-- expect segments restored back to its preferred role, but mirror is down
select content, preferred_role, role, status, mode from gp_segment_configuration where content = 0;
 content | preferred_role | role | status | mode 
---------+----------------+------+--------+------
 0       | m              | m    | d      | n    
 0       | p              | p    | u      | n    
(2 rows)

-- set GUCs to speed-up the test
!\retcode gpconfig -r gp_fts_probe_retries --masteronly;
-- start_ignore

-- end_ignore
(exited with code 0)
!\retcode gpconfig -r gp_fts_probe_timeout --masteronly;
-- start_ignore

-- end_ignore
(exited with code 0)
!\retcode gpstop -u;
-- start_ignore
-- end_ignore
(exited with code 0)

-- -- wait for content 0 (earlier mirror, now primary) to finish the promotion
0U: select 1;
 ?column? 
----------
 1        
(1 row)

-- create tablespace to test if it works with gprecoverseg -F (pg_basebackup)
!\retcode mkdir -p /tmp/mirror_promotion_tablespace_loc;
-- start_ignore

-- end_ignore
(exited with code 0)
create tablespace mirror_promotion_tablespace location '/tmp/mirror_promotion_tablespace_loc';
CREATE
create table mirror_promotion_tblspc_heap_table (a int) tablespace mirror_promotion_tablespace;
CREATE

-- -- now, let's fully recover the mirror
!\retcode gprecoverseg -aF  --no-progress;
-- start_ignore
-- end_ignore
(exited with code 0)

drop table mirror_promotion_tblspc_heap_table;
DROP
drop tablespace mirror_promotion_tablespace;
DROP

-- loop while segments come in sync
do $$ begin /* in func */ for i in 1..120 loop /* in func */ if (select mode = 's' from gp_segment_configuration where content = 0 limit 1) then /* in func */ return; /* in func */ end if; /* in func */ perform gp_request_fts_probe_scan(); /* in func */ end loop; /* in func */ end; /* in func */ $$;
DO

-- now, the content 0 primary and mirror should be at their preferred role
-- and up and in-sync
select content, preferred_role, role, status, mode from gp_segment_configuration where content = 0;
 content | preferred_role | role | status | mode 
---------+----------------+------+--------+------
 0       | p              | p    | u      | s    
 0       | m              | m    | u      | s    
(2 rows)
