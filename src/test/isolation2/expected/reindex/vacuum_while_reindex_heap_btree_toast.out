DROP TABLE IF EXISTS reindex_toast_heap;
DROP

CREATE TABLE reindex_toast_heap (a text, b int); alter table reindex_toast_heap alter column a set storage external;
CREATE
insert into reindex_toast_heap select repeat('123456789',10000), i from generate_series(1,100) i;
INSERT 100
create index idx_btree_reindex_toast_heap on reindex_toast_heap(b);
CREATE
-- @Description Ensures that a vacuum during reindex operations is ok
--

DELETE FROM reindex_toast_heap WHERE b % 4 = 0 ;
DELETE 25
1: BEGIN;
BEGIN
-- Remember index relfilenodes from master and segments before
-- reindex.
1: create temp table old_relfilenodes as (select gp_segment_id as dbid, relfilenode, oid, relname from gp_dist_random('pg_class') where relname = 'idx_btree_reindex_toast_heap' union all select gp_segment_id as dbid, relfilenode, oid, relname from pg_class where relname = 'idx_btree_reindex_toast_heap');
CREATE 4
1: REINDEX index idx_btree_reindex_toast_heap;
REINDEX
2&: VACUUM reindex_toast_heap;  <waiting ...>
1: COMMIT;
COMMIT
2<:  <... completed>
VACUUM
-- Validate that reindex changed all index relfilenodes on master as well as
-- segments.  The following query should return 0 tuples.
1: select oldrels.* from old_relfilenodes oldrels join (select gp_segment_id as dbid, relfilenode, relname from gp_dist_random('pg_class') where relname = 'idx_btree_reindex_toast_heap' union all select gp_segment_id as dbid, relfilenode, relname from pg_class where relname = 'idx_btree_reindex_toast_heap') newrels on oldrels.relfilenode = newrels.relfilenode and oldrels.dbid = newrels.dbid and oldrels.relname = newrels.relname;
 dbid | relfilenode | oid | relname 
------+-------------+-----+---------
(0 rows)
2: COMMIT;
COMMIT
3: SELECT COUNT(*) FROM reindex_toast_heap WHERE a = '1500';
 count 
-------
 0     
(1 row)
3: INSERT INTO reindex_toast_heap VALUES (0);
INSERT 1
