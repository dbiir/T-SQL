-- Distributed snapshot tests

-- Scenario1: Test to validate GetSnapshotData()'s computation of globalXmin using
-- distributed snapshot. It mainly uses a old read-only transaction to help
-- create situation where globalXmin can be lower than distributed oldestXmin
-- when calling DistributedLog_AdvanceOldestXmin().

-- Setup
CREATE EXTENSION IF NOT EXISTS gp_inject_fault;
CREATE
CREATE TABLE distributed_snapshot_test1 (a int);
CREATE

1: BEGIN;
BEGIN
1: INSERT INTO distributed_snapshot_test1 values(1);
INSERT 1
-- Read transaction which helps to get lower globalXmin for session 3. As this
-- will have MyProc->xmin set to transaction 1's xid.
2: BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
BEGIN
2: SELECT * from distributed_snapshot_test1;
 a 
---
(0 rows)
-- Complete transaction 1, so that it no more appears in in-progress transaction
-- list for following transactions.
1: COMMIT;
COMMIT

-- Transaction to bump the latestCompletedXid
1: INSERT INTO distributed_snapshot_test1 values(1);
INSERT 1

-- Hold after walking over ProcArray in GetSnpashotData(), right at start of
-- DistributedLog_AdvanceOldestXmin()
1: SELECT gp_inject_fault('distributedlog_advance_oldest_xmin', 'suspend', '', 'postgres', '', 1, -1, 5, dbid) from gp_segment_configuration where content = 0 and role = 'p';
 gp_inject_fault 
-----------------
 Success:        
(1 row)
3&:@db_name postgres: SELECT count(*) > 0 from gp_dist_random('gp_id');  <waiting ...>
1: SELECT gp_wait_until_triggered_fault('distributedlog_advance_oldest_xmin', 1, dbid) from gp_segment_configuration where content = 0 and role = 'p';
 gp_wait_until_triggered_fault 
-------------------------------
 Success:                      
(1 row)
2: COMMIT;
COMMIT

-- Transaction used to bump the distributed oldestXmin
1: INSERT INTO distributed_snapshot_test1 values(1);
INSERT 1
-- let session 3 now move forward to compute distributed oldest xmin
1: SELECT gp_inject_fault('distributedlog_advance_oldest_xmin', 'reset', dbid) from gp_segment_configuration where content = 0 and role = 'p';
 gp_inject_fault 
-----------------
 Success:        
(1 row)
3<:  <... completed>
 ?column? 
----------
 t        
(1 row)

-- Scenario2: This scenario tests the boundary condition for Xmax in distributed snapshot

-- Setup
CREATE TABLE distributed_snapshot_test2 (a int);
CREATE

-- start transaction assigns distributed xid.
1: BEGIN ISOLATION LEVEL REPEATABLE READ;
BEGIN
-- this sets latestCompletedXid
2: INSERT INTO distributed_snapshot_test2 VALUES(1);
INSERT 1
-- here, take distributed snapshot
1: SELECT 123 AS "establish snapshot";
 establish snapshot 
--------------------
 123                
(1 row)
2: INSERT INTO distributed_snapshot_test2 VALUES(2);
INSERT 1
-- expected to see just VALUES(1)
1: SELECT * FROM distributed_snapshot_test2;
 a 
---
 1 
(1 row)
1: COMMIT;
COMMIT

DROP TABLE distributed_snapshot_test2;
DROP

-- Scenario3: Test the one-phase commit transactions don't break repeatable read isolation.
--
-- Direct dispatch causes the select statements to be dispatched only to one of
-- the three demo cluster segments. A segment acquires local snapshot only when it
-- receives the dispatched statement. If one phase commit relied on local
-- snapshots only, wrong results are possible depending on the order of local
-- snapshot acquisition by the segments. This scenario validates that distributed
-- snapshot is used by the segments to evaluate tuple visibility in case of
-- one-phase commit and correct results are returned.
--
-- connection 40 inserts 100, 100 and 300 serially using one-phase commit
-- protocol. Repeatable read transactions may read (100), (100,100) or
-- (100,100,300), but not (100, 300).
CREATE TABLE distributed_snapshot_test3 (a int);
CREATE
10: BEGIN ISOLATION LEVEL REPEATABLE READ;
BEGIN
20: BEGIN ISOLATION LEVEL REPEATABLE READ;
BEGIN
30: BEGIN ISOLATION LEVEL REPEATABLE READ;
BEGIN
40: INSERT INTO distributed_snapshot_test3 VALUES(100);
INSERT 1
10: SELECT gp_segment_id, * FROM distributed_snapshot_test3 where a = 100;
 gp_segment_id | a   
---------------+-----
 2             | 100 
(1 row)
40: INSERT INTO distributed_snapshot_test3 VALUES(100);
INSERT 1
30: SELECT 123 AS "establish snapshot";
 establish snapshot 
--------------------
 123                
(1 row)
40: INSERT INTO distributed_snapshot_test3 VALUES(300);
INSERT 1
10: SELECT gp_segment_id, * FROM distributed_snapshot_test3;
 gp_segment_id | a   
---------------+-----
 2             | 100 
(1 row)
20: SELECT gp_segment_id, * FROM distributed_snapshot_test3;
 gp_segment_id | a   
---------------+-----
 1             | 300 
 2             | 100 
 2             | 100 
(3 rows)
30: SELECT gp_segment_id, * FROM distributed_snapshot_test3;
 gp_segment_id | a   
---------------+-----
 2             | 100 
 2             | 100 
(2 rows)
10: COMMIT;
COMMIT
20: COMMIT;
COMMIT
30: COMMIT;
COMMIT
DROP TABLE distributed_snapshot_test3;
DROP
