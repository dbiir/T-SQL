-- test1: test gp_toolkit.gp_resgroup_status and pg_stat_activity
-- create a resource group when gp_resource_manager is queue
DROP ROLE IF EXISTS role_concurrency_test;
DROP
-- start_ignore
DROP RESOURCE GROUP rg_concurrency_test;
ERROR:  resource group "rg_concurrency_test" does not exist
-- end_ignore
CREATE RESOURCE GROUP rg_concurrency_test WITH (concurrency=2, cpu_rate_limit=20, memory_limit=20);
CREATE
CREATE ROLE role_concurrency_test RESOURCE GROUP rg_concurrency_test;
CREATE

-- no query has been assigned to the this group

SELECT r.rsgname, num_running, num_queueing, num_queued, num_executed FROM gp_toolkit.gp_resgroup_status s, pg_resgroup r WHERE s.groupid=r.oid AND r.rsgname='rg_concurrency_test';
 rsgname             | num_running | num_queueing | num_queued | num_executed 
---------------------+-------------+--------------+------------+--------------
 rg_concurrency_test | 0           | 0            | 0          | 0            
(1 row)
2:SET ROLE role_concurrency_test;
SET
2:BEGIN;
BEGIN
3:SET ROLE role_concurrency_test;
SET
3:BEGIN;
BEGIN
4:SET ROLE role_concurrency_test;
SET
4&:BEGIN;  <waiting ...>

-- new transaction will be blocked when the concurrency limit of the resource group is reached.
SELECT r.rsgname, num_running, num_queueing, num_queued, num_executed FROM gp_toolkit.gp_resgroup_status s, pg_resgroup r WHERE s.groupid=r.oid AND r.rsgname='rg_concurrency_test';
 rsgname             | num_running | num_queueing | num_queued | num_executed 
---------------------+-------------+--------------+------------+--------------
 rg_concurrency_test | 2           | 1            | 1          | 2            
(1 row)
SELECT waiting_reason, rsgqueueduration > '0'::interval as time from pg_stat_activity where query = 'BEGIN;' and state = 'active' and rsgname = 'rg_concurrency_test';
 waiting_reason | time 
----------------+------
 resgroup       | t    
(1 row)
2:END;
END
3:END;
END
4<:  <... completed>
BEGIN
4:END;
END
2q: ... <quitting>
3q: ... <quitting>
4q: ... <quitting>
SELECT r.rsgname, num_running, num_queueing, num_queued, num_executed FROM gp_toolkit.gp_resgroup_status s, pg_resgroup r WHERE s.groupid=r.oid AND r.rsgname='rg_concurrency_test';
 rsgname             | num_running | num_queueing | num_queued | num_executed 
---------------------+-------------+--------------+------------+--------------
 rg_concurrency_test | 0           | 0            | 1          | 3            
(1 row)
DROP ROLE role_concurrency_test;
DROP
DROP RESOURCE GROUP rg_concurrency_test;
DROP

-- test2: test alter concurrency
-- Create a resource group with concurrency=2. Prepare 2 running transactions and 1 queueing transactions.
-- Alter concurrency 2->3, the queueing transaction will be woken up, the 'value' of pg_resgroupcapability will be set to 3.
DROP ROLE IF EXISTS role_concurrency_test;
DROP
-- start_ignore
DROP RESOURCE GROUP rg_concurrency_test;
ERROR:  resource group "rg_concurrency_test" does not exist
-- end_ignore
CREATE RESOURCE GROUP rg_concurrency_test WITH (concurrency=2, cpu_rate_limit=20, memory_limit=20);
CREATE
CREATE ROLE role_concurrency_test RESOURCE GROUP rg_concurrency_test;
CREATE
12:SET ROLE role_concurrency_test;
SET
12:BEGIN;
BEGIN
13:SET ROLE role_concurrency_test;
SET
13:BEGIN;
BEGIN
14:SET ROLE role_concurrency_test;
SET
14&:BEGIN;  <waiting ...>
SELECT r.rsgname, num_running, num_queueing, num_queued, num_executed FROM gp_toolkit.gp_resgroup_status s, pg_resgroup r WHERE s.groupid=r.oid AND r.rsgname='rg_concurrency_test';
 rsgname             | num_running | num_queueing | num_queued | num_executed 
---------------------+-------------+--------------+------------+--------------
 rg_concurrency_test | 2           | 1            | 1          | 2            
(1 row)
SELECT concurrency FROM gp_toolkit.gp_resgroup_config WHERE groupname='rg_concurrency_test';
 concurrency 
-------------
 2           
(1 row)
ALTER RESOURCE GROUP rg_concurrency_test SET CONCURRENCY 3;
ALTER
SELECT r.rsgname, num_running, num_queueing, num_queued, num_executed FROM gp_toolkit.gp_resgroup_status s, pg_resgroup r WHERE s.groupid=r.oid AND r.rsgname='rg_concurrency_test';
 rsgname             | num_running | num_queueing | num_queued | num_executed 
---------------------+-------------+--------------+------------+--------------
 rg_concurrency_test | 2           | 1            | 1          | 2            
(1 row)
SELECT concurrency FROM gp_toolkit.gp_resgroup_config WHERE groupname='rg_concurrency_test';
 concurrency 
-------------
 3           
(1 row)
12:END;
END
13:END;
END
14<:  <... completed>
BEGIN
14:END;
END
12q: ... <quitting>
13q: ... <quitting>
14q: ... <quitting>
DROP ROLE role_concurrency_test;
DROP
DROP RESOURCE GROUP rg_concurrency_test;
DROP

-- test3: test alter concurrency
-- Create a resource group with concurrency=3. Prepare 3 running transactions, and 1 queueing transaction.
DROP ROLE IF EXISTS role_concurrency_test;
DROP
-- start_ignore
DROP RESOURCE GROUP rg_concurrency_test;
ERROR:  resource group "rg_concurrency_test" does not exist
-- end_ignore
CREATE RESOURCE GROUP rg_concurrency_test WITH (concurrency=3, cpu_rate_limit=20, memory_limit=20);
CREATE
CREATE ROLE role_concurrency_test RESOURCE GROUP rg_concurrency_test;
CREATE
22:SET ROLE role_concurrency_test;
SET
22:BEGIN;
BEGIN
23:SET ROLE role_concurrency_test;
SET
23:BEGIN;
BEGIN
24:SET ROLE role_concurrency_test;
SET
24:BEGIN;
BEGIN
25:SET ROLE role_concurrency_test;
SET
25&:BEGIN;  <waiting ...>
SELECT r.rsgname, num_running, num_queueing, num_queued, num_executed FROM gp_toolkit.gp_resgroup_status s, pg_resgroup r WHERE s.groupid=r.oid AND r.rsgname='rg_concurrency_test';
 rsgname             | num_running | num_queueing | num_queued | num_executed 
---------------------+-------------+--------------+------------+--------------
 rg_concurrency_test | 3           | 1            | 1          | 3            
(1 row)
SELECT concurrency FROM gp_toolkit.gp_resgroup_config WHERE groupname='rg_concurrency_test';
 concurrency 
-------------
 3           
(1 row)
-- Alter concurrency 3->2, the 'value' of pg_resgroupcapability will be set to 2.
ALTER RESOURCE GROUP rg_concurrency_test SET CONCURRENCY 2;
ALTER
SELECT concurrency FROM gp_toolkit.gp_resgroup_config WHERE groupname='rg_concurrency_test';
 concurrency 
-------------
 2           
(1 row)
-- When one transaction is finished, queueing transaction won't be woken up. There're 2 running transactions and 1 queueing transaction.
24:END;
END
SELECT r.rsgname, num_running, num_queueing, num_queued, num_executed FROM gp_toolkit.gp_resgroup_status s, pg_resgroup r WHERE s.groupid=r.oid AND r.rsgname='rg_concurrency_test';
 rsgname             | num_running | num_queueing | num_queued | num_executed 
---------------------+-------------+--------------+------------+--------------
 rg_concurrency_test | 2           | 1            | 1          | 3            
(1 row)
-- New transaction will be queued, there're 2 running and 2 queueing transactions.
24&:BEGIN;  <waiting ...>
SELECT r.rsgname, num_running, num_queueing, num_queued, num_executed FROM gp_toolkit.gp_resgroup_status s, pg_resgroup r WHERE s.groupid=r.oid AND r.rsgname='rg_concurrency_test';
 rsgname             | num_running | num_queueing | num_queued | num_executed 
---------------------+-------------+--------------+------------+--------------
 rg_concurrency_test | 2           | 2            | 2          | 3            
(1 row)
-- Finish another transaction, one queueing transaction will be woken up, there're 2 running transactions and 1 queueing transaction.
22:END;
END
SELECT r.rsgname, num_running, num_queueing, num_queued, num_executed FROM gp_toolkit.gp_resgroup_status s, pg_resgroup r WHERE s.groupid=r.oid AND r.rsgname='rg_concurrency_test';
 rsgname             | num_running | num_queueing | num_queued | num_executed 
---------------------+-------------+--------------+------------+--------------
 rg_concurrency_test | 2           | 1            | 2          | 4            
(1 row)
-- Alter concurrency 2->2, the 'value' of pg_resgroupcapability will be set to 2.
ALTER RESOURCE GROUP rg_concurrency_test SET CONCURRENCY 2;
ALTER
SELECT concurrency FROM gp_toolkit.gp_resgroup_config WHERE groupname='rg_concurrency_test';
 concurrency 
-------------
 2           
(1 row)
-- Finish another transaction, one queueing transaction will be woken up, there're 2 running transactions and 0 queueing transaction.
23:END;
END
SELECT r.rsgname, num_running, num_queueing, num_queued, num_executed FROM gp_toolkit.gp_resgroup_status s, pg_resgroup r WHERE s.groupid=r.oid AND r.rsgname='rg_concurrency_test';
 rsgname             | num_running | num_queueing | num_queued | num_executed 
---------------------+-------------+--------------+------------+--------------
 rg_concurrency_test | 2           | 0            | 2          | 5            
(1 row)
24<:  <... completed>
BEGIN
25<:  <... completed>
BEGIN
25:END;
END
24:END;
END
22q: ... <quitting>
23q: ... <quitting>
24q: ... <quitting>
25q: ... <quitting>
DROP ROLE role_concurrency_test;
DROP
DROP RESOURCE GROUP rg_concurrency_test;
DROP

-- test4: concurrently drop resource group

DROP ROLE IF EXISTS role_concurrency_test;
DROP
-- start_ignore
DROP RESOURCE GROUP rg_concurrency_test;
ERROR:  resource group "rg_concurrency_test" does not exist
-- end_ignore
CREATE RESOURCE GROUP rg_concurrency_test WITH (concurrency=2, cpu_rate_limit=20, memory_limit=20);
CREATE
CREATE ROLE role_concurrency_test RESOURCE GROUP rg_concurrency_test;
CREATE

-- DROP should fail if there're running transactions
32:SET ROLE role_concurrency_test;
SET
32:BEGIN;
BEGIN
DROP ROLE role_concurrency_test;
DROP
DROP RESOURCE GROUP rg_concurrency_test;
ERROR:  cannot drop resource group "rg_concurrency_test"
HINT:   The resource group is currently managing 1 query(ies) and cannot be dropped.
	Terminate the queries first or try dropping the group later.
	The view pg_stat_activity tracks the queries managed by resource groups.
32:END;
END

DROP ROLE IF EXISTS role_concurrency_test;
DROP
DROP RESOURCE GROUP rg_concurrency_test;
DROP

-- test5: QD exit before QE
DROP ROLE IF EXISTS role_concurrency_test;
DROP
-- start_ignore
DROP RESOURCE GROUP rg_concurrency_test;
ERROR:  resource group "rg_concurrency_test" does not exist
-- end_ignore

CREATE RESOURCE GROUP rg_concurrency_test WITH (concurrency=1, cpu_rate_limit=20, memory_limit=20);
CREATE
CREATE ROLE role_concurrency_test RESOURCE GROUP rg_concurrency_test;
CREATE
51:SET ROLE role_concurrency_test;
SET
51:BEGIN;
BEGIN
52:SET ROLE role_concurrency_test;
SET
52&:BEGIN;  <waiting ...>
SELECT pg_cancel_backend(pid) FROM pg_stat_activity WHERE waiting_reason='resgroup' AND rsgname='rg_concurrency_test';
 pg_cancel_backend 
-------------------
 t                 
(1 row)
52<:  <... completed>
ERROR:  canceling statement due to user request
52&:BEGIN;  <waiting ...>
SELECT pg_cancel_backend(pid) FROM pg_stat_activity WHERE waiting_reason='resgroup' AND rsgname='rg_concurrency_test';
 pg_cancel_backend 
-------------------
 t                 
(1 row)
52<:  <... completed>
ERROR:  canceling statement due to user request
51q: ... <quitting>
52q: ... <quitting>
DROP ROLE role_concurrency_test;
DROP
DROP RESOURCE GROUP rg_concurrency_test;
DROP

-- test6: cancel a query that is waiting for a slot
DROP ROLE IF EXISTS role_concurrency_test;
DROP
-- start_ignore
DROP RESOURCE GROUP rg_concurrency_test;
ERROR:  resource group "rg_concurrency_test" does not exist
-- end_ignore

CREATE RESOURCE GROUP rg_concurrency_test WITH (concurrency=1, cpu_rate_limit=20, memory_limit=20);
CREATE
CREATE ROLE role_concurrency_test RESOURCE GROUP rg_concurrency_test;
CREATE
51:SET ROLE role_concurrency_test;
SET
51:BEGIN;
BEGIN
52:SET ROLE role_concurrency_test;
SET
52&:BEGIN;  <waiting ...>
51q: ... <quitting>
52<:  <... completed>
BEGIN
52q: ... <quitting>
DROP ROLE role_concurrency_test;
DROP
DROP RESOURCE GROUP rg_concurrency_test;
DROP


-- test7: terminate a query that is waiting for a slot
DROP ROLE IF EXISTS role_concurrency_test;
DROP
-- start_ignore
DROP RESOURCE GROUP rg_concurrency_test;
ERROR:  resource group "rg_concurrency_test" does not exist
-- end_ignore

CREATE RESOURCE GROUP rg_concurrency_test WITH (concurrency=1, cpu_rate_limit=20, memory_limit=20);
CREATE
CREATE ROLE role_concurrency_test RESOURCE GROUP rg_concurrency_test;
CREATE
61:SET ROLE role_concurrency_test;
SET
61:BEGIN;
BEGIN
62:SET ROLE role_concurrency_test;
SET
62&:BEGIN;  <waiting ...>
SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE waiting_reason='resgroup' AND rsgname='rg_concurrency_test';
 pg_terminate_backend 
----------------------
 t                    
(1 row)
62<:  <... completed>
FATAL:  terminating connection due to administrator command
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
61q: ... <quitting>
62q: ... <quitting>
DROP ROLE role_concurrency_test;
DROP
DROP RESOURCE GROUP rg_concurrency_test;
DROP

-- test8: create a resgroup with concurrency=0
DROP ROLE IF EXISTS role_concurrency_test;
DROP
-- start_ignore
DROP RESOURCE GROUP rg_concurrency_test;
ERROR:  resource group "rg_concurrency_test" does not exist
-- end_ignore

CREATE RESOURCE GROUP rg_concurrency_test WITH (concurrency=0, cpu_rate_limit=20, memory_limit=20);
CREATE
CREATE ROLE role_concurrency_test RESOURCE GROUP rg_concurrency_test;
CREATE
61:SET ROLE role_concurrency_test;
SET
61&:BEGIN;  <waiting ...>
SELECT pg_cancel_backend(pid) FROM pg_stat_activity WHERE waiting_reason='resgroup' AND rsgname='rg_concurrency_test';
 pg_cancel_backend 
-------------------
 t                 
(1 row)
61<:  <... completed>
ERROR:  canceling statement due to user request
61q: ... <quitting>
DROP ROLE role_concurrency_test;
DROP
DROP RESOURCE GROUP rg_concurrency_test;
DROP

--
-- Test cursors, pl/* functions only take one slot.
--
-- set concurrency to 1
CREATE RESOURCE GROUP rg_concurrency_test WITH (concurrency=1, cpu_rate_limit=20, memory_limit=20);
CREATE
CREATE ROLE role_concurrency_test RESOURCE GROUP rg_concurrency_test;
CREATE

-- declare cursors and verify that it only takes one resource group slot
71:SET ROLE TO role_concurrency_test;
SET
71:CREATE TABLE foo_concurrency_test as select i as c1 , i as c2 from generate_series(1, 1000) i;
CREATE 1000
71:CREATE TABLE bar_concurrency_test as select i as c1 , i as c2 from generate_series(1, 1000) i;
CREATE 1000
71:BEGIN;
BEGIN
71:DECLARE c1 CURSOR for select c1, c2 from foo_concurrency_test order by c1 limit 10;
DECLARE
71:DECLARE c2 CURSOR for select c1, c2 from bar_concurrency_test order by c1 limit 10;
DECLARE
71:DECLARE c3 CURSOR for select count(*) from foo_concurrency_test t1, bar_concurrency_test t2 where t1.c2 = t2.c2;
DECLARE
71:Fetch ALL FROM c1;
 c1 | c2 
----+----
 1  | 1  
 2  | 2  
 3  | 3  
 4  | 4  
 5  | 5  
 6  | 6  
 7  | 7  
 8  | 8  
 9  | 9  
 10 | 10 
(10 rows)
71:Fetch ALL FROM c2;
 c1 | c2 
----+----
 1  | 1  
 2  | 2  
 3  | 3  
 4  | 4  
 5  | 5  
 6  | 6  
 7  | 7  
 8  | 8  
 9  | 9  
 10 | 10 
(10 rows)
71:Fetch ALL FROM c3;
 count 
-------
 1000  
(1 row)
71:END;
END

-- create a pl function and verify that it only takes one resource group slot.
CREATE OR REPLACE FUNCTION func_concurrency_test () RETURNS integer as /*in func*/ $$ /*in func*/ DECLARE /*in func*/ tmprecord RECORD; /*in func*/ ret integer; /*in func*/ BEGIN /*in func*/ SELECT count(*) INTO ret FROM foo_concurrency_test;	 /*in func*/ FOR tmprecord IN SELECT * FROM bar_concurrency_test LOOP /*in func*/ SELECT count(*) INTO ret FROM foo_concurrency_test;	 /*in func*/ END LOOP; /*in func*/ /*in func*/ select 1/0; /*in func*/ EXCEPTION /*in func*/ WHEN division_by_zero THEN /*in func*/ SELECT count(*) INTO ret FROM foo_concurrency_test;	 /*in func*/ raise NOTICE 'divided by zero'; /*in func*/ RETURN ret; /*in func*/ END; /*in func*/ $$ /*in func*/ LANGUAGE plpgsql;
CREATE

71: select func_concurrency_test();
 func_concurrency_test 
-----------------------
 1000                  
(1 row)

-- Prepare/execute statements and verify that it only takes one resource group slot.
71:BEGIN;
BEGIN
71:PREPARE p1 (integer) as select * from foo_concurrency_test where c2=$1;
PREPARE
71:PREPARE p2 (integer) as select * from bar_concurrency_test where c2=$1;
PREPARE
71:EXECUTE p1(1);
 c1 | c2 
----+----
 1  | 1  
(1 row)
71:EXECUTE p2(2);
 c1 | c2 
----+----
 2  | 2  
(1 row)
71:END;
END
71:PREPARE p3 (integer) as select * from foo_concurrency_test where c2=$1;
PREPARE
71:PREPARE p4 (integer) as select * from bar_concurrency_test where c2=$1;
PREPARE
71:EXECUTE p3(1);
 c1 | c2 
----+----
 1  | 1  
(1 row)
71:EXECUTE p4(2);
 c1 | c2 
----+----
 2  | 2  
(1 row)

DROP TABLE foo_concurrency_test;
DROP
DROP TABLE bar_concurrency_test;
DROP
DROP ROLE role_concurrency_test;
DROP
DROP RESOURCE GROUP rg_concurrency_test;
DROP
