DROP ROLE IF EXISTS role_dumpinfo_test;
DROP
DROP ROLE IF EXISTS role_permission;
DROP
-- start_ignore
DROP RESOURCE GROUP rg_dumpinfo_test;
ERROR:  resource group "rg_dumpinfo_test" does not exist
CREATE LANGUAGE plpythonu;
CREATE
-- end_ignore

CREATE FUNCTION dump_test_check() RETURNS bool as $$ import json import pygresql.pg as pg 
def validate(json_obj, segnum): array = json_obj.get("info") #validate segnum if len(array) != segnum: return False qd_info = [j for j in array if j["segid"] == -1][0] #validate keys keys = ["segid", "segmentsOnMaster", "loaded", "totalChunks", "freeChunks", "chunkSizeInBits", "groups"] for key in keys: if key not in qd_info: return False 
groups = [g for g in qd_info["groups"] if g["group_id"] > 6438] #validate user created group if len(groups) != 1: return False group = groups[0] #validate group keys keys = ["group_id", "nRunning", "locked_for_drop", "memExpected", "memQuotaGranted", "memSharedGranted", "memQuotaUsed", "memUsage", "memSharedUsage"] for key in keys: if key not in group: return False 
#validate waitqueue wait_queue = group["wait_queue"] if wait_queue["wait_queue_size"] != 1: return False #validate nrunning nrunning = group["nRunning"] if nrunning != 2: return False 
return True 
conn = pg.connect(dbname="postgres") 
r = conn.query("select count(*) from gp_segment_configuration where  role = 'p';") n = r.getresult()[0][0] 
r = conn.query("select value from pg_resgroup_get_status_kv('dump');") json_text =  r.getresult()[0][0] json_obj = json.loads(json_text) 
return validate(json_obj, n) 
$$ LANGUAGE plpythonu;
CREATE

CREATE RESOURCE GROUP rg_dumpinfo_test WITH (concurrency=2, cpu_rate_limit=20, memory_limit=20);
CREATE
CREATE ROLE role_dumpinfo_test RESOURCE GROUP rg_dumpinfo_test;
CREATE

2:SET ROLE role_dumpinfo_test;
SET
2:BEGIN;
BEGIN
3:SET ROLE role_dumpinfo_test;
SET
3:BEGIN;
BEGIN
4:SET ROLE role_dumpinfo_test;
SET
4&:BEGIN;  <waiting ...>

SELECT dump_test_check();
 dump_test_check 
-----------------
 t               
(1 row)

2:END;
END
3:END;
END
4<:  <... completed>
BEGIN
4:END;
END
2q: ... <quitting>
3q: ... <quitting>
4q: ... <quitting>

CREATE ROLE role_permission;
CREATE
SET ROLE role_permission;
SET
select value from pg_resgroup_get_status_kv('dump');
ERROR:  only superusers can call this function

RESET ROLE;
RESET

DROP ROLE role_dumpinfo_test;
DROP
DROP ROLE role_permission;
DROP
DROP RESOURCE GROUP rg_dumpinfo_test;
DROP
DROP LANGUAGE plpythonu CASCADE;
DROP
