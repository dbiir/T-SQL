-- test1: cancel a query that is waiting for a slot
DROP ROLE IF EXISTS role_concurrency_test;
DROP
-- start_ignore
DROP RESOURCE GROUP rg_concurrency_test;
ERROR:  resource group "rg_concurrency_test" does not exist
-- end_ignore

CREATE OR REPLACE VIEW rg_concurrency_view AS SELECT waiting, waiting_reason, state, query, rsgname FROM pg_stat_activity WHERE rsgname='rg_concurrency_test';
CREATE

CREATE RESOURCE GROUP rg_concurrency_test WITH (concurrency=1, cpu_rate_limit=20, memory_limit=20);
CREATE
CREATE ROLE role_concurrency_test RESOURCE GROUP rg_concurrency_test;
CREATE
1:SET ROLE role_concurrency_test;
SET
1:BEGIN;
BEGIN
2:SET ROLE role_concurrency_test;
SET
2&:BEGIN;  <waiting ...>
3:SET ROLE role_concurrency_test;
SET
3&:BEGIN;  <waiting ...>
SELECT * FROM rg_concurrency_view;
 waiting | waiting_reason | state               | query  | rsgname             
---------+----------------+---------------------+--------+---------------------
 t       | resgroup       | active              | BEGIN; | rg_concurrency_test 
 t       | resgroup       | active              | BEGIN; | rg_concurrency_test 
 f       |                | idle in transaction | BEGIN; | rg_concurrency_test 
(3 rows)
SELECT pg_cancel_backend(pid) FROM pg_stat_activity WHERE waiting_reason='resgroup' AND rsgname='rg_concurrency_test';
 pg_cancel_backend 
-------------------
 t                 
 t                 
(2 rows)
1:END;
END
2<:  <... completed>
ERROR:  canceling statement due to user request
3<:  <... completed>
ERROR:  canceling statement due to user request
SELECT * FROM rg_concurrency_view;
 waiting | waiting_reason | state | query  | rsgname             
---------+----------------+-------+--------+---------------------
 f       |                | idle  | BEGIN; | rg_concurrency_test 
 f       |                | idle  | BEGIN; | rg_concurrency_test 
(2 rows)
1q: ... <quitting>
2q: ... <quitting>
3q: ... <quitting>
DROP ROLE role_concurrency_test;
DROP
DROP RESOURCE GROUP rg_concurrency_test;
DROP

-- test2: terminate a query that is waiting for a slot
DROP ROLE IF EXISTS role_concurrency_test;
DROP
-- start_ignore
DROP RESOURCE GROUP rg_concurrency_test;
ERROR:  resource group "rg_concurrency_test" does not exist
-- end_ignore

CREATE RESOURCE GROUP rg_concurrency_test WITH (concurrency=1, cpu_rate_limit=20, memory_limit=20);
CREATE
CREATE ROLE role_concurrency_test RESOURCE GROUP rg_concurrency_test;
CREATE
1:SET ROLE role_concurrency_test;
SET
1:BEGIN;
BEGIN
2:SET ROLE role_concurrency_test;
SET
2&:BEGIN;  <waiting ...>
3:SET ROLE role_concurrency_test;
SET
3&:BEGIN;  <waiting ...>
SELECT * FROM rg_concurrency_view;
 waiting | waiting_reason | state               | query  | rsgname             
---------+----------------+---------------------+--------+---------------------
 t       | resgroup       | active              | BEGIN; | rg_concurrency_test 
 t       | resgroup       | active              | BEGIN; | rg_concurrency_test 
 f       |                | idle in transaction | BEGIN; | rg_concurrency_test 
(3 rows)
SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE waiting_reason='resgroup' AND rsgname='rg_concurrency_test';
 pg_terminate_backend 
----------------------
 t                    
 t                    
(2 rows)
1:END;
END
2<:  <... completed>
FATAL:  terminating connection due to administrator command
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
3<:  <... completed>
FATAL:  terminating connection due to administrator command
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
SELECT * FROM rg_concurrency_view;
 waiting | waiting_reason | state | query | rsgname 
---------+----------------+-------+-------+---------
(0 rows)
1q: ... <quitting>
2q: ... <quitting>
3q: ... <quitting>
DROP ROLE role_concurrency_test;
DROP
DROP RESOURCE GROUP rg_concurrency_test;
DROP

-- test3: cancel a query that is running
DROP ROLE IF EXISTS role_concurrency_test;
DROP
-- start_ignore
DROP RESOURCE GROUP rg_concurrency_test;
ERROR:  resource group "rg_concurrency_test" does not exist
-- end_ignore

CREATE RESOURCE GROUP rg_concurrency_test WITH (concurrency=2, cpu_rate_limit=20, memory_limit=20);
CREATE
CREATE ROLE role_concurrency_test RESOURCE GROUP rg_concurrency_test;
CREATE
1:SET ROLE role_concurrency_test;
SET
1&:SELECT pg_sleep(10000);  <waiting ...>
2:SET ROLE role_concurrency_test;
SET
2&:SELECT pg_sleep(10000);  <waiting ...>
6:SET ROLE role_concurrency_test;
SET
6&:BEGIN;  <waiting ...>
7:SET ROLE role_concurrency_test;
SET
7&:BEGIN;  <waiting ...>
SELECT * FROM rg_concurrency_view;
 waiting | waiting_reason | state  | query                   | rsgname             
---------+----------------+--------+-------------------------+---------------------
 t       | resgroup       | active | BEGIN;                  | rg_concurrency_test 
 t       | resgroup       | active | BEGIN;                  | rg_concurrency_test 
 f       |                | active | SELECT pg_sleep(10000); | rg_concurrency_test 
 f       |                | active | SELECT pg_sleep(10000); | rg_concurrency_test 
(4 rows)
SELECT pg_cancel_backend(pid) FROM pg_stat_activity WHERE waiting='f' AND rsgname='rg_concurrency_test';
 pg_cancel_backend 
-------------------
 t                 
 t                 
(2 rows)
1<:  <... completed>
ERROR:  canceling statement due to user request
2<:  <... completed>
ERROR:  canceling statement due to user request
6<:  <... completed>
BEGIN
7<:  <... completed>
BEGIN
SELECT * FROM rg_concurrency_view;
 waiting | waiting_reason | state               | query  | rsgname             
---------+----------------+---------------------+--------+---------------------
 f       |                | idle in transaction | BEGIN; | rg_concurrency_test 
 f       |                | idle in transaction | BEGIN; | rg_concurrency_test 
(2 rows)
1q: ... <quitting>
2q: ... <quitting>
6q: ... <quitting>
7q: ... <quitting>
DROP ROLE role_concurrency_test;
DROP
DROP RESOURCE GROUP rg_concurrency_test;
DROP

-- test4: terminate a query that is running
DROP ROLE IF EXISTS role_concurrency_test;
DROP
-- start_ignore
DROP RESOURCE GROUP rg_concurrency_test;
ERROR:  resource group "rg_concurrency_test" does not exist
-- end_ignore

CREATE RESOURCE GROUP rg_concurrency_test WITH (concurrency=2, cpu_rate_limit=20, memory_limit=20);
CREATE
CREATE ROLE role_concurrency_test RESOURCE GROUP rg_concurrency_test;
CREATE
1:SET ROLE role_concurrency_test;
SET
1&:SELECT pg_sleep(10000);  <waiting ...>
2:SET ROLE role_concurrency_test;
SET
2&:SELECT pg_sleep(10000);  <waiting ...>
6:SET ROLE role_concurrency_test;
SET
6&:BEGIN;  <waiting ...>
7:SET ROLE role_concurrency_test;
SET
7&:BEGIN;  <waiting ...>
SELECT * FROM rg_concurrency_view;
 waiting | waiting_reason | state  | query                   | rsgname             
---------+----------------+--------+-------------------------+---------------------
 t       | resgroup       | active | BEGIN;                  | rg_concurrency_test 
 t       | resgroup       | active | BEGIN;                  | rg_concurrency_test 
 f       |                | active | SELECT pg_sleep(10000); | rg_concurrency_test 
 f       |                | active | SELECT pg_sleep(10000); | rg_concurrency_test 
(4 rows)
SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE waiting='f' AND rsgname='rg_concurrency_test';
 pg_terminate_backend 
----------------------
 t                    
 t                    
(2 rows)
1<:  <... completed>
FATAL:  terminating connection due to administrator command
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
2<:  <... completed>
FATAL:  terminating connection due to administrator command
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
6<:  <... completed>
BEGIN
7<:  <... completed>
BEGIN
SELECT * FROM rg_concurrency_view;
 waiting | waiting_reason | state               | query  | rsgname             
---------+----------------+---------------------+--------+---------------------
 f       |                | idle in transaction | BEGIN; | rg_concurrency_test 
 f       |                | idle in transaction | BEGIN; | rg_concurrency_test 
(2 rows)
1q: ... <quitting>
2q: ... <quitting>
6q: ... <quitting>
7q: ... <quitting>
DROP ROLE role_concurrency_test;
DROP
DROP RESOURCE GROUP rg_concurrency_test;
DROP

DROP VIEW rg_concurrency_view;
DROP
