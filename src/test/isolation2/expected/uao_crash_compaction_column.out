-- start_matchsubs
--
-- # create a match/subs expression
--
-- m/ERROR:.*server closed the connection unexpectedly/
-- s/ERROR:.*server closed the connection unexpectedly/ERROR: server closed the connection unexpectedly/gm
-- end_matchsubs
include: helpers/server_helpers.sql;
CREATE

create or replace function wait_for_replication_replay (retries int) returns bool as $$ declare i int; /* in func */ result bool; /* in func */ begin /* in func */ i := 0; /* in func */ -- Wait until the mirror (content 0) has replayed up to flush location loop /* in func */ SELECT flush_location = replay_location INTO result from gp_stat_replication where gp_segment_id = 0; /* in func */ if result then /* in func */ return true; /* in func */ end if; /* in func */ 
if i >= retries then /* in func */ return false; /* in func */ end if; /* in func */ perform pg_sleep(0.1); /* in func */ i := i + 1; /* in func */ end loop; /* in func */ end; /* in func */ $$ language plpgsql;
CREATE

3:CREATE extension if NOT EXISTS gp_inject_fault;
CREATE
3:SELECT role, preferred_role, content, mode, status FROM gp_segment_configuration;
 role | preferred_role | content | mode | status 
------+----------------+---------+------+--------
 m    | m              | -1      | s    | u      
 m    | m              | 0       | s    | u      
 m    | m              | 1       | s    | u      
 m    | m              | 2       | s    | u      
 p    | p              | -1      | n    | u      
 p    | p              | 0       | s    | u      
 p    | p              | 1       | s    | u      
 p    | p              | 2       | s    | u      
(8 rows)
--
-- Test to validate crash at different points in AO/CO vacuum.
--
-- Setup tables to test crash at different points
-- for crash_before_cleanup_phase
3:set gp_default_storage_options="appendonly=true,orientation=column";
SET
3:show gp_default_storage_options;
 gp_default_storage_options                                                         
------------------------------------------------------------------------------------
 appendonly=true,blocksize=32768,compresstype=none,checksum=true,orientation=column 
(1 row)
3:DROP TABLE IF EXISTS crash_before_cleanup_phase CASCADE;
DROP
3:CREATE TABLE crash_before_cleanup_phase (a INT, b INT, c CHAR(20));
CREATE
3:CREATE INDEX crash_before_cleanup_phase_index ON crash_before_cleanup_phase(b);
CREATE
3:INSERT INTO crash_before_cleanup_phase SELECT i AS a, 1 AS b, 'hello world' AS c FROM generate_series(1, 10) AS i;
INSERT 10
3:DELETE FROM crash_before_cleanup_phase WHERE a < 4;
DELETE 3
-- for crash_before_segmentfile_drop
3:DROP TABLE IF	EXISTS crash_before_segmentfile_drop CASCADE;
DROP
3:CREATE TABLE crash_before_segmentfile_drop (a INT, b INT, c CHAR(20));
CREATE
3:CREATE INDEX crash_before_segmentfile_drop_index ON crash_before_segmentfile_drop(b);
CREATE
3:INSERT INTO crash_before_segmentfile_drop SELECT i AS a, 1 AS b, 'hello world' AS c FROM generate_series(1, 10) AS i;
INSERT 10
3:DELETE FROM crash_before_segmentfile_drop WHERE a < 4;
DELETE 3
-- for crash_vacuum_in_appendonly_insert
3:DROP TABLE IF EXISTS crash_vacuum_in_appendonly_insert CASCADE;
DROP
3:CREATE TABLE crash_vacuum_in_appendonly_insert (a INT, b INT, c CHAR(20));
CREATE
3:CREATE INDEX crash_vacuum_in_appendonly_insert_index ON crash_vacuum_in_appendonly_insert(b);
CREATE
3:INSERT INTO crash_vacuum_in_appendonly_insert SELECT i AS a, 1 AS b, 'hello world' AS c FROM generate_series(1, 10) AS i;
INSERT 10
3:UPDATE crash_vacuum_in_appendonly_insert SET b = 2;
UPDATE 10

-- suspend at intended points.
3:SELECT gp_inject_fault('compaction_before_segmentfile_drop', 'suspend', '', '', 'crash_before_segmentfile_drop', 1, -1, 0, 2);
 gp_inject_fault 
-----------------
 Success:        
(1 row)
2&:VACUUM crash_before_segmentfile_drop;  <waiting ...>
3:SELECT gp_wait_until_triggered_fault('compaction_before_segmentfile_drop', 1, 2);
 gp_wait_until_triggered_fault 
-------------------------------
 Success:                      
(1 row)
3:SELECT gp_inject_fault('appendonly_insert', 'panic', '', '', 'crash_vacuum_in_appendonly_insert', 1, -1, 0, 2);
 gp_inject_fault 
-----------------
 Success:        
(1 row)

-- VACUUM on crash_before_cleanup_phase will end up skipping the drop
-- phase after not being able to acquire AccessExclusiveLock because
-- we make session 3 hold AccessShareLock. This results in segment
-- file 1 remaining in drop pending state which results in segment
-- file 1 not being scheduled for any new inserts.
3:SELECT gp_inject_fault('compaction_before_cleanup_phase', 'suspend', '', '', 'crash_before_cleanup_phase', 1, -1, 0, 2);
 gp_inject_fault 
-----------------
 Success:        
(1 row)
3:BEGIN;
BEGIN
3:SELECT count(*) FROM crash_before_cleanup_phase;
 count 
-------
 7     
(1 row)
1&:VACUUM crash_before_cleanup_phase;  <waiting ...>
3:SELECT gp_wait_until_triggered_fault('compaction_before_cleanup_phase', 1, 2);
 gp_wait_until_triggered_fault 
-------------------------------
 Success:                      
(1 row)
3:END;
END

-- we already waited for suspend faults to trigger and hence we can proceed to
-- run next command which would trigger panic fault and help test
-- crash_recovery
3:VACUUM crash_vacuum_in_appendonly_insert;
ERROR:  fault triggered, fault name:'appendonly_insert' fault type:'panic'  (seg0 127.0.0.1:25432 pid=21988)
1<:  <... completed>
ERROR:  Error on receive from seg0 127.0.0.1:25432 pid=21999: server closed the connection unexpectedly
DETAIL:  
	This probably means the server terminated abnormally
	before or while processing the request.
2<:  <... completed>
ERROR:  Error on receive from seg0 127.0.0.1:25432 pid=21994: server closed the connection unexpectedly
DETAIL:  
	This probably means the server terminated abnormally
	before or while processing the request.

-- wait for segment to complete recovering
0U: SELECT 1;
 ?column? 
----------
 1        
(1 row)
0Uq: ... <quitting>

-- reset faults as protection incase tests failed and panic didn't happen
1:SELECT gp_inject_fault('compaction_before_cleanup_phase', 'reset', 2);
 gp_inject_fault 
-----------------
 Success:        
(1 row)
1:SELECT gp_inject_fault('compaction_before_segmentfile_drop', 'reset', 2);
 gp_inject_fault 
-----------------
 Success:        
(1 row)
1:SELECT gp_inject_fault('appendonly_insert', 'reset', 2);
 gp_inject_fault 
-----------------
 Success:        
(1 row)

-- perform post crash validation checks
-- for crash_before_cleanup_phase
1:SELECT segno,column_num,physical_segno,tupcount,modcount,state FROM gp_toolkit.__gp_aocsseg('crash_before_cleanup_phase');
 segno | column_num | physical_segno | tupcount | modcount | state 
-------+------------+----------------+----------+----------+-------
 1     | 0          | 1              | 10       | 2        | 1     
 1     | 1          | 129            | 10       | 2        | 1     
 1     | 2          | 257            | 10       | 2        | 1     
 2     | 0          | 2              | 3        | 0        | 1     
 2     | 1          | 130            | 3        | 0        | 1     
 2     | 2          | 258            | 3        | 0        | 1     
(6 rows)
1:INSERT INTO crash_before_cleanup_phase VALUES(1, 1, 'c'), (25, 6, 'c');
INSERT 2
1:UPDATE crash_before_cleanup_phase SET b = b+10 WHERE a=25;
UPDATE 1
1:SELECT * FROM crash_before_cleanup_phase ORDER BY a,b;
 a  | b  | c                    
----+----+----------------------
 1  | 1  | c                    
 4  | 1  | hello world          
 5  | 1  | hello world          
 6  | 1  | hello world          
 7  | 1  | hello world          
 8  | 1  | hello world          
 9  | 1  | hello world          
 10 | 1  | hello world          
 25 | 16 | c                    
(9 rows)
1:SELECT segno,column_num,physical_segno,tupcount,modcount,state FROM gp_toolkit.__gp_aocsseg('crash_before_cleanup_phase');
 segno | column_num | physical_segno | tupcount | modcount | state 
-------+------------+----------------+----------+----------+-------
 1     | 0          | 1              | 10       | 2        | 1     
 1     | 1          | 129            | 10       | 2        | 1     
 1     | 2          | 257            | 10       | 2        | 1     
 2     | 0          | 2              | 6        | 2        | 1     
 2     | 1          | 130            | 6        | 2        | 1     
 2     | 2          | 258            | 6        | 2        | 1     
(6 rows)
-- This VACUUM removes the previous drop pending state for segment file 1 which
-- will make it available for future inserts.
1:VACUUM crash_before_cleanup_phase;
VACUUM
1:SELECT segno,column_num,physical_segno,tupcount,modcount,state FROM gp_toolkit.__gp_aocsseg('crash_before_cleanup_phase');
 segno | column_num | physical_segno | tupcount | modcount | state 
-------+------------+----------------+----------+----------+-------
 1     | 0          | 1              | 4        | 2        | 1     
 1     | 1          | 129            | 4        | 2        | 1     
 1     | 2          | 257            | 4        | 2        | 1     
 2     | 0          | 2              | 4        | 2        | 1     
 2     | 1          | 130            | 4        | 2        | 1     
 2     | 2          | 258            | 4        | 2        | 1     
 3     | 0          | 3              | 1        | 0        | 1     
 3     | 1          | 131            | 1        | 0        | 1     
 3     | 2          | 259            | 1        | 0        | 1     
(9 rows)
1:INSERT INTO crash_before_cleanup_phase VALUES(21, 1, 'c'), (26, 1, 'c');
INSERT 2
1:UPDATE crash_before_cleanup_phase SET b = b+10 WHERE a=26;
UPDATE 1
1:SELECT * FROM crash_before_cleanup_phase ORDER BY a,b;
 a  | b  | c                    
----+----+----------------------
 1  | 1  | c                    
 4  | 1  | hello world          
 5  | 1  | hello world          
 6  | 1  | hello world          
 7  | 1  | hello world          
 8  | 1  | hello world          
 9  | 1  | hello world          
 10 | 1  | hello world          
 21 | 1  | c                    
 25 | 16 | c                    
 26 | 11 | c                    
(11 rows)
-- for crash_before_segmentfile_drop
1:SELECT segno,column_num,physical_segno,tupcount,modcount,state FROM gp_toolkit.__gp_aocsseg('crash_before_segmentfile_drop');
 segno | column_num | physical_segno | tupcount | modcount | state 
-------+------------+----------------+----------+----------+-------
 1     | 0          | 1              | 10       | 2        | 1     
 1     | 1          | 129            | 10       | 2        | 1     
 1     | 2          | 257            | 10       | 2        | 1     
 2     | 0          | 2              | 3        | 0        | 1     
 2     | 1          | 130            | 3        | 0        | 1     
 2     | 2          | 258            | 3        | 0        | 1     
(6 rows)
1:INSERT INTO crash_before_segmentfile_drop VALUES(1, 1, 'c'), (25, 6, 'c');
INSERT 2
1:UPDATE crash_before_segmentfile_drop SET b = b+10 WHERE a=25;
UPDATE 1
1:SELECT * FROM crash_before_segmentfile_drop ORDER BY a,b;
 a  | b  | c                    
----+----+----------------------
 1  | 1  | c                    
 4  | 1  | hello world          
 5  | 1  | hello world          
 6  | 1  | hello world          
 7  | 1  | hello world          
 8  | 1  | hello world          
 9  | 1  | hello world          
 10 | 1  | hello world          
 25 | 16 | c                    
(9 rows)
1:SELECT segno,column_num,physical_segno,tupcount,modcount,state FROM gp_toolkit.__gp_aocsseg('crash_before_segmentfile_drop');
 segno | column_num | physical_segno | tupcount | modcount | state 
-------+------------+----------------+----------+----------+-------
 1     | 0          | 1              | 10       | 2        | 1     
 1     | 1          | 129            | 10       | 2        | 1     
 1     | 2          | 257            | 10       | 2        | 1     
 2     | 0          | 2              | 6        | 2        | 1     
 2     | 1          | 130            | 6        | 2        | 1     
 2     | 2          | 258            | 6        | 2        | 1     
(6 rows)
1:VACUUM crash_before_segmentfile_drop;
VACUUM
1:SELECT segno,column_num,physical_segno,tupcount,modcount,state FROM gp_toolkit.__gp_aocsseg('crash_before_segmentfile_drop');
 segno | column_num | physical_segno | tupcount | modcount | state 
-------+------------+----------------+----------+----------+-------
 1     | 0          | 1              | 4        | 2        | 1     
 1     | 1          | 129            | 4        | 2        | 1     
 1     | 2          | 257            | 4        | 2        | 1     
 2     | 0          | 2              | 4        | 2        | 1     
 2     | 1          | 130            | 4        | 2        | 1     
 2     | 2          | 258            | 4        | 2        | 1     
 3     | 0          | 3              | 1        | 0        | 1     
 3     | 1          | 131            | 1        | 0        | 1     
 3     | 2          | 259            | 1        | 0        | 1     
(9 rows)
1:INSERT INTO crash_before_segmentfile_drop VALUES(21, 1, 'c'), (26, 1, 'c');
INSERT 2
1:UPDATE crash_before_segmentfile_drop SET b = b+10 WHERE a=26;
UPDATE 1
1:SELECT * FROM crash_before_segmentfile_drop ORDER BY a,b;
 a  | b  | c                    
----+----+----------------------
 1  | 1  | c                    
 4  | 1  | hello world          
 5  | 1  | hello world          
 6  | 1  | hello world          
 7  | 1  | hello world          
 8  | 1  | hello world          
 9  | 1  | hello world          
 10 | 1  | hello world          
 21 | 1  | c                    
 25 | 16 | c                    
 26 | 11 | c                    
(11 rows)
-- crash_vacuum_in_appendonly_insert
1:SELECT segno,column_num,physical_segno,tupcount,modcount,state FROM gp_toolkit.__gp_aocsseg('crash_vacuum_in_appendonly_insert');
 segno | column_num | physical_segno | tupcount | modcount | state 
-------+------------+----------------+----------+----------+-------
 1     | 0          | 1              | 20       | 2        | 1     
 1     | 1          | 129            | 20       | 2        | 1     
 1     | 2          | 257            | 20       | 2        | 1     
(3 rows)
1:VACUUM crash_vacuum_in_appendonly_insert;
VACUUM
1:SELECT segno,column_num,physical_segno,tupcount,modcount,state FROM gp_toolkit.__gp_aocsseg('crash_vacuum_in_appendonly_insert');
 segno | column_num | physical_segno | tupcount | modcount | state 
-------+------------+----------------+----------+----------+-------
 1     | 0          | 1              | 0        | 2        | 1     
 1     | 1          | 129            | 0        | 2        | 1     
 1     | 2          | 257            | 0        | 2        | 1     
 2     | 0          | 2              | 10       | 0        | 1     
 2     | 1          | 130            | 10       | 0        | 1     
 2     | 2          | 258            | 10       | 0        | 1     
(6 rows)
1:INSERT INTO crash_vacuum_in_appendonly_insert VALUES(21, 1, 'c'), (26, 1, 'c');
INSERT 2
1:UPDATE crash_vacuum_in_appendonly_insert SET b = b+10 WHERE a=26;
UPDATE 1
1:SELECT * FROM crash_vacuum_in_appendonly_insert ORDER BY a,b;
 a  | b  | c                    
----+----+----------------------
 1  | 2  | hello world          
 2  | 2  | hello world          
 3  | 2  | hello world          
 4  | 2  | hello world          
 5  | 2  | hello world          
 6  | 2  | hello world          
 7  | 2  | hello world          
 8  | 2  | hello world          
 9  | 2  | hello world          
 10 | 2  | hello world          
 21 | 1  | c                    
 26 | 11 | c                    
(12 rows)

--
-- Setup tables to test crash at different points on master now
--
-- for crash_master_before_cleanup_phase
2:set gp_default_storage_options="appendonly=true,orientation=column";
SET
2:show gp_default_storage_options;
 gp_default_storage_options                                                         
------------------------------------------------------------------------------------
 appendonly=true,blocksize=32768,compresstype=none,checksum=true,orientation=column 
(1 row)
2:DROP TABLE IF EXISTS crash_master_before_cleanup_phase CASCADE;
DROP
2:CREATE TABLE crash_master_before_cleanup_phase (a INT, b INT, c CHAR(20));
CREATE
2:CREATE INDEX crash_master_before_cleanup_phase_index ON crash_master_before_cleanup_phase(b);
CREATE
2:INSERT INTO crash_master_before_cleanup_phase SELECT i AS a, 1 AS b, 'hello world' AS c FROM generate_series(1, 10) AS i;
INSERT 10
2:DELETE FROM crash_master_before_cleanup_phase WHERE a < 4;
DELETE 3
-- for crash_master_before_segmentfile_drop
2:DROP TABLE IF EXISTS crash_master_before_segmentfile_drop CASCADE;
DROP
2:CREATE TABLE crash_master_before_segmentfile_drop (a INT, b INT, c CHAR(20));
CREATE
2:CREATE INDEX crash_master_before_segmentfile_drop_index ON crash_master_before_segmentfile_drop(b);
CREATE
2:INSERT INTO crash_master_before_segmentfile_drop SELECT i AS a, 1 AS b, 'hello world' AS c FROM generate_series(1, 10) AS i;
INSERT 10
2:DELETE FROM crash_master_before_segmentfile_drop WHERE a < 4;
DELETE 3

-- suspend at intended points
2:SELECT gp_inject_fault('compaction_before_cleanup_phase', 'suspend', '', '', 'crash_master_before_cleanup_phase', 1, -1, 0, 1);
 gp_inject_fault 
-----------------
 Success:        
(1 row)
1&:VACUUM crash_master_before_cleanup_phase;  <waiting ...>
SELECT gp_wait_until_triggered_fault('compaction_before_cleanup_phase', 1, 1);
 gp_wait_until_triggered_fault 
-------------------------------
 Success:                      
(1 row)

-- wait for suspend faults to trigger and then proceed to run next
-- command which would trigger panic fault and help test
-- crash_recovery
2:SELECT gp_inject_fault('compaction_before_segmentfile_drop', 'panic', '', '', 'crash_master_before_segmentfile_drop', 1, -1, 0, 1);
 gp_inject_fault 
-----------------
 Success:        
(1 row)
2:VACUUM crash_master_before_segmentfile_drop;
PANIC:  fault triggered, fault name:'compaction_before_segmentfile_drop' fault type:'panic'
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
1<:  <... completed>
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.

-- reset faults as protection incase tests failed and panic didn't happen
4:SELECT gp_inject_fault('compaction_before_cleanup_phase', 'reset', 1);
 gp_inject_fault 
-----------------
 Success:        
(1 row)
4:SELECT gp_inject_fault('compaction_before_segmentfile_drop', 'reset', 1);
 gp_inject_fault 
-----------------
 Success:        
(1 row)

-- perform post crash validation checks
-- for crash_master_before_cleanup_phase
4:SELECT segno,column_num,physical_segno,tupcount,modcount,state FROM gp_toolkit.__gp_aocsseg('crash_master_before_cleanup_phase');
 segno | column_num | physical_segno | tupcount | modcount | state 
-------+------------+----------------+----------+----------+-------
 1     | 0          | 1              | 4        | 2        | 1     
 1     | 1          | 129            | 4        | 2        | 1     
 1     | 2          | 257            | 4        | 2        | 1     
 2     | 0          | 2              | 3        | 0        | 1     
 2     | 1          | 130            | 3        | 0        | 1     
 2     | 2          | 258            | 3        | 0        | 1     
(6 rows)
4:INSERT INTO crash_master_before_cleanup_phase VALUES(1, 1, 'c'), (25, 6, 'c');
INSERT 2
4:UPDATE crash_master_before_cleanup_phase SET b = b+10 WHERE a=25;
UPDATE 1
4:SELECT * FROM crash_master_before_cleanup_phase ORDER BY a,b;
 a  | b  | c                    
----+----+----------------------
 1  | 1  | c                    
 4  | 1  | hello world          
 5  | 1  | hello world          
 6  | 1  | hello world          
 7  | 1  | hello world          
 8  | 1  | hello world          
 9  | 1  | hello world          
 10 | 1  | hello world          
 25 | 16 | c                    
(9 rows)
4:SELECT segno,column_num,physical_segno,tupcount,modcount,state FROM gp_toolkit.__gp_aocsseg('crash_master_before_cleanup_phase');
 segno | column_num | physical_segno | tupcount | modcount | state 
-------+------------+----------------+----------+----------+-------
 1     | 0          | 1              | 7        | 4        | 1     
 1     | 1          | 129            | 7        | 4        | 1     
 1     | 2          | 257            | 7        | 4        | 1     
 2     | 0          | 2              | 3        | 0        | 1     
 2     | 1          | 130            | 3        | 0        | 1     
 2     | 2          | 258            | 3        | 0        | 1     
(6 rows)
4:VACUUM crash_master_before_cleanup_phase;
VACUUM
4:SELECT segno,column_num,physical_segno,tupcount,modcount,state FROM gp_toolkit.__gp_aocsseg('crash_master_before_cleanup_phase');
 segno | column_num | physical_segno | tupcount | modcount | state 
-------+------------+----------------+----------+----------+-------
 1     | 0          | 1              | 1        | 4        | 1     
 1     | 1          | 129            | 1        | 4        | 1     
 1     | 2          | 257            | 1        | 4        | 1     
 2     | 0          | 2              | 3        | 0        | 1     
 2     | 1          | 130            | 3        | 0        | 1     
 2     | 2          | 258            | 3        | 0        | 1     
 3     | 0          | 3              | 5        | 0        | 1     
 3     | 1          | 131            | 5        | 0        | 1     
 3     | 2          | 259            | 5        | 0        | 1     
(9 rows)
4:INSERT INTO crash_master_before_cleanup_phase VALUES(21, 1, 'c'), (26, 1, 'c');
INSERT 2
4:UPDATE crash_master_before_cleanup_phase SET b = b+10 WHERE a=26;
UPDATE 1
4:SELECT * FROM crash_master_before_cleanup_phase ORDER BY a,b;
 a  | b  | c                    
----+----+----------------------
 1  | 1  | c                    
 4  | 1  | hello world          
 5  | 1  | hello world          
 6  | 1  | hello world          
 7  | 1  | hello world          
 8  | 1  | hello world          
 9  | 1  | hello world          
 10 | 1  | hello world          
 21 | 1  | c                    
 25 | 16 | c                    
 26 | 11 | c                    
(11 rows)
-- for crash_master_before_segmentfile_drop
4:SELECT segno,column_num,physical_segno,tupcount,modcount,state FROM gp_toolkit.__gp_aocsseg('crash_master_before_segmentfile_drop');
 segno | column_num | physical_segno | tupcount | modcount | state 
-------+------------+----------------+----------+----------+-------
 1     | 0          | 1              | 10       | 2        | 1     
 1     | 1          | 129            | 10       | 2        | 1     
 1     | 2          | 257            | 10       | 2        | 1     
 2     | 0          | 2              | 3        | 0        | 1     
 2     | 1          | 130            | 3        | 0        | 1     
 2     | 2          | 258            | 3        | 0        | 1     
(6 rows)
4:INSERT INTO crash_master_before_segmentfile_drop VALUES(1, 1, 'c'), (25, 6, 'c');
INSERT 2
4:UPDATE crash_master_before_segmentfile_drop SET b = b+10 WHERE a=25;
UPDATE 1
4:SELECT * FROM crash_master_before_segmentfile_drop ORDER BY a,b;
 a  | b  | c                    
----+----+----------------------
 1  | 1  | c                    
 4  | 1  | hello world          
 5  | 1  | hello world          
 6  | 1  | hello world          
 7  | 1  | hello world          
 8  | 1  | hello world          
 9  | 1  | hello world          
 10 | 1  | hello world          
 25 | 16 | c                    
(9 rows)
4:SELECT segno,column_num,physical_segno,tupcount,modcount,state FROM gp_toolkit.__gp_aocsseg('crash_master_before_segmentfile_drop');
 segno | column_num | physical_segno | tupcount | modcount | state 
-------+------------+----------------+----------+----------+-------
 1     | 0          | 1              | 10       | 2        | 1     
 1     | 1          | 129            | 10       | 2        | 1     
 1     | 2          | 257            | 10       | 2        | 1     
 2     | 0          | 2              | 6        | 2        | 1     
 2     | 1          | 130            | 6        | 2        | 1     
 2     | 2          | 258            | 6        | 2        | 1     
(6 rows)
4:VACUUM crash_master_before_segmentfile_drop;
VACUUM
4:SELECT segno,column_num,physical_segno,tupcount,modcount,state FROM gp_toolkit.__gp_aocsseg('crash_master_before_segmentfile_drop');
 segno | column_num | physical_segno | tupcount | modcount | state 
-------+------------+----------------+----------+----------+-------
 1     | 0          | 1              | 4        | 2        | 1     
 1     | 1          | 129            | 4        | 2        | 1     
 1     | 2          | 257            | 4        | 2        | 1     
 2     | 0          | 2              | 4        | 2        | 1     
 2     | 1          | 130            | 4        | 2        | 1     
 2     | 2          | 258            | 4        | 2        | 1     
 3     | 0          | 3              | 1        | 0        | 1     
 3     | 1          | 131            | 1        | 0        | 1     
 3     | 2          | 259            | 1        | 0        | 1     
(9 rows)
4:INSERT INTO crash_master_before_segmentfile_drop VALUES(21, 1, 'c'), (26, 1, 'c');
INSERT 2
4:UPDATE crash_master_before_segmentfile_drop SET b = b+10 WHERE a=26;
UPDATE 1
4:SELECT * FROM crash_master_before_segmentfile_drop ORDER BY a,b;
 a  | b  | c                    
----+----+----------------------
 1  | 1  | c                    
 4  | 1  | hello world          
 5  | 1  | hello world          
 6  | 1  | hello world          
 7  | 1  | hello world          
 8  | 1  | hello world          
 9  | 1  | hello world          
 10 | 1  | hello world          
 21 | 1  | c                    
 25 | 16 | c                    
 26 | 11 | c                    
(11 rows)

-- Scenario for validating mirror replays fine and doesn't crash on
-- truncate record replay even if file is missing.
-- skip FTS probes to avoid marking primary status down.
4:SELECT gp_inject_fault_infinite('fts_probe', 'skip', 1);
 gp_inject_fault_infinite 
--------------------------
 Success:                 
(1 row)
4:SELECT gp_request_fts_probe_scan();
 gp_request_fts_probe_scan 
---------------------------
 t                         
(1 row)
4:SELECT gp_wait_until_triggered_fault('fts_probe', 1, 1);
 gp_wait_until_triggered_fault 
-------------------------------
 Success:                      
(1 row)
4:SET gp_default_storage_options="appendonly=true,orientation=column";
SET
4:CREATE TABLE crash_vacuum_in_appendonly_insert_1 (a INT, b INT, c CHAR(20));
CREATE
-- just sanity check to make sure appendonly table is created
4:SELECT count(*) from pg_appendonly where relid in (select oid from pg_class where relname='crash_vacuum_in_appendonly_insert_1');
 count 
-------
 1     
(1 row)
4:INSERT INTO crash_vacuum_in_appendonly_insert_1 SELECT i AS a, 1 AS b, 'hello world' AS c FROM generate_series(1, 10) AS i;
INSERT 10
4:UPDATE crash_vacuum_in_appendonly_insert_1 SET b = 2;
UPDATE 10
4:SELECT gp_inject_fault('xlog_ao_insert', 'infinite_loop', 2);
 gp_inject_fault 
-----------------
 Success:        
(1 row)
-- This will cause file to be created on primary for segno 2 but crash
-- just before creating the xlog record. Hence, primary will have the
-- file but not mirror.
4&:VACUUM crash_vacuum_in_appendonly_insert_1;  <waiting ...>
5:SELECT gp_wait_until_triggered_fault('xlog_ao_insert', 1, 2);
 gp_wait_until_triggered_fault 
-------------------------------
 Success:                      
(1 row)
-- to make sure xlog gets flushed till this point to persist the
-- changes to pg_aocsseg.
5:CHECKPOINT;
CHECKPOINT
-- Restart the primary to interrupt vacuum at that exact point.
5:select pg_ctl((select datadir from gp_segment_configuration c where c.role='p' and c.content=0), 'restart');
 pg_ctl                                                                                               
------------------------------------------------------------------------------------------------------
 waiting for server to shut down done
server stopped
waiting for server to start done
server started
 
(1 row)
4<:  <... completed>
ERROR:  Error on receive from seg0 127.0.1.1:25432 pid=28337: server closed the connection unexpectedly
DETAIL:  
	This probably means the server terminated abnormally
	before or while processing the request.
-- Shows entries for new files added to pg_aocsseg table. These are
-- the entries next vacuum command will use to perform truncate.
0U:SELECT segno,column_num,physical_segno,tupcount,modcount,state FROM gp_toolkit.__gp_aocsseg('crash_vacuum_in_appendonly_insert_1');
 segno | column_num | physical_segno | tupcount | modcount | state 
-------+------------+----------------+----------+----------+-------
 1     | 0          | 1              | 10       | 2        | 1     
 1     | 1          | 129            | 10       | 2        | 1     
 1     | 2          | 257            | 10       | 2        | 1     
 2     | 0          | 2              | 0        | 0        | 1     
 2     | 1          | 130            | 0        | 0        | 1     
 2     | 2          | 258            | 0        | 0        | 1     
(6 rows)
-- generates truncate xlog record for all the files having entry in
-- pg_aocsseg table.
6:VACUUM crash_vacuum_in_appendonly_insert_1;
VACUUM
-- Make sure mirror is able to successfully replay all the truncate
-- records generated and doesn't encounter the "WAL contains
-- references to invalid pages" PANIC.
6:SELECT * from wait_for_replication_replay(5000);
 wait_for_replication_replay 
-----------------------------
 t                           
(1 row)
6:SELECT gp_inject_fault('fts_probe', 'reset', 1);
 gp_inject_fault 
-----------------
 Success:        
(1 row)
