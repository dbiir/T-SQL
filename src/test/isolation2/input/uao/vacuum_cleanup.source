-- @Description Test that when AO vacuum skips drop phase, the age of
-- the AO/AOCS table gets reduced correctly.

CREATE EXTENSION IF NOT EXISTS gp_inject_fault;

-- The age of the table is 1 after the following statement
2: create table ao_@orientation@_vacuum_cleanup2(a int, b int) with(appendonly=true, orientation=@orientation@);
-- The age of the table is 2 after the following statement
2: insert into ao_@orientation@_vacuum_cleanup2 select 0, i from generate_series(1, 100) i;
-- The age of the table is 7 after the following 5 statements
2: update ao_@orientation@_vacuum_cleanup2 set b = b + 1;
2: update ao_@orientation@_vacuum_cleanup2 set b = b + 1;
2: update ao_@orientation@_vacuum_cleanup2 set b = b + 1;
2: update ao_@orientation@_vacuum_cleanup2 set b = b + 1;
2: update ao_@orientation@_vacuum_cleanup2 set b = b + 1;

1: set vacuum_freeze_min_age = 0;
-- Check the age of the table just before vacuum (use BETWEEN to mask minor
-- differences that might happen if e.g. autovacuum kicks in)
1: select age(relfrozenxid) between 6 and 9, regexp_replace(replace(relname, 'ao_@orientation@_vacuum_cleanup2'::regclass::oid::text, '<oid>'), 'ao.*seg', '<seg>') from gp_dist_random('pg_class') where relkind in ('r','t','o','b','M') and relstorage not in ('x','f','v') and (relname like '%' || 'ao_@orientation@_vacuum_cleanup2'::regclass::oid || '%') and gp_segment_id = 0;

-- Hold AccessShareLock to make AO VACUUM skip drop phase
2: begin;
2: select count(*) from ao_@orientation@_vacuum_cleanup2;
1: vacuum ao_@orientation@_vacuum_cleanup2;

-- The age should be smaller now. All the xids before the first
-- vacuum were frozen. The relfrozenxid will be the xid of the last
-- transaction before the vacuum (in this case it is the update statement)
1: select age(relfrozenxid) < 7, regexp_replace(replace(relname, 'ao_@orientation@_vacuum_cleanup2'::regclass::oid::text, '<oid>'), 'ao.*seg', '<seg>') from gp_dist_random('pg_class') where relkind in ('r','t','o','b','M') and relstorage not in ('x','f','v') and (relname like '%' || 'ao_@orientation@_vacuum_cleanup2'::regclass::oid || '%') and gp_segment_id = 0;
2: end;

-- Check that drop phase is skipped, but still the cleanup phase is performed
-- when there are concurrent serializable transactions
1: create table ao_@orientation@_vacuum_cleanup3(a int, b int) with(appendonly=true, orientation=@orientation@);
1: insert into ao_@orientation@_vacuum_cleanup3 select i, i from generate_series(1, 100) i;
1: delete from ao_@orientation@_vacuum_cleanup3;

-- Check the age of the table before vacuum to make sure that clean phase gets
-- performed
1: select age(relfrozenxid) between 3 and 5, regexp_replace(replace(relname, 'ao_@orientation@_vacuum_cleanup3'::regclass::oid::text, '<oid>'), 'ao.*seg', '<seg>') from gp_dist_random('pg_class') where relkind in ('r','t','o','b','M') and relstorage not in ('x','f','v') and (relname like '%' || 'ao_@orientation@_vacuum_cleanup3'::regclass::oid || '%') and gp_segment_id = 0;
1: select gp_inject_fault_infinite('vacuum_relation_open_relation_during_drop_phase', 'suspend', 1);
1&: vacuum ao_@orientation@_vacuum_cleanup3;

-- Wait till compaction phase is completed and only then start the serializable
-- transaction to ensure that only drop phase is skipped
2: select wait_for_trigger_fault((select current_database()), 'vacuum_relation_open_relation_during_drop_phase', 1);
2: begin isolation level serializable;
2: select 123;
2: select gp_inject_fault('vacuum_relation_open_relation_during_drop_phase', 'reset', 1);

1<:
1: select age(relfrozenxid) < 5, regexp_replace(replace(relname, 'ao_@orientation@_vacuum_cleanup3'::regclass::oid::text, '<oid>'), 'ao.*seg', '<seg>') from gp_dist_random('pg_class') where relkind in ('r','t','o','b','M') and relstorage not in ('x','f','v') and (relname like '%' || 'ao_@orientation@_vacuum_cleanup3'::regclass::oid || '%') and gp_segment_id = 0;

-- Validate that the drop phase was skipped. segfile 1 should be in state 2
-- (AWAITING_DROP)
-- This result is related to data distribution.
-- Current hash algorithm is jump-consistent-hash.
1: SELECT gp_ao_or_aocs_seg('ao_@orientation@_vacuum_cleanup3') from gp_dist_random('gp_id');

2: commit;
