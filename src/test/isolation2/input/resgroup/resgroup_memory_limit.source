-- start_ignore
DROP ROLE IF EXISTS role1_memory_test;
DROP RESOURCE GROUP rg1_memory_test;
DROP RESOURCE GROUP rg2_memory_test;
-- end_ignore

CREATE OR REPLACE FUNCTION resGroupPalloc(float) RETURNS int AS
'@abs_builddir@/../regress/regress@DLSUFFIX@', 'resGroupPalloc'
LANGUAGE C READS SQL DATA;

CREATE OR REPLACE FUNCTION hold_memory_by_percent(float) RETURNS int AS $$
	SELECT * FROM resGroupPalloc($1)
$$ LANGUAGE sql;

CREATE OR REPLACE VIEW rg_mem_status AS
	SELECT groupname, memory_limit, memory_shared_quota
	FROM gp_toolkit.gp_resgroup_config
	WHERE groupname='rg1_memory_test' OR groupname='rg2_memory_test'
	ORDER BY groupid;

CREATE OR REPLACE VIEW memory_result AS SELECT rsgname, memory_usage from gp_toolkit.gp_resgroup_status;

--	1) single allocation
--	Group Share Quota = 0
--	Global Share Quota > 0
--	Slot Quota > 0
--	-----------------------

--	we assume system total chunks is 100%
--	rg1's expected: 100% * 52% => 52%
--	rg1's slot quota: 52% / 2 * 2 => 52%
--	rg1's single slot quota: 52% / 2 => 26%
--	rg1's shared quota: %52 - %52 => %0
--	system free chunks: 100% - 10% - 30% - 52% => 8%
--	memory available to one slot in rg1: 52%/2 + 0% + 8% => 34%
CREATE RESOURCE GROUP rg1_memory_test
    WITH (concurrency=2, cpu_rate_limit=10,
          memory_limit=52, memory_shared_quota=0);
CREATE ROLE role1_memory_test RESOURCE GROUP rg1_memory_test;

--	1a) on QD
1: SET ROLE TO role1_memory_test;
1: SELECT hold_memory_by_percent(0.14 / 0.52);
1: SELECT hold_memory_by_percent(0.14 / 0.52);
1: SELECT hold_memory_by_percent(0.14 / 0.52);
1q:

1: SET ROLE TO role1_memory_test;
1: BEGIN;
1: SELECT hold_memory_by_percent(0.14 / 0.52);
1: SELECT hold_memory_by_percent(0.14 / 0.52);
1: SELECT hold_memory_by_percent(0.14 / 0.52);
1q:

1: SET ROLE TO role1_memory_test;
1: SELECT hold_memory_by_percent(0.42 / 0.52);
1q:

--	1b) on QEs
1: SET ROLE TO role1_memory_test;
1: SELECT count(null) FROM gp_dist_random('gp_id') t1 WHERE hold_memory_by_percent(0.14 / 0.52)=0;
1: SELECT count(null) FROM gp_dist_random('gp_id') t1 WHERE hold_memory_by_percent(0.14 / 0.52)=0;
1: SELECT count(null) FROM gp_dist_random('gp_id') t1 WHERE hold_memory_by_percent(0.14 / 0.52)=0;
1q:

1: SET ROLE TO role1_memory_test;
1: SELECT count(null) FROM gp_dist_random('gp_id') t1 WHERE hold_memory_by_percent(0.42 / 0.52)=0;
1q:

DROP ROLE role1_memory_test;
DROP RESOURCE GROUP rg1_memory_test;

--	2) single allocation
--	Group Share Quota > 0
--	Global Share Quota > 0
--	Slot Quota > 0
--	-----------------------

--	we assume system total chunks is 100%
--	rg1's expected: 100% * 52 / 100 => 52%
--	rg1's slot quota: 52% * 60 /100 => 31%
--	rg1's single slot quota: 31% / 2 => 15.5%
--	rg1's shared quota: 52% - 31% => 21%
--	system free chunks: 100% - 10% - 30% - 52% => 8%
--	memory available to one slot in rg1: 15.5% + 21% + 8% => 44.5%

CREATE RESOURCE GROUP rg1_memory_test
    WITH (concurrency=2, cpu_rate_limit=10,
          memory_limit=52, memory_shared_quota=40);
CREATE ROLE role1_memory_test RESOURCE GROUP rg1_memory_test;

--	2a) on QD
1: SET ROLE TO role1_memory_test;
1: SELECT hold_memory_by_percent(0.12 / 0.52);
1: SELECT hold_memory_by_percent(0.12 / 0.52);
1: SELECT hold_memory_by_percent(0.12 / 0.52);
1: SELECT hold_memory_by_percent(0.12 / 0.52);
1q:

1: SET ROLE TO role1_memory_test;
1: BEGIN;
1: SELECT hold_memory_by_percent(0.12 / 0.52);
1: SELECT hold_memory_by_percent(0.12 / 0.52);
1: SELECT hold_memory_by_percent(0.12 / 0.52);
1: SELECT hold_memory_by_percent(0.12 / 0.52);
1q:

1: SET ROLE TO role1_memory_test;
1: SELECT hold_memory_by_percent(0.48 / 0.52);
1q:

--	2b) on QEs
1: SET ROLE TO role1_memory_test;
1: SELECT count(null) FROM gp_dist_random('gp_id') t1 WHERE hold_memory_by_percent(0.12 / 0.52)=0;
1: SELECT count(null) FROM gp_dist_random('gp_id') t1 WHERE hold_memory_by_percent(0.12 / 0.52)=0;
1: SELECT count(null) FROM gp_dist_random('gp_id') t1 WHERE hold_memory_by_percent(0.12 / 0.52)=0;
1: SELECT count(null) FROM gp_dist_random('gp_id') t1 WHERE hold_memory_by_percent(0.12 / 0.52)=0;
1q:

1: SET ROLE TO role1_memory_test;
1: SELECT count(null) FROM gp_dist_random('gp_id') t1 WHERE hold_memory_by_percent(0.48 / 0.52)=0;
1q:

DROP ROLE role1_memory_test;
DROP RESOURCE GROUP rg1_memory_test;

--	3) single allocation
--	Group Share Quota > 0
--	Global Share Quota > 0
--	Slot Quota = 0
--	-----------------------

--	we assume system total chunks is 100%
--	rg1's expected: 100% * 52 / 100 => 52%
--	rg1's slot quota: 0
--	rg1's shared quota: 52%
--	system free chunks: 100% - 10% - 30% - 52% => 8%
--	memory available to one slot in rg1: 52% + 8% => 60%

CREATE RESOURCE GROUP rg1_memory_test
    WITH (concurrency=2, cpu_rate_limit=10,
          memory_limit=52, memory_shared_quota=100);
CREATE ROLE role1_memory_test RESOURCE GROUP rg1_memory_test;

--	3a) on QD
1: SET ROLE TO role1_memory_test;
1: SELECT hold_memory_by_percent(0.25 / 0.52);
1: SELECT hold_memory_by_percent(0.25 / 0.52);
1: SELECT hold_memory_by_percent(0.25 / 0.52);
1q:

1: SET ROLE TO role1_memory_test;
1: BEGIN;
1: SELECT hold_memory_by_percent(0.25 / 0.52);
1: SELECT hold_memory_by_percent(0.25 / 0.52);
1: SELECT hold_memory_by_percent(0.25 / 0.52);
1q:

1: SET ROLE TO role1_memory_test;
1: SELECT hold_memory_by_percent(0.75 / 0.52);
1q:

--	3b) on QEs
1: SET ROLE TO role1_memory_test;
1: SELECT count(null) FROM gp_dist_random('gp_id') t1 WHERE hold_memory_by_percent(0.25 / 0.52)=0;
1: SELECT count(null) FROM gp_dist_random('gp_id') t1 WHERE hold_memory_by_percent(0.25 / 0.52)=0;
1: SELECT count(null) FROM gp_dist_random('gp_id') t1 WHERE hold_memory_by_percent(0.25 / 0.52)=0;
1q:

1: SET ROLE TO role1_memory_test;
1: SELECT count(null) FROM gp_dist_random('gp_id') t1 WHERE hold_memory_by_percent(0.75 / 0.52)=0;
1q:

DROP ROLE role1_memory_test;
DROP RESOURCE GROUP rg1_memory_test;

--	4) multi allocation in one group
--	Group Share Quota = 0
--	Global Share Quota > 0
--	Slot Quota > 0
--	-----------------------

--	we assume system total chunks is 100%
--	rg1's expected: 100% * 52 / 100 => 52%
--	rg1's slot quota: 52% / 2 * 2 => 52%
--	rg1's single slot quota: 52% / 2 => 26%
--	rg1's shared quota: 0
--	system free chunks: 100% - 10% - 30% - 52% => 8%
--	memory available to one slot in rg1: 26% + 8% => 34%

CREATE RESOURCE GROUP rg1_memory_test
    WITH (concurrency=2, cpu_rate_limit=10,
          memory_limit=52, memory_shared_quota=0);
CREATE ROLE role1_memory_test RESOURCE GROUP rg1_memory_test;

--	4a) on QD
--	not exceed the global share
1: SET ROLE TO role1_memory_test;
2: SET ROLE TO role1_memory_test;
1: BEGIN;
2: BEGIN;
1: SELECT hold_memory_by_percent(0.28 / 0.52);
2: SELECT hold_memory_by_percent(0.28 / 0.52);
1q:
2q:

--	exceed the global share
1: SET ROLE TO role1_memory_test;
2: SET ROLE TO role1_memory_test;
1: BEGIN;
2: BEGIN;
1: SELECT hold_memory_by_percent(0.32 / 0.52);
2: SELECT hold_memory_by_percent(0.32 / 0.52);
1q:
2q:

--	allocate serially
1: SET ROLE TO role1_memory_test;
2: SET ROLE TO role1_memory_test;
1: BEGIN;
2: BEGIN;
1: SELECT hold_memory_by_percent(0.32 / 0.52);
1q:
SELECT pg_sleep(1);
2: SELECT hold_memory_by_percent(0.32 / 0.52);
2q:

--	4b) on QEs
--	not exceed the global share
1: SET ROLE TO role1_memory_test;
2: SET ROLE TO role1_memory_test;
1: BEGIN;
2: BEGIN;
1: SELECT count(null) FROM gp_dist_random('gp_id') t1 WHERE hold_memory_by_percent(0.28 / 0.52)=0;
2: SELECT count(null) FROM gp_dist_random('gp_id') t1 WHERE hold_memory_by_percent(0.28 / 0.52)=0;
1q:
2q:

--	exceed the global share
1: SET ROLE TO role1_memory_test;
2: SET ROLE TO role1_memory_test;
1: BEGIN;
2: BEGIN;
1: SELECT count(null) FROM gp_dist_random('gp_id') t1 WHERE hold_memory_by_percent(0.32 / 0.52)=0;
2: SELECT count(null) FROM gp_dist_random('gp_id') t1 WHERE hold_memory_by_percent(0.32 / 0.52)=0;
1q:
2q:

--	allocate serially
1: SET ROLE TO role1_memory_test;
2: SET ROLE TO role1_memory_test;
1: BEGIN;
2: BEGIN;
1: SELECT count(null) FROM gp_dist_random('gp_id') t1 WHERE hold_memory_by_percent(0.32 / 0.52)=0;
1q:
SELECT pg_sleep(1);
2: SELECT count(null) FROM gp_dist_random('gp_id') t1 WHERE hold_memory_by_percent(0.32 / 0.52)=0;
2q:

DROP ROLE role1_memory_test;
DROP RESOURCE GROUP rg1_memory_test;

--	5) multi allocation in one group
--	Group Share Quota > 0
--	Global Share Quota > 0
--	Slot Quota > 0
--	-----------------------

--	we assume system total chunks is 100%
--	rg1's expected: 100% * 52 / 100 => 52%
--	rg1's slot quota: 52% * 50 / 100 => 26%
--	rg1's single slot quota: 26% / 2 => 13%
--	rg1's shared quota: 52% - 13% * 2 => 26%
--	system free chunks: 100% - 10% - 30% - 52% => 8%
--	memory available to one slot in rg1: 13% + 26% + 8% => 47%

CREATE RESOURCE GROUP rg1_memory_test
    WITH (concurrency=2, cpu_rate_limit=10,
          memory_limit=52, memory_shared_quota=50);
CREATE ROLE role1_memory_test RESOURCE GROUP rg1_memory_test;

--	5a) on QD
--	not exceed the global share
1: SET ROLE TO role1_memory_test;
2: SET ROLE TO role1_memory_test;
1: BEGIN;
2: BEGIN;
-- reserve all the group shared quota
1: SELECT hold_memory_by_percent(0.39 / 0.52);
-- must allocate from global share
2: SELECT hold_memory_by_percent(0.2 / 0.52);
1q:
2q:

--	exceed the global share
1: SET ROLE TO role1_memory_test;
2: SET ROLE TO role1_memory_test;
1: BEGIN;
2: BEGIN;
1: SELECT hold_memory_by_percent(0.39 / 0.52);
2: SELECT hold_memory_by_percent(0.39 / 0.52);
1q:
2q:

--	allocate serially
1: SET ROLE TO role1_memory_test;
2: SET ROLE TO role1_memory_test;
1: BEGIN;
2: BEGIN;
1: SELECT hold_memory_by_percent(0.39 / 0.52);
1q:
SELECT pg_sleep(1);
2: SELECT hold_memory_by_percent(0.39 / 0.52);
2q:

--	5b) on QEs
--	not exceed the global share
1: SET ROLE TO role1_memory_test;
2: SET ROLE TO role1_memory_test;
1: BEGIN;
2: BEGIN;
-- reserve all the group shared quota
1: SELECT count(null) FROM gp_dist_random('gp_id') t1 WHERE hold_memory_by_percent(0.39 / 0.52)=0;
-- must allocate from global share
2: SELECT count(null) FROM gp_dist_random('gp_id') t1 WHERE hold_memory_by_percent(0.2 / 0.52)=0;
1q:
2q:

--	exceed the global share
1: SET ROLE TO role1_memory_test;
2: SET ROLE TO role1_memory_test;
1: BEGIN;
2: BEGIN;
1: SELECT count(null) FROM gp_dist_random('gp_id') t1 WHERE hold_memory_by_percent(0.39 / 0.52)=0;
2: SELECT count(null) FROM gp_dist_random('gp_id') t1 WHERE hold_memory_by_percent(0.39 / 0.52)=0;
1q:
2q:

--	allocate serially
1: SET ROLE TO role1_memory_test;
2: SET ROLE TO role1_memory_test;
1: BEGIN;
2: BEGIN;
1: SELECT count(null) FROM gp_dist_random('gp_id') t1 WHERE hold_memory_by_percent(0.39 / 0.52)=0;
1q:
SELECT pg_sleep(1);
2: SELECT count(null) FROM gp_dist_random('gp_id') t1 WHERE hold_memory_by_percent(0.39 / 0.52)=0;
2q:

DROP ROLE role1_memory_test;
DROP RESOURCE GROUP rg1_memory_test;

--	6) multi allocation in different group
--	Group Share Quota > 0
--	Global Share Quota > 0
--	Slot Quota > 0
--	-----------------------

--	we assume system total chunks is 100%
--	rg1's expected: 100% * 20 / 100 => 20%
--	rg1's slot quota: 20% * 60 / 100 / 2 * 2 => 12%
--	rg1's single slot quota: 12% / 2 => 6%
--	rg1's shared quota: 20% - 6% * 2 => 8%
--	rg2 same as rg1
--	system free chunks: 100% - 10% - 30% - 100%*20/100 - 100%*20/100 => 20%
--	memory available to one slot in rg1/rg2: 6% + 8% + 20% => 34%

CREATE RESOURCE GROUP rg1_memory_test
    WITH (concurrency=2, cpu_rate_limit=10,
          memory_limit=20, memory_shared_quota=40);
CREATE RESOURCE GROUP rg2_memory_test
    WITH (concurrency=2, cpu_rate_limit=10,
          memory_limit=20, memory_shared_quota=40);
CREATE ROLE role1_memory_test RESOURCE GROUP rg1_memory_test;
CREATE ROLE role2_memory_test RESOURCE GROUP rg2_memory_test;

--	6a) on QD
--	not exceed the global share
1: SET ROLE TO role1_memory_test;
2: SET ROLE TO role2_memory_test;
1: BEGIN;
2: BEGIN;
1: SELECT hold_memory_by_percent(0.2 / 0.2);
2: SELECT hold_memory_by_percent(0.2 / 0.2);
1q:
2q:

--	exceed the global share
1: SET ROLE TO role1_memory_test;
2: SET ROLE TO role2_memory_test;
1: BEGIN;
2: BEGIN;
1: SELECT hold_memory_by_percent(0.3 / 0.2);
2: SELECT hold_memory_by_percent(0.3 / 0.2);
1q:
2q:

--	allocate serially
1: SET ROLE TO role1_memory_test;
2: SET ROLE TO role2_memory_test;
1: BEGIN;
2: BEGIN;
1: SELECT hold_memory_by_percent(0.3 / 0.2);
1q:
SELECT pg_sleep(1);
2: SELECT hold_memory_by_percent(0.3 / 0.2);
2q:

--	6b) on QEs
--	not exceed the global share
1: SET ROLE TO role1_memory_test;
2: SET ROLE TO role2_memory_test;
1: BEGIN;
2: BEGIN;
1: SELECT count(null) FROM gp_dist_random('gp_id') t1 WHERE hold_memory_by_percent(0.2 / 0.2)=0;
2: SELECT count(null) FROM gp_dist_random('gp_id') t1 WHERE hold_memory_by_percent(0.2 / 0.2)=0;
1q:
2q:

--	exceed the global share
1: SET ROLE TO role1_memory_test;
2: SET ROLE TO role2_memory_test;
1: BEGIN;
2: BEGIN;
1: SELECT count(null) FROM gp_dist_random('gp_id') t1 WHERE hold_memory_by_percent(0.3 / 0.2)=0;
2: SELECT count(null) FROM gp_dist_random('gp_id') t1 WHERE hold_memory_by_percent(0.3 / 0.2)=0;
1q:
2q:

--	allocate serially
1: SET ROLE TO role1_memory_test;
2: SET ROLE TO role2_memory_test;
1: BEGIN;
2: BEGIN;
1: SELECT count(null) FROM gp_dist_random('gp_id') t1 WHERE hold_memory_by_percent(0.3 / 0.2)=0;
1q:
SELECT pg_sleep(1);
2: SELECT count(null) FROM gp_dist_random('gp_id') t1 WHERE hold_memory_by_percent(0.3 / 0.2)=0;
2q:

DROP ROLE role1_memory_test;
DROP ROLE role2_memory_test;
DROP RESOURCE GROUP rg1_memory_test;
DROP RESOURCE GROUP rg2_memory_test;

--	7) DBA can increase global shared memory by decreasing 
--		any existing group_memory_limit
--	-----------------------

--	we assume system total chunks is 100%
--	rg1's expected: 100% * 30 / 100 => 30%
--	rg1's slot quota: 30%
--	rg1's single slot quota: 30% / 2 => 15%
--	rg1's shared quota: 0
--	rg2 same as rg1
--	system free chunks: 100% - 10% - 30% - 30% - 30% => 0
--	memory available to one slot in rg1/rg2: 15% + 0 + 0 => 15%

CREATE RESOURCE GROUP rg1_memory_test
    WITH (concurrency=2, cpu_rate_limit=10,
          memory_limit=30, memory_shared_quota=0);
CREATE RESOURCE GROUP rg2_memory_test
    WITH (concurrency=2, cpu_rate_limit=10,
          memory_limit=30, memory_shared_quota=0);
CREATE ROLE role1_memory_test RESOURCE GROUP rg1_memory_test;
CREATE ROLE role2_memory_test RESOURCE GROUP rg2_memory_test;

--	7a) on QD
--	not enough memory
1: SET ROLE TO role1_memory_test;
1: SELECT hold_memory_by_percent(0.2 / 0.3);
1q:

-- alter rg2 memory_limit so last query has enough memory
ALTER RESOURCE GROUP rg2_memory_test SET memory_limit 20;
--  system free chunks: 100% - 10% - 30% - 30% - 20% => 10%
--  memory available to one slot in rg1/rg2: 15% + 0 + 10% => 25%

--	enough memory for allocating
1: SET ROLE TO role1_memory_test;
1: SELECT hold_memory_by_percent(0.2 / 0.3);
1q:

--	7b) on QEs
--	not enough memory
ALTER RESOURCE GROUP rg2_memory_test SET memory_limit 30;
1: SET ROLE TO role1_memory_test;
1: SELECT count(null) FROM gp_dist_random('gp_id') t1 WHERE hold_memory_by_percent(0.2 / 0.3)=0;
1q:

-- alter rg2 memory_limit so last query has enough memory
ALTER RESOURCE GROUP rg2_memory_test SET memory_limit 20;
--  system free chunks: 100% - 10% - 30% - 30% - 20% => 10%
--  memory available to one slot in rg1/rg2: 15% + 0 + 10% => 25%

--	enough memory for allocating
1: SET ROLE TO role1_memory_test;
1: SELECT count(null) FROM gp_dist_random('gp_id') t1 WHERE hold_memory_by_percent(0.2 / 0.3)=0;
1q:

DROP ROLE role1_memory_test;
DROP ROLE role2_memory_test;
DROP RESOURCE GROUP rg1_memory_test;
DROP RESOURCE GROUP rg2_memory_test;
