DROP ROLE IF EXISTS role1_memory_test;
DROP ROLE IF EXISTS role2_memory_test;
-- start_ignore
DROP RESOURCE GROUP rg1_memory_test;
DROP RESOURCE GROUP rg2_memory_test;
-- end_ignore

CREATE OR REPLACE FUNCTION repeatPalloc(int, int) RETURNS int AS
'@abs_builddir@/../regress/regress@DLSUFFIX@', 'repeatPalloc'
LANGUAGE C READS SQL DATA;

CREATE OR REPLACE FUNCTION hold_memory(int, int) RETURNS int AS $$
    SELECT * FROM repeatPalloc(1, $2)
$$ LANGUAGE sql;

CREATE OR REPLACE VIEW eat_memory_on_qd AS
	SELECT hold_memory(0,20);

CREATE OR REPLACE VIEW eat_memory_on_one_slice AS
	SELECT count(null)
	FROM
	gp_dist_random('gp_id') t1
	WHERE hold_memory(t1.dbid,20)=0
	;

CREATE OR REPLACE VIEW eat_memory_on_slices AS
	SELECT count(null)
	FROM
	gp_dist_random('gp_id') t1,
	gp_dist_random('gp_id') t2
	WHERE hold_memory(t1.dbid,20)=0
	  AND hold_memory(t2.dbid,20)=0
	;

CREATE OR REPLACE FUNCTION round_test(float, integer) RETURNS float AS $$
	SELECT round($1 / $2) * $2
$$ LANGUAGE sql;

CREATE OR REPLACE VIEW memory_result AS
	SELECT rsgname, ismaster, round_test(avg(memory_usage), 10) AS avg_mem
	FROM(
		SELECT rsgname,
		       CASE (j->'key')::text WHEN '"-1"'::text THEN 1 ELSE 0 END AS ismaster,
		       ((j->'value')->>'used')::int AS memory_usage
		FROM(
			SELECT rsgname, row_to_json(json_each(memory_usage::json)) AS j FROM
			gp_toolkit.gp_resgroup_status
			WHERE rsgname='rg1_memory_test' OR rsgname='rg2_memory_test'
		    )a
		)b GROUP BY (rsgname, ismaster) ORDER BY rsgname, ismaster;

CREATE RESOURCE GROUP rg1_memory_test
	WITH (concurrency=2, cpu_rate_limit=10, memory_limit=30);
CREATE ROLE role1_memory_test RESOURCE GROUP rg1_memory_test;
CREATE RESOURCE GROUP rg2_memory_test
	WITH (concurrency=2, cpu_rate_limit=10, memory_limit=30);
CREATE ROLE role2_memory_test RESOURCE GROUP rg2_memory_test;

GRANT ALL ON eat_memory_on_qd TO role1_memory_test;
GRANT ALL ON eat_memory_on_one_slice TO role1_memory_test;
GRANT ALL ON eat_memory_on_slices TO role1_memory_test;
GRANT ALL ON memory_result TO role1_memory_test;

GRANT ALL ON eat_memory_on_qd TO role2_memory_test;
GRANT ALL ON eat_memory_on_one_slice TO role2_memory_test;
GRANT ALL ON eat_memory_on_slices TO role2_memory_test;
GRANT ALL ON memory_result TO role2_memory_test;

-- 1.1) QD only in transaction
1: SET ROLE TO role1_memory_test;
-- check initial state
SELECT * FROM memory_result;
1: BEGIN;
1: SELECT * FROM eat_memory_on_qd;
SELECT * FROM memory_result;
1q:

-- 1.2) QD only
1: SET ROLE TO role1_memory_test;
-- check initial state
SELECT * FROM memory_result;
1: SELECT * FROM eat_memory_on_qd;
SELECT * FROM memory_result;
1q:

-- 2.1) QEs on one slice
1: SET ROLE TO role1_memory_test;
1: SELECT 1 FROM eat_memory_on_one_slice;
SELECT * FROM memory_result;
1q:

-- 2.2) QEs on one slice in transaction
1: SET ROLE TO role1_memory_test;
1: BEGIN;
1: SELECT 1 FROM eat_memory_on_one_slice;
SELECT * FROM memory_result;
1q:

-- 2.3) QEs on one slice change resource group
1: SET ROLE TO role1_memory_test;
1: SELECT 1 FROM eat_memory_on_one_slice;
SELECT * FROM memory_result;
1: SET ROLE TO role2_memory_test;
1: SELECT 1 FROM eat_memory_on_one_slice;
SELECT * FROM memory_result;
1q:

-- 3) QEs on multiple slices
1: SET ROLE TO role1_memory_test;
1: SELECT 1 FROM eat_memory_on_slices;
SELECT * FROM memory_result;
1q:

-- recheck after cleanup
SELECT * FROM memory_result;

-- 4) single role concurrency test
1: SET ROLE TO role1_memory_test;
2: SET ROLE TO role1_memory_test;
-- QEs on multiple slices
1: SELECT 1 FROM eat_memory_on_slices;
2: SELECT 1 FROM eat_memory_on_slices;
SELECT * FROM memory_result;
1q:
2q:

-- 5) multi role concurrency test
1: SET ROLE TO role1_memory_test;
2: SET ROLE TO role2_memory_test;
-- QEs on multiple slices
1: SELECT * FROM eat_memory_on_slices;
2: SELECT * FROM eat_memory_on_slices;
SELECT * FROM memory_result;
1q:
2q:

-- cleanup
REVOKE ALL ON eat_memory_on_qd FROM role1_memory_test;
REVOKE ALL ON eat_memory_on_one_slice FROM role1_memory_test;
REVOKE ALL ON eat_memory_on_slices FROM role1_memory_test;
REVOKE ALL ON memory_result FROM role1_memory_test;

REVOKE ALL ON eat_memory_on_qd FROM role2_memory_test;
REVOKE ALL ON eat_memory_on_one_slice FROM role2_memory_test;
REVOKE ALL ON eat_memory_on_slices FROM role2_memory_test;
REVOKE ALL ON memory_result FROM role2_memory_test;

ALTER ROLE role1_memory_test RESOURCE GROUP none;
ALTER ROLE role2_memory_test RESOURCE GROUP none;

DROP ROLE role1_memory_test;
DROP ROLE role2_memory_test;
DROP RESOURCE GROUP rg1_memory_test;
DROP RESOURCE GROUP rg2_memory_test;
DROP VIEW memory_result;
