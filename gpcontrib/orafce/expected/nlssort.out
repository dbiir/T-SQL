-- Tests for nlssort
-- start_matchsubs
-- m/ERROR:  failed to set the requested LC_COLLATE value \[invalid\]/
-- s/ERROR:  failed to set the requested LC_COLLATE value \[invalid\].*/ERROR:  failed to set the requested LC_COLLATE value \[invalid\]/
-- end_matchsubs
SET client_min_messages = error;
DROP DATABASE IF EXISTS regression_sort;
CREATE DATABASE regression_sort WITH TEMPLATE = template0 ENCODING='UTF-8' LC_COLLATE='C' LC_CTYPE='C';
\c regression_sort
SET client_min_messages = error;
CREATE EXTENSION orafce;
SET client_min_messages = default;
CREATE TABLE test_sort (name TEXT);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'name' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO test_sort VALUES ('red'), ('brown'), ('yellow'), ('Purple');
SELECT * FROM test_sort ORDER BY NLSSORT(name, 'en_US.utf8');
  name  
--------
 brown
 Purple
 red
 yellow
(4 rows)

SELECT * FROM test_sort ORDER BY NLSSORT(name, '');
  name  
--------
 Purple
 brown
 red
 yellow
(4 rows)

SELECT set_nls_sort('invalid');
 set_nls_sort 
--------------
 
(1 row)

SELECT * FROM test_sort ORDER BY NLSSORT(name);
ERROR:  failed to set the requested LC_COLLATE value [invalid]
CONTEXT:  SQL function "nlssort" statement 1
SELECT set_nls_sort('');
 set_nls_sort 
--------------
 
(1 row)

SELECT * FROM test_sort ORDER BY NLSSORT(name);
  name  
--------
 Purple
 brown
 red
 yellow
(4 rows)

SELECT set_nls_sort('en_US.utf8');
 set_nls_sort 
--------------
 
(1 row)

SELECT * FROM test_sort ORDER BY NLSSORT(name);
  name  
--------
 brown
 Purple
 red
 yellow
(4 rows)

INSERT INTO test_sort VALUES(NULL);
SELECT * FROM test_sort ORDER BY NLSSORT(name);
  name  
--------
 brown
 Purple
 red
 yellow
 
(5 rows)

