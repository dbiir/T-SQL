-- Tests for quicklz compression.
-- Check that callbacks are registered
SELECT * FROM pg_compression WHERE compname = 'quicklz';
 compname |    compconstructor     |    compdestructor     |   compcompressor    |   compdecompressor    |    compvalidator     | compowner 
----------+------------------------+-----------------------+---------------------+-----------------------+----------------------+-----------
 quicklz  | gp_quicklz_constructor | gp_quicklz_destructor | gp_quicklz_compress | gp_quicklz_decompress | gp_quicklz_validator |        10
(1 row)

-- Test for appendonly row oriented
CREATE TABLE quicklztest_row (id int4, t text) WITH (appendonly=true, compresstype=quicklz, orientation=row);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'id' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
-- Check that the reloptions on the table shows compression type
-- This is order sensitive to base on the order that the options were declared in the DDL of the table.
SELECT reloptions[2] FROM pg_class WHERE relname = 'quicklztest_row';
      reloptions      
----------------------
 compresstype=quicklz
(1 row)

INSERT INTO quicklztest_row SELECT g, 'foo' || g FROM generate_series(1, 100) g;
INSERT INTO quicklztest_row SELECT g, 'bar' || g FROM generate_series(1, 100) g;
-- Check contents, at the beginning of the table and at the end.
SELECT * FROM quicklztest_row ORDER BY id LIMIT 4;
 id |  t   
----+------
  1 | foo1
  1 | bar1
  2 | foo2
  2 | bar2
(4 rows)

SELECT * FROM quicklztest_row ORDER BY id DESC LIMIT 4;
 id  |   t    
-----+--------
 100 | bar100
 100 | foo100
  99 | bar99
  99 | foo99
(4 rows)

-- Check that we actually compressed data
SELECT get_ao_compression_ratio('quicklztest_row');
 get_ao_compression_ratio 
--------------------------
                      1.8
(1 row)

-- Test for appendonly column oriented
CREATE TABLE quicklztest_column (id int4, t text) WITH (appendonly=true, compresstype=quicklz, orientation=column);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'id' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO quicklztest_column SELECT g, 'foo' || g FROM generate_series(1, 100) g;
INSERT INTO quicklztest_column SELECT g, 'bar' || g FROM generate_series(1, 100) g;
-- Check contents, at the beginning of the table and at the end.
SELECT * FROM quicklztest_column ORDER BY id LIMIT 4;
 id |  t   
----+------
  1 | foo1
  1 | bar1
  2 | foo2
  2 | bar2
(4 rows)

SELECT * FROM quicklztest_column ORDER BY id DESC LIMIT 4;
 id  |   t    
-----+--------
 100 | bar100
 100 | foo100
  99 | bar99
  99 | foo99
(4 rows)

-- Check that we actually compressed data
SELECT get_ao_compression_ratio('quicklztest_column');
 get_ao_compression_ratio 
--------------------------
                     1.29
(1 row)

-- Test the bounds of compresslevel. QuickLZ compresslevel 1 is the only one that should work.
CREATE TABLE quicklztest_invalid (id int4) WITH (appendonly=true, compresstype=quicklz, compresslevel=-1);
ERROR:  value -1 out of bounds for option "compresslevel"
DETAIL:  Valid values are between "0" and "19".
CREATE TABLE quicklztest_invalid (id int4) WITH (appendonly=true, compresstype=quicklz, compresslevel=0);
ERROR:  compresstype "quicklz" can't be used with compresslevel 0
CREATE TABLE quicklztest_invalid (id int4) WITH (appendonly=true, compresstype=quicklz, compresslevel=3);
ERROR:  compresslevel=3 is out of range for quicklz (should be 1)
-- CREATE TABLE for heap table with compresstype=quicklz should fail
CREATE TABLE quicklztest_heap (id int4, t text) WITH (compresstype=quicklz);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'id' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
ERROR:  invalid option "compresstype" for base relation
HINT:  "compresstype" is only valid for Append Only relations, create an AO relation to use "compresstype".
