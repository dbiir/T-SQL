--
-- map/reduce tests
--
-- Some notes: the PATH variable doesn't necessarily work correctly in
-- the regression context, so use the "gpwhich" token to get the full
-- path from your environment (see gpstringsubs for more details).  And
-- to make this work correctly with gpsourcify, you need to add your
-- gpwhich token to gptokencheck.

-- start_matchsubs
-- m|mapreduce_\d+_run|
-- s|mapreduce_\d+_run|mapreduce_PID_run|
-- end_matchsubs

--
-- This test makes use of plperlu
--
-- start_ignore

create language plperlu;
create language plpythonu;

-- Take a look at the installed languages, plperl and plpython should be in the list.
--  + pg_pltemplate contains the list of languages that can be simply installed
--  + pl_language contains the list of languages that are actually installed
select * from pg_pltemplate;
select lanname, lanispl, lanpltrusted from pg_language;

-- Check environment variables that should have been set by greenplum_path.sh
--
-- 1) We need to check these on all segments and on the master.
-- 2) We do this via external table rather than perl/python in case it is part
--    of the cause of a mis-installed plperl/plpython.
-- 3) It is normal for the master to have a slightly different enviornment from
--    the segments (but perhaps not desirable?)
--
CREATE EXTERNAL WEB TABLE env_segment(var text, value text) 
EXECUTE 'env | grep "^[^=]*=[^=]*$"' format 'text' (delimiter '=');
CREATE EXTERNAL WEB TABLE env_master(var text, value text) 
EXECUTE 'env | grep "^[^=]*=[^=]*$"' on master format 'text' (delimiter '=');
CREATE VIEW env AS
  SELECT gp_execution_segment(), * FROM env_segment
  UNION ALL
  SELECT gp_execution_segment(), * FROM env_master;

SELECT * FROM env WHERE var in (
	   'GPHOME', 
	   'DYLD_LIBRARY_PATH', 
	   'LD_LIBRARY_PATH', 
	   'PATH'
) ORDER BY var, gp_execution_segment;

-- end_ignore

-- start_ignore
--
-- Some checks to verify what versions of perl/python we have.
-- If everything has been configured correctly this should be constant
-- across all our installations.
--
-- All of these checks should return a single row because it should produce
-- a constant across all segments and the master.
--
-- The current expected version is 2.6.2
--
CREATE OR REPLACE FUNCTION python_version() returns text as $$
import sys
return sys.version_info
$$ language plpythonu NO SQL;

SELECT python_version() FROM env GROUP BY python_version;

--
-- Same check for perl version
--
-- Expected version is perl 5.008xxx
--
CREATE OR REPLACE FUNCTION perl_version() returns text as $$
return "Perl $]"
$$ language plperlu NO SQL;

SELECT perl_version() FROM env GROUP BY perl_version;


--
-- The following two checks need to be put into big ignore blocks
-- because paths can be of differing lengths
--

CREATE OR REPLACE FUNCTION python_path() returns text as $$
import sys
return sys.path[0]
$$ language plpythonu NO SQL;

SELECT python_path() FROM env GROUP BY python_path;

CREATE OR REPLACE FUNCTION perl_path() returns text as $$
return join(':', @INC)
$$ language plperlu NO SQL;

SELECT perl_path() FROM env GROUP BY perl_path;

-- end_ignore

--
-- Create a harness to run shell commands and output stderr and stdout
--
CREATE OR REPLACE FUNCTION execute(cmd text) returns text as $$
import subprocess
p = subprocess.Popen(cmd, shell=True, 
                     stdout=subprocess.PIPE, stderr=subprocess.PIPE)
r = p.communicate()
header = "---------------------\n"
return header + r[0]
$$ LANGUAGE plpythonu NO SQL;

--
-- Create a harness to run mapreduce jobs on the correct host/port
--
CREATE OR REPLACE FUNCTION mapreduce(file text) returns setof text as $$
import subprocess

rv = plpy.execute("select hostname, port, user as user, " +
   " current_database() as db from gp_segment_configuration where content=-1")

cmd = ['@gpwhich_gpmapreduce@',
       '--host=%s' % rv[0]['hostname'],
       '--port=%s' % rv[0]['port'],
       '--file=%s' % file,
       rv[0]['db'], rv[0]['user'] ]
p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
r = p.communicate()
header = "---------------------"
err = '\nSTDERR> '.join(('STDERR> ' + r[1]).split('\n')).replace('\t', '   ')
out = 'STDOUT>\n' + r[0].replace('\t', ', ')
return [header, err, out]
$$ LANGUAGE plpythonu READS SQL DATA;

CREATE OR REPLACE FUNCTION mapreduce(file text, keys text) returns setof text as $$
import subprocess

rv = plpy.execute("select hostname, port, user as user, " +
   " current_database() as db from gp_segment_configuration where content=-1")

cmd = ['@gpwhich_gpmapreduce@',
       '--host=%s' % rv[0]['hostname'],
       '--port=%s' % rv[0]['port'],
       '--file=%s' % file,
       rv[0]['db'], rv[0]['user'] ]
for key in keys.split(';'):
  cmd.append('--key=%s' % key)
p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
r = p.communicate()
header = "---------------------"
err = '\nSTDERR> '.join(('STDERR> ' + r[1]).split('\n')).replace('\t', '   ')
out = 'STDOUT>\n' + r[0].replace('\t', ', ')
return [header, err, out]
$$ LANGUAGE plpythonu READS SQL DATA;

--
-- CHECK 1) make sure plperlu is really installed:
--
-- Note: if not, you might need to 'export PG_LANG=true' and reconfigure/rebuild
--
SELECT lanname, lanispl, lanpltrusted FROM pg_language WHERE lanname = 'plperlu';

--
-- Since many of these tests will end up having variable length output depending
-- on local paths we want to disable the "----" lines from psql so that our diffs
-- look reasonable.
--
-- The default is "aligned" if that ever changes then we need to change how we restore
-- it at the end of the test
\pset format
\pset format unaligned

--
-- Check 2) Find gpmapreduce and print the help file
--
-- start_ignore
select execute( '@gpwhich_gpmapreduce@ --help' );
-- end_ignore

--
-- TEST 1) complain about missing file
--
SELECT mapreduce('nosuchfile') ORDER BY 1;


--
-- TEST 2) Tests reading and sorting an input file;
--
SELECT mapreduce('@abs_srcdir@/yml/sort.yml') ORDER BY 1;


--
-- TEST 3) Tests a basic map function and parameter passing
--
SELECT mapreduce('@abs_srcdir@/yml/grep.yml', 'key=an') ORDER BY 1;

--
-- Test 4) Tests producing multiple columns
--
SELECT mapreduce('@abs_srcdir@/yml/grep2.yml', 'key=an') ORDER BY 1;

--
-- Test 5) Tests a basic reduce function and the builtin counterpart
--
SELECT mapreduce('@abs_srcdir@/yml/agebracket.yml') ORDER BY 1;
SELECT mapreduce('@abs_srcdir@/yml/agebracket_builtin.yml') ORDER BY 1;

--
-- Test 6) File Output tests
--
SELECT execute('rm @abs_builddir@/results/fileout_*.out') ORDER BY 1;

SELECT mapreduce('@abs_srcdir@/yml/fileout.yml') ORDER BY 1;
SELECT execute('cat @abs_builddir@/results/fileout_none.out') ORDER BY 1;
SELECT execute('cat @abs_builddir@/results/fileout_replace.out') ORDER BY 1;
SELECT execute('cat @abs_builddir@/results/fileout_append.out') ORDER BY 1;

SELECT mapreduce('@abs_srcdir@/yml/fileout.yml') ORDER BY 1;
SELECT execute('cat @abs_builddir@/results/fileout_none.out') ORDER BY 1;
SELECT execute('cat @abs_builddir@/results/fileout_replace.out') ORDER BY 1;
SELECT execute('cat @abs_builddir@/results/fileout_append.out') ORDER BY 1;

-- 
-- Test 7) Syntax error lineno reporting
--
SELECT mapreduce('@abs_srcdir@/yml/perlerror.yml') ORDER BY 1;
SELECT mapreduce('@abs_srcdir@/yml/yamlerror.yml') ORDER BY 1;

-- Test 8) C functions using LIBRARY
SELECT mapreduce('@abs_srcdir@/yml/c.yml') ORDER BY 1;

-- Test 9) PageRank
SELECT mapreduce('@abs_srcdir@/yml/pagerank-init.yml') ORDER BY 1;
SELECT count(*) FROM pagerank_source;
SELECT mapreduce('@abs_srcdir@/yml/pagerank-iter.yml') ORDER BY 1;
SELECT mapreduce('@abs_srcdir@/yml/pagerank-final.yml') ORDER BY 1;
-- The result of the following test case is related to the underlying hash algorithm
-- because the intermediate result of computing is saved as table in gpdb and hash-distributed.
-- If you change the underlying hash algorithm, please remember to verify the answer and change
-- here also.
SELECT ps.value, pn.value FROM pagerank_source ps JOIN pagerank_next pn USING (key) WHERE ps.key = '17';

-- Test setup
CREATE TABLE simple (m int,n int) distributed randomly;
INSERT INTO simple VALUES (1,10), (2,20), (2,21), (2,22), (3,30), (4,40), (5,50), (5,50), (10,100), (2,21);
CREATE FUNCTION tran (state int, arg2 int) returns int language C AS '@abs_srcdir@/regress.so', 'tran';
CREATE FUNCTION tran (state int) returns int language C AS '@abs_srcdir@/regress.so', 'tran';
CREATE FUNCTION final (state int) returns int language C AS '@abs_srcdir@/regress.so', 'final';
CREATE FUNCTION cons (state int, value int, out output int) returns int language C AS '@abs_srcdir@/regress.so', 'cons';
CREATE FUNCTION cons_wrongtype (state int, value text) returns int language C AS '@abs_srcdir@/regress.so', 'cons';

CREATE OR REPLACE FUNCTION retcomposite(int)
    RETURNS SETOF __retcomposite
    AS '@abs_srcdir@/regress.so', 'retcomposite'
    LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION gpmapred_scube_accum8(numeric,numeric) RETURNS numeric
AS 'SELECT $1 + $2 * $2 * $2'
LANGUAGE SQL
IMMUTABLE
RETURNS NULL ON NULL INPUT;

CREATE AGGREGATE gpmapred_scube(numeric) (
  SFUNC = gpmapred_scube_accum8,
  STYPE  = numeric,
  INITCOND = 0 );

-- Test 10) Aggregate Function
SELECT mapreduce('@abs_srcdir@/yml/aggFunction.yml') ORDER BY 1;

-- Test 11) Built-in Functions
SELECT mapreduce('@abs_srcdir@/yml/builtinfunction.yml') ORDER BY 1;

-- Test 12) Ambigious function
SELECT mapreduce('@abs_srcdir@/yml/ambiguousfunction.yml') ORDER BY 1;

-- Test 13) Parameter override
SELECT mapreduce('@abs_srcdir@/yml/paramoverride.yml') ORDER BY 1;

-- Test 14) Incorrect parameter type
SELECT mapreduce('@abs_srcdir@/yml/paramdifftype.yml') ORDER BY 1;
--
-- Cleanup) Restore normal formatting options
--
\pset format aligned
