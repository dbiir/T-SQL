-- start_matchsubs
--
-- # Remove all segments > 2 from output
--
-- m/\s+\([3-9],t\)\s+/
-- s/\s+\([3-9],t\)\s+//
-- end_matchsubs
CREATE EXTENSION gp_distribution_policy;

CREATE TABLE APPENDONLY_TABLE(id int, some_data int) WITH (appendonly = true);
CREATE TABLE some_table(id int, some_data int);
INSERT INTO APPENDONLY_TABLE (SELECT gen_id, gen_data from generate_series(1, 10000) gen_id, generate_series(100000, 20000) gen_data);
INSERT INTO APPENDONLY_TABLE VALUES (NULL, 123);
INSERT INTO some_table (SELECT gen_id, gen_data from generate_series(100000, 20000) gen_id, generate_series(1, 10000) gen_data);
INSERT INTO some_table VALUES (NULL, 123);

CREATE TABLE nonfirst_distkey_table (id int4, t text) DISTRIBUTED BY (t);
INSERT INTO nonfirst_distkey_table SELECT g, g::text FROM generate_series(1, 100) g;

-- Check that AO Tables throw error when checked
SELECT gp_heap_distribution_check('appendonly_table');

-- Check partitioned table returns something
SELECT gp_heap_distribution_check('some_table');

-- Check that table with non-first key column also works
SELECT gp_heap_distribution_check('nonfirst_distkey_table');

-- Check that a table with the wrong distribution correctly displays a false
CREATE TABLE some_other_table(id int, some_other_data int) distributed by (id);

CREATE FUNCTION gp_execute_on_server(content smallint, query cstring) returns boolean
language C as '@abs_builddir@/../../src/test/regress/regress.so', 'gp_execute_on_server';

INSERT INTO some_other_table select i, i from generate_series(1,12)i;

-- Ensure that the distribution is correct on all segments.
SELECT gp_heap_distribution_check('some_other_table');

-- Deliberately change distribution key on segments such that only one
-- of the segments has correct distribution key.
select gp_execute_on_server(content, 'update some_other_table set id = 0') from
 gp_segment_configuration where role = 'p' and content >= 0;

-- Expect only one segment to have correct distribution.
SELECT gp_heap_distribution_check('some_other_table');

DROP TABLE some_other_table;

-- Cleanup
DROP TABLE APPENDONLY_TABLE;
DROP TABLE some_table;
-- Check that the Extension is removed successfully
DROP EXTENSION gp_distribution_policy;
SELECT gp_heap_distribution_check('appendonly_table');
