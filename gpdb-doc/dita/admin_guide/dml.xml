<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1" xml:lang="en">
  <title id="ix146103">Inserting, Updating, and Deleting Data</title>
  <shortdesc>This section provides information about manipulating data and concurrent access in
    Greenplum Database.</shortdesc>
  <body>
    <p>This topic includes the following subtopics:<ul id="ul_ahw_hty_sp">
        <li><xref href="#topic2" format="dita"/></li>
        <li><xref href="#topic3" format="dita"/></li>
        <li><xref href="#topic4" format="dita"/></li>
        <li><xref href="#topic5" format="dita"/></li>
        <li><xref href="#topic7" format="dita"/></li>
        <li><xref href="#topic_gdd" format="dita"/></li>
        <li><xref href="#topic9" format="dita"/></li>
        <li><xref href="#topic11" format="dita"/></li>
      </ul></p>
  </body>
  <topic id="topic2" xml:lang="en">
    <title id="ix140249">About Concurrency Control in Greenplum Database</title>
    <body>
      <p>Greenplum Database and PostgreSQL do not use locks for concurrency control. They maintain
        data consistency using a multiversion model, Multiversion Concurrency Control (MVCC). MVCC
        achieves transaction isolation for each database session, and each query transaction sees a
        snapshot of data. This ensures the transaction sees consistent data that is not affected by
        other concurrent transactions. </p>
      <p>Because MVCC does not use explicit locks for concurrency control, lock contention is
        minimized and Greenplum Database maintains reasonable performance in multiuser environments.
        Locks acquired for querying (reading) data do not conflict with locks acquired for writing
        data.</p>
      <p>Greenplum Database provides multiple lock modes to control concurrent access to data in
        tables. Most Greenplum Database SQL commands automatically acquire the appropriate locks to
        ensure that referenced tables are not dropped or modified in incompatible ways while a
        command executes. For applications that cannot adapt easily to MVCC behavior, you can use
        the <codeph>LOCK</codeph> command to acquire explicit locks. However, proper use of MVCC
        generally provides better performance.</p>
      <table id="ix140861">
        <title>Lock Modes in Greenplum Database</title>
        <tgroup cols="3">
          <colspec colnum="1" colname="col1" colwidth="2*"/>
          <colspec colnum="2" colname="col2" colwidth="3*"/>
          <colspec colnum="3" colname="col3" colwidth="3*"/>
          <thead>
            <row>
              <entry colname="col1">Lock Mode</entry>
              <entry colname="col2">Associated SQL Commands</entry>
              <entry colname="col3">Conflicts With</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry colname="col1">ACCESS SHARE</entry>
              <entry colname="col2">
                <codeph>SELECT</codeph>
              </entry>
              <entry colname="col3">ACCESS EXCLUSIVE</entry>
            </row>
            <row>
              <entry colname="col1">ROW SHARE</entry>
              <entry colname="col2">
                <codeph>SELECT...FOR <varname>lock_strength</varname></codeph><p>See <xref
                    href="#topic2/lock_note" format="dita">Note</xref>.</p></entry>
              <entry colname="col3">EXCLUSIVE, ACCESS EXCLUSIVE</entry>
            </row>
            <row>
              <entry colname="col1">ROW EXCLUSIVE</entry>
              <entry colname="col2"><codeph>INSERT</codeph>, <codeph>COPY</codeph><p>See <xref
                    href="#topic2/lock_note" format="dita">Note</xref>.</p></entry>
              <entry colname="col3">SHARE, SHARE ROW EXCLUSIVE, EXCLUSIVE, ACCESS EXCLUSIVE</entry>
            </row>
            <row>
              <entry colname="col1">SHARE UPDATE EXCLUSIVE</entry>
              <entry colname="col2"><codeph>VACUUM</codeph> (without <codeph>FULL</codeph>),
                  <codeph>ANALYZE</codeph></entry>
              <entry colname="col3">SHARE UPDATE EXCLUSIVE, SHARE, SHARE ROW EXCLUSIVE, EXCLUSIVE,
                ACCESS EXCLUSIVE</entry>
            </row>
            <row>
              <entry colname="col1">SHARE</entry>
              <entry colname="col2">
                <codeph>CREATE INDEX</codeph>
              </entry>
              <entry colname="col3">ROW EXCLUSIVE, SHARE UPDATE EXCLUSIVE, SHARE ROW EXCLUSIVE,
                EXCLUSIVE, ACCESS EXCLUSIVE</entry>
            </row>
            <row>
              <entry colname="col1">SHARE ROW EXCLUSIVE</entry>
              <entry colname="col2"/>
              <entry colname="col3">ROW EXCLUSIVE, SHARE UPDATE EXCLUSIVE, SHARE, SHARE ROW
                EXCLUSIVE, EXCLUSIVE, ACCESS EXCLUSIVE</entry>
            </row>
            <row>
              <entry colname="col1">EXCLUSIVE</entry>
              <entry colname="col2"><codeph>DELETE</codeph>, <codeph>UPDATE</codeph>,
                  <codeph>SELECT...FOR <varname>lock_strength</varname></codeph>, <codeph>REFRESH
                  MATERIALIZED VIEW CONCURRENTLY</codeph><p>See <xref href="#topic2/lock_note"
                    format="dita">Note</xref>.</p></entry>
              <entry colname="col3">ROW SHARE, ROW EXCLUSIVE, SHARE UPDATE EXCLUSIVE, SHARE, SHARE
                ROW EXCLUSIVE, EXCLUSIVE, ACCESS EXCLUSIVE</entry>
            </row>
            <row>
              <entry colname="col1">ACCESS EXCLUSIVE</entry>
              <entry colname="col2"><codeph>ALTER TABLE</codeph>, <codeph>DROP TABLE</codeph>,
                  <codeph>TRUNCATE</codeph>, <codeph>REINDEX</codeph>, <codeph>CLUSTER</codeph>,
                  <codeph>REFRESH MATERIALIZED VIEW</codeph> (without
                <codeph>CONCURRENTLY</codeph>), <codeph>VACUUM FULL</codeph>
              </entry>
              <entry colname="col3">ACCESS SHARE, ROW SHARE, ROW EXCLUSIVE, SHARE UPDATE EXCLUSIVE,
                SHARE, SHARE ROW EXCLUSIVE, EXCLUSIVE, ACCESS EXCLUSIVE</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <note id="lock_note">By default, the Global Deadlock Detector is disabled, and Greenplum
        Database acquires the more restrictive <codeph>EXCLUSIVE</codeph> lock (rather than
          <codeph>ROW EXCLUSIVE</codeph> in PostgreSQL) for <codeph>UPDATE</codeph>,
          <codeph>DELETE</codeph>, and <codeph>SELECT</codeph> queries with a locking clause
          (<codeph>FOR <varname>lock_strength</varname></codeph>).<p>When the Global Deadlock
          Detector is enabled:<ul id="ul_yxc_kgd_j3b">
            <li>The lock mode for some <codeph>DELETE</codeph> and <codeph>UPDATE</codeph>
              operations on heap tables is <codeph>ROW EXCLUSIVE</codeph>. See <xref
                href="#topic_gdd" format="dita"/>.</li>
            <li>The lock mode for some queries with a locking clause (<codeph>SELECT...FOR
                  <varname>lock_strength</varname></codeph>) is <codeph>ROW SHARE</codeph>. See "The
              Locking Clause" in <xref href="../ref_guide/sql_commands/SELECT.xml"/>.</li>
          </ul></p></note>
    </body>
  </topic>
  <topic id="topic3" xml:lang="en">
    <title id="ix140259">Inserting Rows</title>
    <body>
      <p>Use the <codeph>INSERT</codeph> command to create rows in a table. This command requires
        the table name and a value for each column in the table; you may optionally specify the
        column names in any order. If you do not specify column names, list the data values in the
        order of the columns in the table, separated by commas. </p>
      <p>For example, to specify the column names and the values to insert:</p>
      <codeblock>INSERT INTO products (name, price, product_no) VALUES ('Cheese', 9.99, 1);</codeblock>
      <p>To specify only the values to insert:</p>
      <p>
        <codeblock>INSERT INTO products VALUES (1, 'Cheese', 9.99);
</codeblock>
      </p>
      <p>Usually, the data values are literals (constants), but you can also use scalar expressions.
        For example:</p>
      <p>
        <codeblock>INSERT INTO films SELECT * FROM tmp_films WHERE date_prod &lt; 
'2016-05-07';
</codeblock>
      </p>
      <p>You can insert multiple rows in a single command. For example:</p>
      <p>
        <codeblock>INSERT INTO products (product_no, name, price) VALUES
    (1, 'Cheese', 9.99),
    (2, 'Bread', 1.99),
    (3, 'Milk', 2.99);
</codeblock>
      </p>
      <p>To insert data into a partitioned table, you specify the root partitioned table, the table
        created with the <codeph>CREATE TABLE</codeph> command. You also can specify a leaf child
        table of the partitioned table in an <codeph>INSERT</codeph> command. An error is returned
        if the data is not valid for the specified leaf child table. Specifying a child table that
        is not a leaf child table in the <codeph>INSERT</codeph> command is not supported. </p>
      <p>To insert large amounts of data, use external tables or the <codeph>COPY</codeph> command.
        These load mechanisms are more efficient than <codeph>INSERT</codeph> for inserting large
        quantities of rows. See <xref href="load/topics/g-loading-and-unloading-data.xml#topic1"/>
        for more information about bulk data loading.</p>
      <p>The storage model of append-optimized tables is optimized for bulk data loading. Greenplum
        does not recommend single row <codeph>INSERT</codeph> statements for append-optimized
        tables. For append-optimized tables, Greenplum Database supports a maximum of 127 concurrent
          <codeph>INSERT</codeph> transactions into a single append-optimized table.</p>
    </body>
  </topic>
  <topic id="topic4" xml:lang="en">
    <title id="ix156852">Updating Existing Rows</title>
    <body>
      <p>The <codeph>UPDATE</codeph> command updates rows in a table. You can update all rows, a
        subset of all rows, or individual rows in a table. You can update each column separately
        without affecting other columns.</p>
      <p>To perform an update, you need: </p>
      <ul>
        <li id="ix142075">The name of the table and columns to update</li>
        <li id="ix142076">The new values of the columns</li>
        <li id="ix142077">One or more conditions specifying the row or rows to be updated.</li>
      </ul>
      <p>For example, the following command updates all products that have a price of <i>5</i> to
        have a price of <i>10</i>:</p>
      <p>
        <codeblock>UPDATE products SET price = 10 WHERE price = 5;
</codeblock>
      </p>
      <p>Using <codeph>UPDATE</codeph> in Greenplum Database has the following restrictions:</p>
      <ul>
        <li id="ix155050">While GPORCA supports updates to Greenplum distribution key columns, the
          Postgres Planner does not.</li>
        <li id="ix142137">If mirrors are enabled, you cannot use <codeph>STABLE</codeph> or
            <codeph>VOLATILE</codeph> functions in an <codeph>UPDATE</codeph> statement.</li>
        <li id="ix155339">Greenplum Database partitioning columns cannot be updated.</li>
      </ul>
    </body>
  </topic>
  <topic id="topic5" xml:lang="en">
    <title id="ix140451">Deleting Rows</title>
    <body>
      <p>The <codeph>DELETE</codeph> command deletes rows from a table. Specify a
          <codeph>WHERE</codeph> clause to delete rows that match certain criteria. If you do not
        specify a <codeph>WHERE</codeph> clause, all rows in the table are deleted. The result is a
        valid, but empty, table. For example, to remove all rows from the products table that have a
        price of <i>10</i>:</p>
      <p>
        <codeblock>DELETE FROM products WHERE price = 10;
</codeblock>
      </p>
      <p>To delete all rows from a table:</p>
      <p>
        <codeblock>DELETE FROM products; 
</codeblock>
      </p>
      <p>Using <codeph>DELETE</codeph> in Greenplum Database has similar restrictions to using
          <codeph>UPDATE</codeph>:</p>
      <ul>
        <li id="ix155065">If mirrors are enabled, you cannot use <codeph>STABLE</codeph> or
            <codeph>VOLATILE</codeph> functions in an <codeph>UPDATE</codeph> statement.</li>
      </ul>
    </body>
    <topic id="topic6" xml:lang="en">
      <title id="ix142374">Truncating a Table</title>
      <body>
        <p>Use the <codeph>TRUNCATE</codeph> command to quickly remove all rows in a table. For
          example:</p>
        <p>
          <codeblock>TRUNCATE mytable;
</codeblock>
        </p>
        <p>This command empties a table of all rows in one operation. Note that
            <codeph>TRUNCATE</codeph> does not scan the table, therefore it does not process
          inherited child tables or <codeph>ON DELETE</codeph> rewrite rules. The command truncates
          only rows in the named table.</p>
      </body>
    </topic>
  </topic>
  <topic id="topic7" xml:lang="en">
    <title id="ix140458">Working With Transactions</title>
    <body>
      <p>Transactions allow you to bundle multiple SQL statements in one all-or-nothing
        operation.</p>
      <p>The following are the Greenplum Database SQL transaction commands:</p>
      <ul>
        <li id="ix140816"><codeph>BEGIN</codeph> or <codeph>START TRANSACTION </codeph>starts a
          transaction block. </li>
        <li id="ix140821"><codeph>END</codeph> or <codeph>COMMIT</codeph> commits the results of a
          transaction.</li>
        <li id="ix140822"><codeph>ROLLBACK</codeph> abandons a transaction without making any
          changes. </li>
        <li id="ix155584"><codeph>SAVEPOINT</codeph> marks a place in a transaction and enables
          partial rollback. You can roll back commands executed after a savepoint while maintaining
          commands executed before the savepoint.</li>
        <li id="ix155585"><codeph>ROLLBACK TO SAVEPOINT</codeph> rolls back a transaction to a
          savepoint. </li>
        <li id="ix155589"><codeph>RELEASE SAVEPOINT</codeph> destroys a savepoint within a
          transaction.</li>
      </ul>
    </body>
    <topic id="topic8" xml:lang="en">
      <title id="ix153949">Transaction Isolation Levels</title>
      <body>
        <p>Greenplum Database accepts the standard SQL transaction levels as follows:</p>
        <ul>
          <li id="ix153961"><codeph>READ UNCOMMITTED</codeph> and <codeph>READ COMMITTED</codeph>
            behave like the standard <codeph>READ COMMITTED</codeph>.</li>
          <li><codeph>REPEATABLE READ</codeph> and <codeph>SERIALIZABLE</codeph> behave like
              <codeph>REPEATABLE READ</codeph>.</li>
        </ul>
        <p>The following information describes the behavior of the Greenplum transaction levels.</p>
        <section>
          <title>Read Uncommitted and Read Committed</title>
          <p>Greenplum Database does not allow any command to see an uncommitted update in another
            concurrent transaction, so <codeph>READ UNCOMMITTED</codeph> behaves the same as
              <codeph>READ COMMITTED</codeph>. <codeph>READ COMMITTED</codeph> provides fast,
            simple, partial transaction isolation. <codeph>SELECT</codeph>, <codeph>UPDATE</codeph>,
            and <codeph>DELETE</codeph> commands operate on a snapshot of the database taken when
            the query started.</p>
          <p> A <codeph>SELECT</codeph> query:</p>
          <ul id="ul_vgl_55p_lgb">
            <li id="ix154052">Sees data committed before the query starts.</li>
            <li id="ix154063">Sees updates executed within the transaction.</li>
            <li id="ix154073">Does not see uncommitted data outside the transaction.</li>
            <li id="ix154080">Can possibly see changes that concurrent transactions made if the
              concurrent transaction is committed after the initial read in its own
              transaction.</li>
          </ul>
          <p>Successive <codeph>SELECT</codeph> queries in the same transaction can see different
            data if other concurrent transactions commit changes between the successive queries.
              <codeph>UPDATE</codeph> and <codeph>DELETE</codeph> commands find only rows committed
            before the commands started.</p>
          <p><codeph>READ COMMITTED</codeph> transaction isolation allows concurrent transactions to
            modify or lock a row before <codeph>UPDATE</codeph> or <codeph>DELETE</codeph> find the
            row. <codeph>READ COMMITTED</codeph> transaction isolation may be inadequate for
            applications that perform complex queries and updates and require a consistent view of
            the database.</p>
        </section>
        <section>
          <title>Repeatable Read and Serializable</title>
          <p><codeph>SERIALIZABLE</codeph> transaction isolation, as defined by the SQL standard,
            ensures that transactions that run concurrently produce the same results as if they were
            run one after another. If you specify <codeph>SERIALIZABLE</codeph> Greenplum Database
            falls back to <codeph>REPEATABLE READ</codeph>. <codeph>REPEATABLE READ</codeph>
            transactions prevent dirty reads, non-repeatable reads, and phantom reads without
            expensive locking, but Greenplum Database does not detect all serializability
            interactions that can occur during concurrent transaction execution. Concurrent
            transactions should be examined to identify interactions that are not prevented by
            disallowing concurrent updates of the same data. You can prevent these interactions by
            using explicit table locks or by requiring the conflicting transactions to update a
            dummy row introduced to represent the conflict.</p>
          <p>With <codeph>REPEATABLE READ</codeph> transactions, a <codeph>SELECT</codeph>
            query:</p>
          <ul id="ul_mpy_55p_lgb">
            <li id="ix154139">Sees a snapshot of the data as of the start of the transaction (not as
              of the start of the current query within the transaction).</li>
            <li id="ix155116">Sees only data committed before the query starts.</li>
            <li id="ix154149">Sees updates executed within the transaction.</li>
            <li id="ix154156">Does not see uncommitted data outside the transaction.</li>
            <li id="ix154163">Does not see changes that concurrent transactions make.</li>
            <li>Successive <codeph>SELECT</codeph> commands within a single transaction always see
              the same data.</li>
            <li><codeph>UPDATE</codeph>, <codeph>DELETE</codeph>, <codeph>SELECT FOR
              UPDATE</codeph>, and <codeph>SELECT FOR SHARE</codeph> commands find only rows
              committed before the command started. If a concurrent transaction has updated,
              deleted, or locked a target row, the <codeph>REPEATABLE READ</codeph> transaction
              waits for the concurrent transaction to commit or roll back the change. If the
              concurrent transaction commits the change, the <codeph>REPEATABLE READ</codeph>
              transaction rolls back. If the concurrent transaction rolls back its change,
                the<codeph>REPEATABLE READ</codeph> transaction can commit its changes. </li>
          </ul>
        </section>
        <p id="ix141505">The default transaction isolation level in Greenplum Database is
            <codeph>READ COMMITTED</codeph>. To change the isolation level for a transaction, declare
          the isolation level when you <codeph>BEGIN</codeph> the transaction or use the <codeph>SET
            TRANSACTION</codeph> command after the transaction starts.</p>
      </body>
    </topic>
  </topic>
  <topic id="topic_gdd" xml:lang="en">
    <title>Global Deadlock Detector</title>
    <body>
      <p>The Greenplum Database Global Deadlock Detector background worker process collects lock
        information on all segments and uses a directed algorithm to detect the existence of local
        and global deadlocks. This algorithm allows Greenplum Database to relax concurrent update
        and delete restrictions on heap tables. (Greenplum Database still employs table-level
        locking on AO/CO tables, restricting concurrent <codeph>UPDATE</codeph>,
          <codeph>DELETE</codeph>, and <codeph>SELECT...FOR
          <varname>lock_strength</varname></codeph> operations.) </p>
      <p>By default, the Global Deadlock Detector is disabled and Greenplum Database executes the
        concurrent <codeph>UPDATE</codeph> and <codeph>DELETE</codeph> operations on a heap table
        serially. You can enable these concurrent updates and have the Global Deadlock Detector
        determine when a deadlock exists by setting the server configuration parameter <xref
          href="../ref_guide/config_params/guc-list.xml#gp_enable_global_deadlock_detector"
            ><codeph>gp_enable_global_deadlock_detector</codeph></xref>. </p>
      <p>When the Global Deadlock Detector is enabled, the background worker process is
        automatically started on the master host when you start Greenplum Database. You configure
        the interval at which the Global Deadlock Detector collects and analyzes lock waiting data
        via the <codeph><xref
            href="../ref_guide/config_params/guc-list.xml#gp_global_deadlock_detector_period"
            type="section">gp_global_deadlock_detector_period</xref></codeph> server configuration
        parameter.</p>
      <p>If the Global Deadlock Detector determines that deadlock exists, it breaks the deadlock by
        cancelling one or more backend processes associated with the youngest transaction(s)
        involved. </p>
      <p>When the Global Deadlock Detector determines a deadlock exists for the following types of
        transactions, only one of the transactions will succeed. The other transactions will fail
        with an error indicating that concurrent updates to the same row is not allowed.<ul
          id="ul_bxf_mpp_5gb">
          <li>Concurrent transactions on the same row of a heap table where the first transaction is
            an update operation and a later transaction executes an update or delete and the query
            plan contains a motion operator.</li>
          <li>Concurrent update transactions on the same distribution key of a heap table that are
            executed by the Postgres Planner.</li>
          <li>Concurrent update transactions on the same row of a hash table that are executed by
            the GPORCA optimizer.</li>
        </ul></p>
      <note>Greenplum Database uses the interval specified in the <codeph><xref
            href="../ref_guide/config_params/guc-list.xml#deadlock_timeout" type="section"
            >deadlock_timeout</xref></codeph> server configuration parameter for local deadlock
        detection. Because the local and global deadlock detection algorithms differ, the cancelled
        process(es) may differ depending upon which detector (local or global) Greenplum Database
        triggers first.</note>
       <note>If the <codeph><xref
            href="../ref_guide/config_params/guc-list.xml#lock_timeout" type="section"
            >lock_timeout</xref></codeph> server configuration parameter
         is turned on and set to a value smaller than <codeph>deadlock_timeout</codeph>
         and <codeph>gp_global_deadlock_detector_period</codeph>, Greenplum Database
         will abort a statement before it would ever trigger a deadlock check in that
         session.</note>
      <p>To view lock waiting information for all segments, run the
          <codeph>gp_dist_wait_status()</codeph> user-defined function. You can use the output of
        this function to determine which transactions are waiting on locks, which transactions are
        holding locks, the lock types and mode, the waiter and holder session identifiers, and
        which segments are executing the transactions. Sample output of the
          <codeph>gp_dist_wait_status()</codeph> function follows:</p>
      <codeblock>SELECT * FROM pg_catalog.gp_dist_wait_status();
-[ RECORD 1 ]----+--------------
segid            | 0
waiter_dxid      | 11
holder_dxid      | 12
holdTillEndXact  | t
waiter_lpid      | 31249
holder_lpid      | 31458
waiter_lockmode  | ShareLock
waiter_locktype  | transactionid
waiter_sessionid | 8
holder_sessionid | 9
-[ RECORD 2 ]----+--------------
segid            | 1
waiter_dxid      | 12
holder_dxid      | 11
holdTillEndXact  | t
waiter_lpid      | 31467
holder_lpid      | 31250
waiter_lockmode  | ShareLock
waiter_locktype  | transactionid
waiter_sessionid | 9
holder_sessionid | 8
</codeblock>
      <p>When it cancels a transaction to break a deadlock, the Global Deadlock Detector reports the
        following error message:</p>
      <codeblock>ERROR:  canceling statement due to user request: "cancelled by global deadlock detector"</codeblock>
      <section id="gdd_example">
        <title>Global Deadlock Detector UPDATE and DELETE Compatibility</title>
        <p dir="ltr">The Global Deadlock Detector can manage concurrent updates for these types of
            <codeph>UPDATE</codeph> and <codeph>DELETE</codeph> commands on heap tables: </p>
        <ul id="ul_jrm_1r4_n3b">
          <li>Simple <codeph>UPDATE</codeph> of a single table. Update a non-distribution key with
            the Postgres Planner. The command does not contain a <codeph>FROM</codeph> clause, or a
            sub-query in the <codeph>WHERE</codeph> clause.
            <codeblock dir="ltr">UPDATE t SET c2 = c2 + 1 WHERE c1 > 10;</codeblock></li>
          <li>Simple <codeph>DELETE</codeph> of a single table. The command does not contain a
            sub-query in the <codeph>FROM</codeph> or <codeph>WHERE</codeph>
            clauses.<codeblock dir="ltr">DELETE FROM t WHERE c1 > 10;</codeblock></li>
          <li>Split <codeph>UPDATE</codeph>. For the Postgres Planner, the <codeph>UPDATE</codeph>
            command updates a distribution key.
              <codeblock dir="ltr">UPDATE t SET c = c + 1; -- c is a distribution key</codeblock><p
              dir="ltr">For GPORCA, the <codeph>UPDATE</codeph> command updates a distribution key
              or references a distribution key.
              <codeblock dir="ltr">UPDATE t SET b = b + 1 WHERE c = 10; -- c is a distribution key</codeblock></p></li>
          <li>Complex <codeph>UPDATE</codeph>. The <codeph>UPDATE</codeph> command includes multiple
            table
              joins.<codeblock dir="ltr">UPDATE t1 SET c = t1.c+1 FROM t2 WHERE t1.c = t2.c;</codeblock><p
              dir="ltr">Or the command contains a sub-query in the <codeph>WHERE</codeph>
              clause.</p><codeblock dir="ltr">UPDATE t SET c = c + 1 WHERE c > ALL(SELECT * FROM t1);</codeblock></li>
          <li>Complex <codeph>DELETE</codeph>. A complex <codeph>DELETE</codeph> command is similar
            to a complex <codeph>UPDATE</codeph>, and involves multiple table joins or a
            sub-query.<codeblock>DELETE FROM t USING t1 WHERE t.c > t1.c;</codeblock></li>
        </ul>
        <p>The following table shows the concurrent <codeph>UPDATE</codeph> or
            <codeph>DELETE</codeph> commands that are manged by the Global Deadlock Detector. For
          example, concurrent simple <codeph>UPDATE</codeph> commands on the same table row are
          managed by the Global Deadlock Detector. For a concurrent complex <codeph>UPDATE</codeph>
          and a simple <codeph>UPDATE</codeph>, only one <codeph>UPDATE</codeph> is performed, and
          an error is returned for the other <codeph>UPDATE</codeph>. </p>
        <p>
          <table id="table_krm_1r4_n3b">
            <title>Concurrent Updates and Deletes Managed by Global Deadlock Detector </title>
            <tgroup cols="6">
              <colspec colnum="1" colname="col1"/>
              <colspec colnum="2" colname="col2"/>
              <colspec colnum="3" colname="col3"/>
              <colspec colnum="4" colname="col4"/>
              <colspec colnum="5" colname="col5"/>
              <colspec colnum="6" colname="col6"/>
              <tbody>
                <row>
                  <entry/>
                  <entry dir="ltr">Simple <codeph>UPDATE</codeph></entry>
                  <entry dir="ltr">Simple <codeph>DELETE</codeph></entry>
                  <entry dir="ltr">Split <codeph>UPDATE</codeph></entry>
                  <entry dir="ltr">Complex <codeph>UPDATE</codeph></entry>
                  <entry dir="ltr">Complex <codeph>DELETE</codeph></entry>
                </row>
                <row>
                  <entry dir="ltr">Simple <codeph>UPDATE</codeph></entry>
                  <entry dir="ltr">YES</entry>
                  <entry dir="ltr">YES</entry>
                  <entry dir="ltr">NO</entry>
                  <entry dir="ltr">NO</entry>
                  <entry dir="ltr">NO</entry>
                </row>
                <row>
                  <entry dir="ltr">Simple <codeph>DELETE</codeph></entry>
                  <entry dir="ltr">YES</entry>
                  <entry dir="ltr">YES</entry>
                  <entry dir="ltr">NO</entry>
                  <entry dir="ltr">YES</entry>
                  <entry dir="ltr">YES</entry>
                </row>
                <row>
                  <entry dir="ltr">Split <codeph>UPDATE</codeph></entry>
                  <entry dir="ltr">NO</entry>
                  <entry dir="ltr">NO</entry>
                  <entry dir="ltr">NO</entry>
                  <entry dir="ltr">NO</entry>
                  <entry dir="ltr">NO</entry>
                </row>
                <row>
                  <entry dir="ltr">Complex <codeph>UPDATE</codeph></entry>
                  <entry dir="ltr">NO</entry>
                  <entry dir="ltr">YES</entry>
                  <entry dir="ltr">NO</entry>
                  <entry dir="ltr">NO</entry>
                  <entry dir="ltr">NO</entry>
                </row>
                <row>
                  <entry dir="ltr">Complex <codeph>DELETE</codeph></entry>
                  <entry dir="ltr">NO</entry>
                  <entry dir="ltr">YES</entry>
                  <entry dir="ltr">NO</entry>
                  <entry dir="ltr">NO</entry>
                  <entry dir="ltr">YES</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </p>
      </section>
    </body>
  </topic>
  <topic id="topic9" xml:lang="en">
    <title id="ix141487">Vacuuming the Database</title>
    <body>
      <p>Deleted or updated data rows occupy physical space on disk even though new transactions
        cannot see them. Periodically running the <codeph>VACUUM</codeph> command removes these
        expired rows. For example:</p>
      <p>
        <codeblock>VACUUM mytable;
</codeblock>
      </p>
      <p>The <codeph>VACUUM</codeph> command collects table-level statistics such as the number of
        rows and pages. Vacuum all tables after loading data, including append-optimized tables. For
        information about recommended routine vacuum operations, see <xref
          href="managing/maintain.xml#topic2" type="topic" format="dita"/>.</p>
      <note type="important">The <codeph>VACUUM</codeph>, <codeph>VACUUM FULL</codeph>, and
          <codeph>VACUUM ANALYZE</codeph> commands should be used to maintain the data in a
        Greenplum database especially if updates and deletes are frequently performed on your
        database data. See the <codeph>VACUUM</codeph> command in the <cite>Greenplum Database
          Reference Guide</cite> for information about using the command.</note>
    </body>
  </topic>
  <topic id="topic11" xml:lang="en">
    <title id="ix141487">Running Out of Locks</title>
    <body>
      <p>Greenplum Database can potentially run out of locks when a database
        operation accesses multiple tables in a single transaction. Backup
        and restore are examples of such operations.</p>
      <p>When Greenplum Database runs out of locks, the error message that
        you may observe references a shared memory error:
        <codeblock>... "WARNING","53200","out of shared memory",,,,,,"LOCK TABLE ...
... "ERROR","53200","out of shared memory",,"You might need to increase max_locks_per_transaction.",,,,"LOCK TABLE ...</codeblock></p>
      <note>"shared memory" in this context refers to the shared memory of
        the internal object: the lock slots. "Out of shared memory" does
        <i>not</i> refer to exhaustion of system- or Greenplum-level memory
        resources.</note>
      <p>As the hint describes, consider increasing the
        <xref href="../ref_guide/config_params/guc-list.xml#max_locks_per_transaction"><codeph>max_locks_per_transaction</codeph></xref>
        server configuration parameter when you encounter this error.</p>
    </body>
  </topic>
</topic>
