<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_gwc_jkd_3s">
  <title>About Database Statistics in Greenplum Database</title>
  <shortdesc>An overview of statistics gathered by the <codeph><xref
        href="../../ref_guide/sql_commands/ANALYZE.xml#topic1">ANALYZE</xref></codeph> command in
    Greenplum Database.</shortdesc>
  <body>
    <p>Statistics are metadata that describe the data stored in the database. The query optimizer
      needs up-to-date statistics to choose the best execution plan for a query. For example, if a
      query joins two tables and one of them must be broadcast to all segments, the optimizer can
      choose the smaller of the two tables to minimize network traffic. </p>
    <p>The statistics used by the optimizer are calculated and saved in the system catalog by the
        <codeph>ANALYZE</codeph> command. There are three ways to initiate an analyze operation:<ul
        id="ul_zkx_mpv_mt">
        <li>You can run the <codeph>ANALYZE</codeph> command directly.</li>
        <li>You can run the <codeph>analyzedb</codeph> management utility outside of the database,
          at the command line. </li>
        <li>An automatic analyze operation can be triggered when DML operations are performed on
          tables that have no statistics or when a DML operation modifies a number of rows greater
          than a specified threshold.</li>
      </ul>These methods are described in the following sections. The <codeph>VACUUM
        ANALYZE</codeph> command is another way to initiate an analyze operation, but its use is
      discouraged because vacuum and analyze are different operations with different purposes. </p>
    <p>Calculating statistics consumes time and resources, so Greenplum Database produces estimates
      by calculating statistics on samples of large tables. In most cases, the default settings
      provide the information needed to generate correct execution plans for queries. If the
      statistics produced are not producing optimal query execution plans, the administrator can
      tune configuration parameters to produce more accurate stastistics by increasing the sample
      size or the granularity of statistics saved in the system catalog. Producing more accurate
      statistics has CPU and storage costs and may not produce better plans, so it is important to
      view explain plans and test query performance to ensure that the additional statistics-related
      costs result in better query performance. </p>
  </body>
  <topic id="topic_oq3_qxj_3s">
    <title>System Statistics</title>
    <body>
      <section><title>Table Size</title><p>The query planner seeks to minimize the disk I/O and
          network traffic required to execute a query, using estimates of the number of rows that
          must be processed and the number of disk pages the query must access. The data from which
          these estimates are derived are the <codeph>pg_class</codeph> system table columns
            <codeph>reltuples</codeph> and <codeph>relpages</codeph>, which contain the number of
          rows and pages at the time a <codeph>VACUUM</codeph> or <codeph>ANALYZE</codeph> command
          was last run. As rows are added or deleted, the numbers become less accurate. However, an
          accurate count of disk pages is always available from the operating system, so as long as
          the ratio of <codeph>reltuples</codeph> to <codeph>relpages</codeph> does not change
          significantly, the optimizer can produce an estimate of the number of rows that is
          sufficiently accurate to choose the correct query execution plan. </p>When the
          <codeph>reltuples</codeph> column differs significantly from the row count returned by
          <codeph>SELECT COUNT(*)</codeph>, an analyze should be performed to update the statistics.
          <p>When a <codeph>REINDEX</codeph> command finishes recreating an index, the
            <codeph>relpages</codeph> and <codeph>reltuples</codeph> columns are set to zero. The
            <codeph>ANALYZE</codeph> command should be run on the base table to update these
          columns.</p></section>
      <section>
        <title>The pg_statistic System Table and pg_stats View</title>
        <p>The <codeph>pg_statistic</codeph> system table holds the results of the last
            <codeph>ANALYZE</codeph> operation on each database table. There is a row for each
          column of every table. It has the following columns:<parml>
            <plentry>
              <pt>starelid</pt>
              <pd>The object ID of the table or index the column belongs to.</pd>
            </plentry>
            <plentry>
              <pt>staattnum</pt>
              <pd>The number of the described column, beginning with 1.</pd>
            </plentry>
            <plentry>
              <pt>stainherit</pt>
              <pd>If true, the statistics include inheritance child columns, not just the values in
                the specified relation.</pd>
            </plentry>
            <plentry>
              <pt>stanullfrac</pt>
              <pd>The fraction of the column's entries that are null.</pd>
            </plentry>
            <plentry>
              <pt>stawidth</pt>
              <pd>The average stored width, in bytes, of non-null entries.</pd>
            </plentry>
            <plentry>
              <pt>stadistinct</pt>
              <pd>A positive number is an estimate of the number of distinct values in the column;
                the number is not expected to vary with the number of rows. A negative value is the
                number of distinct values divided by the number of rows, that is, the ratio of rows
                with distinct values for the column, negated. This form is used when the number of
                distinct values increases with the number of rows. A unique column, for example, has
                an <codeph>n_distinct</codeph> value of -1.0. Columns with an average width greater
                than 1024 are considered unique. </pd>
            </plentry>
            <plentry>
              <pt>stakind<i>N</i></pt>
              <pd>A code number indicating the kind of statistics stored in the <i>N</i>th slot of
                the <codeph>pg_statistic</codeph> row. </pd>
            </plentry>
            <plentry>
              <pt>staop<i>N</i></pt>
              <pd>An operator used to derive the statistics stored in the <i>N</i>th slot. For
                example, a histogram slot would show the &lt; operator that defines the sort order
                of the data. </pd>
            </plentry>
            <plentry>
              <pt>stanumbers<i>N</i></pt>
              <pd>float4 array containing numerical statistics of the appropriate kind for the
                  <i>N</i>th slot, or <codeph>NULL</codeph> if the slot kind does not involve
                numerical values.</pd>
            </plentry>
            <plentry>
              <pt>stavalues<i>N</i></pt>
              <pd>Column data values of the appropriate kind for the <i>N</i>th slot, or
                  <codeph>NULL</codeph> if the slot kind does not store any data values. Each
                array's element values are actually of the specific column's data type, so there is
                no way to define these columns' types more specifically than <i>anyarray</i>.</pd>
            </plentry>
          </parml></p>
        <p>The statistics collected for a column vary for different data types, so the
            <codeph>pg_statistic</codeph> table stores statistics that are appropriate for the data
          type in four <i>slots</i>, consisting of four columns per slot. For example, the first
          slot, which normally contains the most common values for a column, consists of the columns
            <codeph>stakind1</codeph>, <codeph>staop1</codeph>, <codeph>stanumbers1</codeph>, and
            <codeph>stavalues1</codeph>.</p>
        <p>The <codeph>stakind<varname>N</varname></codeph> columns each contain a numeric code to
          describe the type of statistics stored in their slot. The <codeph>stakind</codeph> code
          numbers from 1 to 99 are reserved for core PostgreSQL data types. Greenplum Database uses
          code numbers 1, 2, 3, 4, 5, and 99. A value of 0 means the slot is unused. The following
          table describes the kinds of statistics stored for the three codes.<table frame="all"
            id="table_upf_1yc_nt">
            <title>Contents of pg_statistic "slots"</title>
            <tgroup cols="2">
              <colspec colname="c1" colnum="1" colwidth="1.0*"/>
              <colspec colname="c2" colnum="2" colwidth="6.0*"/>
              <thead>
                <row>
                  <entry>stakind Code</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>1</entry>
                  <entry><i>Most CommonValues (MCV) Slot</i>
                    <ul id="ul_ipg_gyc_nt">
                      <li><codeph>staop</codeph> contains the object ID of the "=" operator, used to
                        decide whether values are the same or not.</li>
                      <li><codeph>stavalues</codeph> contains an array of the <varname>K</varname>
                        most common non-null values appearing in the column.</li>
                      <li><codeph>stanumbers</codeph> contains the frequencies (fractions of total
                        row count) of the values in the <codeph>stavalues</codeph> array. </li>
                    </ul>The values are ordered in decreasing frequency. Since the arrays are
                    variable-size, <varname>K</varname> can be chosen by the statistics collector.
                    Values must occur more than once to be added to the <codeph>stavalues</codeph>
                    array; a unique column has no MCV slot.</entry>
                </row>
                <row>
                  <entry>2</entry>
                  <entry><i>Histogram Slot</i> – describes the distribution of scalar data.<ul
                      id="ul_t2f_zyc_nt">
                      <li><codeph>staop</codeph> is the object ID of the "&lt;" operator, which
                        describes the sort ordering. </li>
                      <li><codeph>stavalues</codeph> contains <varname>M</varname> (where
                            <codeph><varname>M</varname>>=2</codeph>) non-null values that divide
                        the non-null column data values into <codeph><varname>M</varname>-1</codeph>
                        bins of approximately equal population. The first <codeph>stavalues</codeph>
                        item is the minimum value and the last is the maximum value. </li>
                      <li><codeph>stanumbers</codeph> is not used and should be
                          <codeph>NULL</codeph>. </li>
                    </ul><p>If a Most Common Values slot is also provided, then the histogram
                      describes the data distribution after removing the values listed in the MCV
                      array. (It is a <i>compressed histogram</i> in the technical parlance). This
                      allows a more accurate representation of the distribution of a column with
                      some very common values. In a column with only a few distinct values, it is
                      possible that the MCV list describes the entire data population; in this case
                      the histogram reduces to empty and should be omitted.</p></entry>
                </row>
                <row>
                  <entry>3</entry>
                  <entry><i>Correlation Slot</i> – describes the correlation between the physical
                    order of table tuples and the ordering of data values of this column. <ul
                      id="ul_yvj_sfd_nt">
                      <li><codeph>staop</codeph> is the object ID of the "&lt;" operator. As with
                        the histogram, more than one entry could theoretically appear.</li>
                      <li><codeph>stavalues</codeph> is not used and should be
                        <codeph>NULL</codeph>. </li>
                      <li><codeph>stanumbers</codeph> contains a single entry, the correlation
                        coefficient between the sequence of data values and the sequence of their
                        actual tuple positions. The coefficient ranges from +1 to -1.</li>
                    </ul></entry>
                </row>
                <row>
                  <entry>4</entry>
                  <entry><i>Most Common Elements Slot</i> - is similar to a Most Common Values (MCV)
                    Slot, except that it stores the most common non-null <i>elements</i> of the
                    column values. This is useful when the column datatype is an array or some other
                    type with identifiable elements (for instance, <codeph>tsvector</codeph>). <ul
                      id="ul_kj4_wnm_y2b">
                      <li><codeph>staop</codeph> contains the equality operator appropriate to the
                        element type. </li>
                      <li><codeph>stavalues</codeph> contains the most common element values.</li>
                      <li><codeph>stanumbers</codeph> contains common element frequencies. </li>
                    </ul><p>Frequencies are measured as the fraction of non-null rows the element
                      value appears in, not the frequency of all rows. Also, the values are sorted
                      into the element type's default order (to support binary search for a
                      particular value). Since this puts the minimum and maximum frequencies at
                      unpredictable spots in <codeph>stanumbers</codeph>, there are two extra
                      members of <codeph>stanumbers</codeph> that hold copies of the minimum and
                      maximum frequencies. Optionally, there can be a third extra member that holds
                      the frequency of null elements (the frequency is expressed in the same terms:
                      the fraction of non-null rows that contain at least one null element). If this
                      member is omitted, the column is presumed to contain no <codeph>NULL</codeph>
                      elements. </p>
                    <note>For <codeph>tsvector</codeph> columns, the <codeph>stavalues</codeph>
                      elements are of type <codeph>text</codeph>, even though their representation
                      within <codeph>tsvector</codeph> is not exactly
                    <codeph>text</codeph>.</note></entry>
                </row>
                <row>
                  <entry>5</entry>
                  <entry><i>Distinct Elements Count Histogram Slot</i> - describes the distribution
                    of the number of distinct element values present in each row of an array-type
                    column. Only non-null rows are considered, and only non-null elements.<ul
                      id="ul_gmr_jnm_y2b">
                      <li><codeph>staop</codeph> contains the equality operator appropriate to the
                        element type. </li>
                      <li><codeph>stavalues</codeph> is not used and should be
                        <codeph>NULL</codeph>. </li>
                      <li><codeph>stanumbers</codeph> contains information about distinct elements.
                        The last member of <codeph>stanumbers</codeph> is the average count of
                        distinct element values over all non-null rows. The preceding
                          <varname>M</varname> (where <codeph><varname>M</varname> >=2</codeph>)
                        members form a histogram that divides the population of distinct-elements
                        counts into <codeph><varname>M</varname>-1</codeph> bins of approximately
                        equal population. The first of these is the minimum observed count, and the
                        last the maximum.</li>
                    </ul></entry>
                </row>
                <row>
                  <entry>99</entry>
                  <entry><i>Hyperloglog Slot</i> - for child leaf partitions of a partitioned table,
                    stores the <codeph>hyperloglog_counter</codeph> created for the sampled data.
                    The <codeph>hyperloglog_counter</codeph> data structure is converted into a
                      <codeph>bytea</codeph> and stored in a <codeph>stavalues5</codeph> slot of the
                      <codeph>pg_statistic</codeph> catalog table.</entry>
                </row>
              </tbody>
            </tgroup>
          </table></p>
        <p>The <codeph>pg_stats</codeph> view presents the contents of <codeph>pg_statistic</codeph>
          in a friendlier format. The <codeph>pg_stats</codeph> view has the following columns:<dl>
            <dlentry>
              <dt>schemaname</dt>
              <dd>The name of the schema containing the table.</dd>
            </dlentry>
            <dlentry>
              <dt>tablename</dt>
              <dd>The name of the table.</dd>
            </dlentry>
            <dlentry>
              <dt>attname</dt>
              <dd>The name of the column this row describes.</dd>
            </dlentry>
            <dlentry>
              <dt>inherited</dt>
              <dd>If true, the statistics include inheritance child columns.</dd>
            </dlentry>
            <dlentry>
              <dt>null_frac</dt>
              <dd>The fraction of column entries that are null.</dd>
            </dlentry>
            <dlentry>
              <dt>avg_width</dt>
              <dd>The average storage width in bytes of the column's entries, calculated as
                    <codeph>avg(pg_column_size(<varname>column_name</varname>))</codeph>. </dd>
            </dlentry>
            <dlentry>
              <dt>n_distinct</dt>
              <dd>A positive number is an estimate of the number of distinct values in the column;
                the number is not expected to vary with the number of rows. A negative value is the
                number of distinct values divided by the number of rows, that is, the ratio of rows
                with distinct values for the column, negated. This form is used when the number of
                distinct values increases with the number of rows. A unique column, for example, has
                an <codeph>n_distinct</codeph> value of -1.0. Columns with an average width greater
                than 1024 are considered unique. </dd>
            </dlentry>
            <dlentry>
              <dt>most_common_vals</dt>
              <dd>An array containing the most common values in the column, or null if no values
                seem to be more common. If the <codeph>n_distinct</codeph> column is -1,
                  <codeph>most_common_vals</codeph> is null. The length of the array is the lesser
                of the number of actual distinct column values or the value of the
                  <codeph>default_statistics_target</codeph> configuration parameter. The number of
                values can be overridden for a column using <codeph>ALTER TABLE
                    <varname>table</varname> SET COLUMN <varname>column</varname> SET STATISTICS
                    <varname>N</varname></codeph>.</dd>
            </dlentry>
            <dlentry>
              <dt>most_common_freqs</dt>
              <dd>An array containing the frequencies of the values in the
                  <codeph>most_common_vals</codeph> array. This is the number of occurrences of the
                value divided by the total number of rows. The array is the same length as the
                  <codeph>most_common_vals</codeph> array. It is null if
                  <codeph>most_common_vals</codeph> is null.</dd>
            </dlentry>
            <dlentry>
              <dt>histogram_bounds</dt>
              <dd>An array of values that divide the column values into groups of approximately the
                same size. A histogram can be defined only if there is a <codeph>max()</codeph>
                aggregate function for the column. The number of groups in the histogram is the same
                as the <codeph>most_common_vals</codeph> array size. </dd>
            </dlentry>
            <dlentry>
              <dt>correlation</dt>
              <dd>Greenplum Database does not calculate the correlation statistic. </dd>
            </dlentry>
            <dlentry>
              <dt>most_common_elems</dt>
              <dd>An array that contains the most common element values.</dd>
            </dlentry>
          </dl><dl>
            <dlentry>
              <dt>most_common_elem_freqs</dt>
              <dd>An array that contains common element frequencies.</dd>
            </dlentry>
            <dlentry>
              <dt>elem_count_histogram</dt>
              <dd>An array that describes the distribution of the number of distinct element values
                present in each row of an array-type column. </dd>
            </dlentry>
          </dl></p>
        <p>Newly created tables and indexes have no statistics. You can check for tables with
          missing statistics using the <codeph>gp_stats_missing</codeph> view, which is in the
            <codeph>gp_toolkit</codeph>
          schema:<codeblock>SELECT * from gp_toolkit.gp_stats_missing;</codeblock></p>
      </section>
      <section id="section_wsy_1rv_mt">
        <title>Sampling</title>
        <p>When calculating statistics for large tables, Greenplum Database creates a smaller table
          by sampling the base table. If the table is partitioned, samples are taken from all
          partitions. </p>
      </section>
      <section id="section_u5p_brv_mt">
        <title>Updating Statistics</title>
        <p>Running <codeph>ANALYZE</codeph> with no arguments updates statistics for all tables in
          the database. This could take a very long time, so it is better to analyze tables
          selectively after data has changed. You can also analyze a subset of the columns in a
          table, for example columns used in joins, <codeph>WHERE</codeph> clauses,
            <codeph>SORT</codeph> clauses, <codeph>GROUP BY</codeph> clauses, or
            <codeph>HAVING</codeph> clauses. </p>
        <p>Analyzing a severely bloated table can generate poor statistics if the sample contains
          empty pages, so it is good practice to vacuum a bloated table before analyzing it. </p>
        <p>See the <i>SQL Command Reference</i> in the <i>Greenplum Database Reference Guide</i> for
          details of running the <codeph>ANALYZE</codeph> command.</p>
        <p>Refer to the <i>Greenplum Database Management Utility Reference</i> for details of
          running the <codeph>analyzedb</codeph> command.</p>
      </section>
      <section id="section_cv2_crv_mt"><title>Analyzing Partitioned Tables</title><p>When the
            <codeph>ANALYZE</codeph> command is run on a partitioned table, it analyzes each child
          leaf partition table, one at a time. You can run <codeph>ANALYZE</codeph> on just new or
          changed partition files to avoid analyzing partitions that have not changed. </p><p>The
            <codeph>analyzedb</codeph> command-line utility skips unchanged partitions
          automatically. It also runs concurrent sessions so it can analyze several partitions
          concurrently. It runs five sessions by default, but the number of sessions can be set from
          1 to 10 with the <codeph>-p</codeph> command-line option. Each time
            <codeph>analyzedb</codeph> runs, it saves state information for append-optimized tables
          and partitions in the <codeph>db_analyze</codeph> directory in the master data directory.
          The next time it runs, <codeph>analyzedb</codeph> compares the current state of each table
          with the saved state and skips analyzing a table or partition if it is unchanged. Heap
          tables are always analyzed. </p><p>If GPORCA is enabled (the default), you also need to
          run <codeph>ANALYZE</codeph> or <codeph>ANALYZE ROOTPARTITION</codeph> to refresh the root
          partition statistics. GPORCA requires statistics at the root level for partitioned tables.
          The Postgres Planner does not use these statistics. </p><p>The time to analyze a
          partitioned table is similar to the time to analyze a non-partitioned table with the same
          data since <codeph>ANALYZE ROOTPARTITION</codeph> does not collect statistics on the leaf
          partitions (the data is only sampled). The <codeph>analyzedb</codeph> utility updates root
          partition statistics by default but you can add the <codeph>--skip_root_stats</codeph>
          option to leave root partition statistics empty if you do not use GPORCA. </p><p>The Greenplum Database server configuration parameter <codeph><xref
              href="../../ref_guide/config_params/guc-list.xml#optimizer_analyze_root_partition"
              >optimizer_analyze_root_partition</xref></codeph> affects when statistics are
          collected on the root partition of a partitioned table. If the parameter is
            <codeph>on</codeph> (the default), the <codeph>ROOTPARTITION</codeph> keyword is not
          required to collect statistics on the root partition when you run
          <codeph>ANALYZE</codeph>. Root partition statistics are collected when you run
            <codeph>ANALYZE</codeph> on the root partition, or when you run <codeph>ANALYZE</codeph>
          on a child leaf partition of the partitioned table and the other child leaf partitions
          have statistics. If the parameter is <codeph>off</codeph>, you must run <codeph>ANALYZE
            ROOTPARTITION</codeph> to collect root partition statistics.</p><p>If you do
          not intend to execute queries on partitioned tables with GPORCA (setting the server
          configuration parameter <codeph><xref
              href="../../ref_guide/config_params/guc-list.xml#optimizer"
              >optimizer</xref></codeph> to <codeph>off</codeph>), you can also set the server
          configuration parameter <codeph>optimizer_analyze_root_partition</codeph> to
            <codeph>off</codeph> to limit when <codeph>ANALYZE</codeph> updates the root partition
          statistics. </p></section>
    </body>
  </topic>
  <topic id="topic_gyb_qrd_2t">
    <title>Configuring Statistics</title>
    <body>
      <p>There are several options for configuring Greenplum Database statistics collection.</p>
      <section>
        <title>Statistics Target</title>
        <p>The statistics target is the size of the <codeph>most_common_vals</codeph>,
            <codeph>most_common_freqs</codeph>, and <codeph>histogram_bounds</codeph> arrays for an
          individual column. By default, the target is 25. The default target can be changed by
          setting a server configuration parameter and the target can be set for any column using
          the <codeph>ALTER TABLE</codeph> command. Larger values increase the time needed to do
            <codeph>ANALYZE</codeph>, but may improve the quality of the Postgres Planner estimates.</p>
        <p>Set the system default statistics target to a different value by setting the
            <codeph>default_statistics_target</codeph> server configuration parameter. The default
          value is usually sufficient, and you should only raise or lower it if your tests
          demonstrate that query plans improve with the new target. For example, to raise the
          default statistics target from 100 to 150 you can use the <codeph>gpconfig</codeph>
          utility:<codeblock>gpconfig -c default_statistics_target -v 150</codeblock></p>
        <p>The statististics target for individual columns can be set with the <codeph>ALTER
            TABLE</codeph> command. For example, some queries can be improved by increasing the
          target for certain columns, especially columns that have irregular distributions. You can
          set the target to zero for columns that never contribute to query otpimization. When the
          target is 0, <codeph>ANALYZE</codeph> ignores the column. For example, the following
            <codeph>ALTER TABLE</codeph> command sets the statistics target for the
            <codeph>notes</codeph> column in the <codeph>emp</codeph> table to zero:</p>
        <codeblock>ALTER TABLE emp ALTER COLUMN notes SET STATISTICS 0;</codeblock>
        <p>The statistics target can be set in the range 0 to 1000, or set it to -1 to revert to
          using the system default statistics target. </p>
        <p>Setting the statistics target on a parent partition table affects the child partitions.
          If you set statistics to 0 on some columns on the parent table, the statistics for the
          same columns are set to 0 for all children partitions. However, if you later add or
          exchange another child partition, the new child partition will use either the default
          statistics target or, in the case of an exchange, the previous statistics target.
          Therefore, if you add or exchange child partitions, you should set the statistics targets
          on the new child table.</p>
      </section>
      <section id="section_j3p_drv_mt">
        <title>Automatic Statistics Collection</title>
        <p>Greenplum Database can be set to automatically run <codeph>ANALYZE</codeph> on a table
          that either has no statistics or has changed significantly when certain operations are
          performed on the table. For partitioned tables, automatic statistics collection is only
          triggered when the operation is run directly on a leaf table, and then only the leaf table
          is analyzed.</p>
        <p>Automatic statistics collection has three modes:<ul id="ul_epn_pcb_mt">
            <li><codeph>none</codeph> disables automatic statistics collection.</li>
            <li><codeph>on_no_stats</codeph> triggers an analyze operation for a table with no
              existing statistics when any of the commands <codeph>CREATE TABLE AS SELECT</codeph>,
                <codeph>INSERT</codeph>, or <codeph>COPY</codeph> are executed on the table. </li>
            <li><codeph>on_change</codeph> triggers an analyze operation when any of the commands
                <codeph>CREATE TABLE AS SELECT</codeph>, <codeph>UPDATE</codeph>,
                <codeph>DELETE</codeph>, <codeph>INSERT</codeph>, or <codeph>COPY</codeph> are
              executed on the table and the number of rows affected exceeds the threshold defined by
              the <codeph>gp_autostats_on_change_threshold</codeph> configuration parameter.</li>
          </ul></p>
        <p>The automatic statistics collection mode is set separately for commands that occur within
          a procedural language function and commands that execute outside of a function:<ul
            id="ul_ky4_ncv_mt">
            <li>The <codeph>gp_autostats_mode</codeph> configuration parameter controls automatic
              statistics collection behavior outside of functions and is set to
                <codeph>on_no_stats</codeph> by default.</li>
            <li>The <codeph>gp_autostats_mode_in_functions</codeph> parameter controls the behavior
              when table operations are performed within a procedural language function and is set
              to <codeph>none</codeph> by default. </li>
          </ul></p>
        <p>With the <codeph>on_change</codeph> mode, <codeph>ANALYZE</codeph> is triggered only if
          the number of rows affected exceeds the threshold defined by the
            <codeph>gp_autostats_on_change_threshold</codeph> configuration parameter. The default
          value for this parameter is a very high value, 2147483647, which effectively disables
          automatic statistics collection; you must set the threshold to a lower number to enable
          it. The <codeph>on_change</codeph> mode could trigger large, unexpected analyze operations
          that could disrupt the system, so it is not recommended to set it globally. It could be
          useful in a session, for example to automatically analyze a table following a load.</p>
        <p>To disable automatic statistics collection outside of functions, set the
            <codeph>gp_autostats_mode</codeph> parameter to
          <codeph>none</codeph>:<codeblock>gpconfigure -c gp_autostats_mode -v none</codeblock></p>
        <p>To enable automatic statistics collection in functions for tables that have no
          statistics, change <codeph>gp_autostats_mode_in_functions</codeph> to
            <codeph>on_no_stats</codeph>:<codeblock>gpconfigure -c gp_autostats_mode_in_functions -v on_no_stats</codeblock></p>
        <p>Set the <codeph>log_autostats</codeph> system configuration parameter to on if you want
          to log automatic statistics collection operations.</p>
      </section>
    </body>
  </topic>
</topic>
