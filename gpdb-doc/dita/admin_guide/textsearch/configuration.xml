<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="configuration">
  <title>Text Search Configuration Example</title>
  <shortdesc>This topic shows how to create a customized text search
    configuration to process document and query text. </shortdesc>
  <body>
    <p>A text search configuration specifies all options necessary to transform
      a document into a <codeph>tsvector</codeph>: the parser to use to break
      text into tokens, and the dictionaries to use to transform each token into
      a lexeme. Every call of <codeph>to_tsvector</codeph> or
        <codeph>to_tsquery</codeph> needs a text search configuration to perform
      its processing. The configuration parameter <xref
        href="../../ref_guide/config_params/guc-list.xml#default_text_search_config"
      /> specifies the name of the default configuration, which is the one used
      by text search functions if an explicit configuration parameter is
      omitted. It can be set in <codeph>postgresql.conf</codeph> using the
        <codeph>gpconfig</codeph> command-line utility, or set for an individual
      session using the <codeph>SET</codeph> command.</p>
    <p>Several predefined text search configurations are available, and you can
      create custom configurations easily. To facilitate management of text
      search objects, a set of SQL commands is available, and there are several
      psql commands that display information about text search objects (<xref
        href="psql-support.xml" format="dita"/>).</p>
    <p>As an example we will create a configuration <codeph>pg</codeph>, starting by duplicating the
      built-in <codeph>english</codeph> configuration:</p>
    <codeblock>CREATE TEXT SEARCH CONFIGURATION public.pg ( COPY = pg_catalog.english );</codeblock>
    <p>We will use a PostgreSQL-specific synonym list and store it in
        <codeph>$SHAREDIR/tsearch_data/pg_dict.syn</codeph>. The file contents look like:</p>
    <codeblock>postgres    pg
pgsql       pg
postgresql  pg</codeblock>
    <p>We define the synonym dictionary like this:</p>
    <codeblock>CREATE TEXT SEARCH DICTIONARY pg_dict (
    TEMPLATE = synonym,
    SYNONYMS = pg_dict
);</codeblock>
    <p>Next we register the Ispell dictionary <codeph>english_ispell</codeph>, which has its own
      configuration files:</p>
    <codeblock>CREATE TEXT SEARCH DICTIONARY english_ispell (
    TEMPLATE = ispell,
    DictFile = english,
    AffFile = english,
    StopWords = english
);</codeblock>
    <p>Now we can set up the mappings for words in configuration <codeph>pg</codeph>:</p>
    <codeblock>ALTER TEXT SEARCH CONFIGURATION pg
    ALTER MAPPING FOR asciiword, asciihword, hword_asciipart,
                      word, hword, hword_part
    WITH pg_dict, english_ispell, english_stem;</codeblock>
    <p>We choose not to index or search some token types that the built-in configuration does
      handle:</p>
    <codeblock>ALTER TEXT SEARCH CONFIGURATION pg
    DROP MAPPING FOR email, url, url_path, sfloat, float;</codeblock>
    <p>Now we can test our configuration:</p>
    <codeblock>SELECT * FROM ts_debug('public.pg', '
PostgreSQL, the highly scalable, SQL compliant, open source object-relational
database management system, is now undergoing beta testing of the next
version of our software.
');</codeblock>
    <p>The next step is to set the session to use the new configuration, which was created in the
        <codeph>public</codeph> schema:</p>
    <codeblock>=> \dF
   List of text search configurations
 Schema  | Name | Description
---------+------+-------------
 public  | pg   |

SET default_text_search_config = 'public.pg';
SET

SHOW default_text_search_config;
 default_text_search_config
----------------------------
 public.pg</codeblock>
  </body>
</topic>
