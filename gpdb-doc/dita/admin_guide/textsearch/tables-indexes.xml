<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="tables-indexes">
  <title>Searching Text in Database Tables</title>
  <shortdesc>This topic shows how to use text search operators to search database tables and how to
    create indexes to speed up text searches.</shortdesc>
  <body>
    <p>The examples in the previous section illustrated full text matching using simple constant
      strings. This section shows how to search table data, optionally using indexes.</p>
    <p>This section contains the following subtopics: </p>
    <ul id="ul_vng_jxw_4fb">
      <li><xref href="#tables-indexes/searching" format="dita"/></li>
      <li><xref href="#tables-indexes/indexes" format="dita"/></li>
    </ul>
    <section id="searching">
      <title>Searching a Table</title>
      <p>It is possible to do a full text search without an index. A simple query to print the
          <codeph>title</codeph> of each row that contains the word <codeph>friend</codeph> in its
          <codeph>body</codeph> field is:</p>
      <codeblock>SELECT title
FROM pgweb
WHERE to_tsvector('english', body) @@ to_tsquery('english', 'friend');</codeblock>
      <p>This will also find related words such as <codeph>friends</codeph> and
          <codeph>friendly</codeph>, since all these are reduced to the same normalized lexeme.</p>
      <p>The query above specifies that the <codeph>english</codeph> configuration is to be used to
        parse and normalize the strings. Alternatively we could omit the configuration
        parameters:</p>
      <codeblock>SELECT title
FROM pgweb
WHERE to_tsvector(body) @@ to_tsquery('friend');</codeblock>
      <p>This query will use the configuration set by <xref
          href="../../ref_guide/config_params/guc-list.xml#default_text_search_config"/>.</p>
      <p>A more complex example is to select the ten most recent documents that contain
          <codeph>create</codeph> and <codeph>table</codeph> in the <codeph>title</codeph> or
          <codeph>body</codeph>:</p>
      <codeblock>SELECT title
FROM pgweb
WHERE to_tsvector(title || ' ' || body) @@ to_tsquery('create &amp; table')
ORDER BY last_mod_date DESC
LIMIT 10;</codeblock>
      <p>For clarity we omitted the <codeph>coalesce</codeph> function calls which would be needed
        to find rows that contain <codeph>NULL</codeph> in one of the two fields.</p>
      <p>Although these queries will work without an index, most applications will find this
        approach too slow, except perhaps for occasional ad-hoc searches. Practical use of text
        searching usually requires creating an index.</p>
    </section>
    <section id="indexes">
      <title>Creating Indexes</title>
      <p>We can create a GIN index (<xref href="gist-gin.xml#gist-gin"/>) to speed up text
        searches:</p>
      <codeblock>CREATE INDEX pgweb_idx ON pgweb USING gin(to_tsvector('english', body));</codeblock>
      <p>Notice that the two-argument version of <codeph>to_tsvector</codeph> is used. Only text
        search functions that specify a configuration name can be used in expression indexes. This
        is because the index contents must be unaffected by <xref
          href="../../ref_guide/config_params/guc-list.xml#default_text_search_config"/>. If they
        were affected, the index contents might be inconsistent because different entries could
        contain <codeph>tsvector</codeph>s that were created with different text search
        configurations, and there would be no way to guess which was which. It would be impossible
        to dump and restore such an index correctly.</p>
      <p>Because the two-argument version of <codeph>to_tsvector</codeph> was used in the index
        above, only a query reference that uses the two-argument version of
          <codeph>to_tsvector</codeph> with the same configuration name will use that index. That
        is, <codeph>WHERE to_tsvector('english', body) @@ 'a &amp; b'</codeph> can use the index,
        but <codeph>WHERE to_tsvector(body) @@ 'a &amp; b'</codeph> cannot. This ensures that an
        index will be used only with the same configuration used to create the index entries.</p>
      <p>It is possible to set up more complex expression indexes wherein the configuration name is
        specified by another column, e.g.:</p>
      <codeblock>CREATE INDEX pgweb_idx ON pgweb USING gin(to_tsvector(config_name, body));</codeblock>
      <p>where <codeph>config_name</codeph> is a column in the <codeph>pgweb</codeph> table. This
        allows mixed configurations in the same index while recording which configuration was used
        for each index entry. This would be useful, for example, if the document collection
        contained documents in different languages. Again, queries that are meant to use the index
        must be phrased to match, e.g., <codeph>WHERE to_tsvector(config_name, body) @@ 'a &amp;
          b'</codeph>.</p>
      <p>Indexes can even concatenate columns:</p>
      <codeblock>CREATE INDEX pgweb_idx ON pgweb USING gin(to_tsvector('english', title || ' ' || body));</codeblock>
      <p>Another approach is to create a separate <codeph>tsvector</codeph> column to hold the
        output of <codeph>to_tsvector</codeph>. This example is a concatenation of title and body,
        using <codeph>coalesce</codeph> to ensure that one field will still be indexed when the
        other is NULL:</p>
      <codeblock>ALTER TABLE pgweb ADD COLUMN textsearchable_index_col tsvector;
UPDATE pgweb SET textsearchable_index_col =
     to_tsvector('english', coalesce(title,'') || ' ' || coalesce(body,''));</codeblock>
      <p>Then we create a GIN index to speed up the search:</p>
      <codeblock>CREATE INDEX textsearch_idx ON pgweb USING gin(textsearchable_index_col);</codeblock>
      <p>Now we are ready to perform a fast full text search:</p>
      <codeblock>SELECT title FROM pgweb WHERE textsearchable_index_col @@ to_tsquery('create &amp; table') 
ORDER BY last_mod_date DESC LIMIT 10;</codeblock>
      <p otherprops="op-hidden">When using a separate column to store the <codeph>tsvector</codeph>
        representation, it is necessary to create a trigger to keep the <codeph>tsvector</codeph>
        column current anytime title or body changes. <xref
          href="features.xml#triggers-for-automatic-updates" format="dita"/> explains how to do
        that.</p>
      <p>One advantage of the separate-column approach over an expression index is that it is not
        necessary to explicitly specify the text search configuration in queries in order to make
        use of the index. As shown in the example above, the query can depend on
          <codeph>default_text_search_config</codeph>. Another advantage is that searches will be
        faster, since it will not be necessary to redo the <codeph>to_tsvector</codeph> calls to
        verify index matches. (This is more important when using a GiST index than a GIN index; see
          <xref href="gist-gin.xml#gist-gin"/>.) The expression-index approach is simpler to set up,
        however, and it requires less disk space since the <codeph>tsvector</codeph> representation
        is not stored explicitly.</p>
    </section>
  </body>
</topic>
