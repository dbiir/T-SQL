<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="parsers">
  <title>Text Search Parsers</title>
  <shortdesc>This topic describes the types of tokens the Greenplum Database
    text search parser produces from raw text.  </shortdesc>
  <body>
    <p>Text search parsers are responsible for splitting raw document text into <i>tokens</i> and
      identifying each token's type, where the set of possible types is defined by the parser
      itself. Note that a parser does not modify the text at all — it simply identifies plausible
      word boundaries. Because of this limited scope, there is less need for application-specific
      custom parsers than there is for custom dictionaries. At present Greenplum Database provides
      just one built-in parser, which has been found to be useful for a wide range of
      applications.</p>
    <p>The built-in parser is named <codeph>pg_catalog.default</codeph>. It recognizes 23 token
      types, shown in the following table.</p>
    <table id="table_hvs_hm5_kfb">
      <title>Default Parser's Token Types</title>
      <tgroup cols="3">
        <colspec colnum="1" colname="col1"/>
        <colspec colnum="2" colname="col2"/>
        <colspec colnum="3" colname="col3"/>
        <thead>
          <row>
            <entry>Alias</entry>
            <entry>Description</entry>
            <entry>Example</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>asciiword</entry>
            <entry>Word, all ASCII letters</entry>
            <entry>elephant</entry>
          </row>
          <row>
            <entry>word</entry>
            <entry>Word, all letters</entry>
            <entry>mañana</entry>
          </row>
          <row>
            <entry>numword</entry>
            <entry>Word, letters and digits</entry>
            <entry>beta1</entry>
          </row>
          <row>
            <entry>asciihword</entry>
            <entry>Hyphenated word, all ASCII</entry>
            <entry>up-to-date</entry>
          </row>
          <row>
            <entry>hword</entry>
            <entry>Hyphenated word, all letters</entry>
            <entry>lógico-matemática</entry>
          </row>
          <row>
            <entry>numhword</entry>
            <entry>Hyphenated word, letters and digits</entry>
            <entry>postgresql-beta1</entry>
          </row>
          <row>
            <entry>hword_asciipart</entry>
            <entry>Hyphenated word part, all ASCII</entry>
            <entry>postgresql in the context postgresql-beta1</entry>
          </row>
          <row>
            <entry>hword_part</entry>
            <entry>Hyphenated word part, all letters</entry>
            <entry>lógico or matemática in the context lógico-matemática</entry>
          </row>
          <row>
            <entry>hword_numpart</entry>
            <entry>Hyphenated word part, letters and digits</entry>
            <entry>beta1 in the context postgresql-beta1</entry>
          </row>
          <row>
            <entry>email</entry>
            <entry>Email address</entry>
            <entry>foo@example.com</entry>
          </row>
          <row>
            <entry>protocol</entry>
            <entry>Protocol head</entry>
            <entry>http://</entry>
          </row>
          <row>
            <entry>url</entry>
            <entry>URL</entry>
            <entry>example.com/stuff/index.html</entry>
          </row>
          <row>
            <entry>host</entry>
            <entry>Host</entry>
            <entry>example.com</entry>
          </row>
          <row>
            <entry>url_path</entry>
            <entry>URL path</entry>
            <entry>/stuff/index.html, in the context of a URL</entry>
          </row>
          <row>
            <entry>file</entry>
            <entry>File or path name</entry>
            <entry>/usr/local/foo.txt, if not within a URL</entry>
          </row>
          <row>
            <entry>sfloat</entry>
            <entry>Scientific notation</entry>
            <entry>-1.234e56</entry>
          </row>
          <row>
            <entry>float</entry>
            <entry>Decimal notation</entry>
            <entry>-1.234</entry>
          </row>
          <row>
            <entry>int</entry>
            <entry>Signed integer</entry>
            <entry>-1234</entry>
          </row>
          <row>
            <entry>uint</entry>
            <entry>Unsigned integer</entry>
            <entry>1234</entry>
          </row>
          <row>
            <entry>version</entry>
            <entry>Version number</entry>
            <entry>8.3.0</entry>
          </row>
          <row>
            <entry>tag</entry>
            <entry>XML tag</entry>
            <entry>&lt;a href="dictionaries.html"></entry>
          </row>
          <row>
            <entry>entity</entry>
            <entry>XML entity</entry>
            <entry>&amp;amp;</entry>
          </row>
          <row>
            <entry>blank</entry>
            <entry>Space symbols</entry>
            <entry>(any whitespace or punctuation not otherwise recognized)</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <note>
      <p>The parser's notion of a "letter" is determined by the database's locale setting,
        specifically <codeph>lc_ctype</codeph>. Words containing only the basic ASCII letters are
        reported as a separate token type, since it is sometimes useful to distinguish them. In most
        European languages, token types <codeph>word</codeph> and <codeph>asciiword</codeph> should
        be treated alike.</p>
      <p><codeph>email</codeph> does not support all valid email characters as defined by RFC 5322.
        Specifically, the only non-alphanumeric characters supported for email user names are
        period, dash, and underscore.</p>
    </note>
    <p>It is possible for the parser to produce overlapping tokens from the same piece of text. As
      an example, a hyphenated word will be reported both as the entire word and as each
      component:</p>
    <codeblock>SELECT alias, description, token FROM ts_debug('foo-bar-beta1');
      alias      |               description                |     token     
-----------------+------------------------------------------+---------------
 numhword        | Hyphenated word, letters and digits      | foo-bar-beta1
 hword_asciipart | Hyphenated word part, all ASCII          | foo
 blank           | Space symbols                            | -
 hword_asciipart | Hyphenated word part, all ASCII          | bar
 blank           | Space symbols                            | -
 hword_numpart   | Hyphenated word part, letters and digits | beta1</codeblock>
    <p>This behavior is desirable since it allows searches to work for both the whole compound word
      and for components. Here is another instructive example:</p>
    <codeblock>SELECT alias, description, token FROM ts_debug('http://example.com/stuff/index.html');
  alias   |  description  |            token             
----------+---------------+------------------------------
 protocol | Protocol head | http://
 url      | URL           | example.com/stuff/index.html
 host     | Host          | example.com
 url_path | URL path      | /stuff/index.html</codeblock>
  </body>
</topic>
