<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="features">
  <title>Additional Text Search Features</title>
  <shortdesc>Greenplum Database has additional functions and operators you can
    use to manipulate search and query vectors, and to rewite search queries. </shortdesc>
  <body>
    <p>This section contains the following subtopics:</p>
    <ul id="ul_tyj_lyw_4fb">
      <li><xref href="#features/manipulating-documents" format="dita"/></li>
      <li><xref href="#features/manipulate_queries" format="dita"/></li>
      <li><xref href="#features/rewriting" format="dita"/></li>
      <li><xref href="#features/statistics" format="dita"/></li>
    </ul>
    <section id="manipulating-documents">
      <title>Manipulating Documents</title>
      <p><xref href="controlling.xml#controlling/parsing-documents"/> showed how
        raw textual documents can be converted into <codeph>tsvector</codeph>
        values. Greenplum Database also provides functions and operators that
        can be used to manipulate documents that are already in
          <codeph>tsvector</codeph> form.</p>
      <dl>
        <dlentry>
          <dt><codeph>tsvector || tsvector</codeph></dt>
          <dd>
            <p>The <codeph>tsvector</codeph> concatenation operator returns a vector which combines
              the lexemes and positional information of the two vectors given as arguments.
              Positions and weight labels are retained during the concatenation. Positions appearing
              in the right-hand vector are offset by the largest position mentioned in the left-hand
              vector, so that the result is nearly equivalent to the result of performing
                <codeph>to_tsvector</codeph> on the concatenation of the two original document
              strings. (The equivalence is not exact, because any stop-words removed from the end of
              the left-hand argument will not affect the result, whereas they would have affected
              the positions of the lexemes in the right-hand argument if textual concatenation were
              used.)</p>
            <p>One advantage of using concatenation in the vector form, rather than concatenating
              text before applying <codeph>to_tsvector</codeph>, is that you can use different
              configurations to parse different sections of the document. Also, because the
                <codeph>setweight</codeph> function marks all lexemes of the given vector the same
              way, it is necessary to parse the text and do <codeph>setweight</codeph> before
              concatenating if you want to label different parts of the document with different
              weights.</p>
          </dd>
        </dlentry>
        <dlentry>
          <dt><codeph>setweight(<i>vector</i> tsvector, <i>weight</i> "char") returns
              tsvector</codeph></dt>
          <dd>
            <p><codeph>setweight</codeph> returns a copy of the input vector in which every position
              has been labeled with the given <codeph><i>weight</i></codeph>, either
                <codeph>A</codeph>, <codeph>B</codeph>, <codeph>C</codeph>, or <codeph>D</codeph>.
                (<codeph>D</codeph> is the default for new vectors and as such is not displayed on
              output.) These labels are retained when vectors are concatenated, allowing words from
              different parts of a document to be weighted differently by ranking functions.</p>
            <p>Note that weight labels apply to <b>positions</b>, not <b>lexemes</b>. If the input
              vector has been stripped of positions then <codeph>setweight</codeph> does
              nothing.</p>
          </dd>
        </dlentry>
        <dlentry>
          <dt><codeph>length(<i>vector</i> tsvector) returns integer</codeph></dt>
          <dd>
            <p>Returns the number of lexemes stored in the vector.</p>
          </dd>
        </dlentry>
        <dlentry>
          <dt>strip(vector tsvector) returns tsvector</dt>
          <dd>
            <p>Returns a vector which lists the same lexemes as the given vector, but which lacks
              any position or weight information. While the returned vector is much less useful than
              an unstripped vector for relevance ranking, it will usually be much smaller.</p>
          </dd>
        </dlentry>
      </dl>
    </section>
    <section id="manipulate_queries">
      <title>Manipulating Queries</title>
      <p><xref href="controlling.xml#controlling/parsing-queries"/> showed how
        raw textual queries can be converted into <codeph>tsquery</codeph>
        values. Greenplum Database also provides functions and operators that
        can be used to manipulate queries that are already in
          <codeph>tsquery</codeph> form.</p>
      <dl>
        <dlentry>
          <dt><codeph>tsquery &amp;&amp; tsquery</codeph></dt>
          <dd>
            <p>Returns the AND-combination of the two given queries.</p>
          </dd>
        </dlentry>
        <dlentry>
          <dt><codeph>tsquery || tsquery</codeph></dt>
          <dd>
            <p>Returns the OR-combination of the two given queries.</p>
          </dd>
        </dlentry>
        <dlentry>
          <dt><codeph>!! tsquery</codeph></dt>
          <dd>
            <p>Returns the negation (NOT) of the given query.</p>
          </dd>
        </dlentry>
        <dlentry>
          <dt><codeph>numnode(<i>query</i> tsquery) returns
            integer</codeph></dt>
          <dd>
            <p>Returns the number of nodes (lexemes plus operators) in a
              tsquery. This function is useful to determine if the <b>query</b>
              is meaningful (returns > 0), or contains only stop words (returns
              0). Examples:</p>
            <codeblock>SELECT numnode(plainto_tsquery('the any'));
NOTICE:  query contains only stopword(s) or doesn't contain lexeme(s), ignored
 numnode
---------
       0

SELECT numnode('foo &amp; bar'::tsquery);
 numnode
---------
       3</codeblock>
          </dd>
        </dlentry>
        <dlentry>
          <dt><codeph>querytree(<i>query</i> tsquery) returns text</codeph></dt>
          <dd>
            <p>Returns the portion of a tsquery that can be used for searching
              an index. This function is useful for detecting unindexable
              queries, for example those containing only stop words or only
              negated terms. For example:</p>
            <codeblock>SELECT querytree(to_tsquery('!defined'));
 querytree
-----------
</codeblock>
          </dd>
        </dlentry>
      </dl>
    </section>
    <section id="rewriting">
      <title>Rewriting Queries</title>
      <p>The <codeph>ts_rewrite</codeph> family of functions search a given
          <codeph>tsquery</codeph> for occurrences of a target subquery, and
        replace each occurrence with a substitute subquery. In essence this
        operation is a <codeph>tsquery</codeph>-specific version of substring
        replacement. A target and substitute combination can be thought of as a
          <i>query rewrite rule</i>. A collection of such rewrite rules can be a
        powerful search aid. For example, you can expand the search using
        synonyms (e.g., <codeph>new york</codeph>, <codeph>big apple</codeph>,
          <codeph>nyc</codeph>, <codeph>gotham</codeph>) or narrow the search to
        direct the user to some hot topic. There is some overlap in
        functionality between this feature and thesaurus dictionaries (<xref
          href="dictionaries.xml#dictionaries/thesaurus-dictionary"/>). However,
        you can modify a set of rewrite rules on-the-fly without reindexing,
        whereas updating a thesaurus requires reindexing to be effective.</p>
      <dl>
        <dlentry>
          <dt><codeph>ts_rewrite(<i>query</i> tsquery, <i>target</i> tsquery,
                <i>substitute</i> tsquery) returns tsquery</codeph></dt>
          <dd>
            <p>This form of <codeph>ts_rewrite</codeph> simply applies a single
              rewrite rule: <codeph><i>target</i></codeph> is replaced by
                  <codeph><i>substitute</i></codeph> wherever it appears in
                  <codeph><i>query</i></codeph>. For example:</p>
            <codeblock>SELECT ts_rewrite('a &amp; b'::tsquery, 'a'::tsquery, 'c'::tsquery);
 ts_rewrite
------------
 'b' &amp; 'c'</codeblock>
          </dd>
        </dlentry>
        <dlentry>
          <dt><codeph>ts_rewrite(<i>query</i> tsquery, <i>select</i> text)
              returns tsquery</codeph></dt>
          <dd>
            <p>This form of <codeph>ts_rewrite</codeph> accepts a starting
                  <codeph><i>query</i></codeph> and a SQL
                <codeph><i>select</i></codeph> command, which is given as a text
              string. The <codeph><i>select</i></codeph> must yield two columns
              of <codeph>tsquery</codeph> type. For each row of the
                  <codeph><i>select</i></codeph> result, occurrences of the
              first column value (the target) are replaced by the second column
              value (the substitute) within the current
                <codeph><i>query</i></codeph> value. For example:</p>
            <codeblock>CREATE TABLE aliases (id int, t tsquery, s tsquery);
INSERT INTO aliases VALUES('a', 'c');

SELECT ts_rewrite('a &amp; b'::tsquery, 'SELECT t,s FROM aliases');
 ts_rewrite
------------
 'b' &amp; 'c'</codeblock>
            <p>Note that when multiple rewrite rules are applied in this way,
              the order of application can be important; so in practice you will
              want the source query to <codeph>ORDER BY</codeph> some ordering
              key.</p>
          </dd>
        </dlentry>
      </dl>
      <p>Let's consider a real-life astronomical example. We'll expand query
          <codeph>supernovae</codeph> using table-driven rewriting rules:</p>
      <codeblock>CREATE TABLE aliases (id int, t tsquery primary key, s tsquery);
INSERT INTO aliases VALUES(1, to_tsquery('supernovae'), to_tsquery('supernovae|sn'));

SELECT ts_rewrite(to_tsquery('supernovae &amp; crab'), 'SELECT t, s FROM aliases');
           ts_rewrite            
---------------------------------
 'crab' &amp; ( 'supernova' | 'sn' )</codeblock>
      <p>We can change the rewriting rules just by updating the table:</p>
      <codeblock>UPDATE aliases
SET s = to_tsquery('supernovae|sn &amp; !nebulae')
WHERE t = to_tsquery('supernovae');

SELECT ts_rewrite(to_tsquery('supernovae &amp; crab'), 'SELECT t, s FROM aliases');
                 ts_rewrite                  
---------------------------------------------
 'crab' &amp; ( 'supernova' | 'sn' &amp; !'nebula' )</codeblock>
      <p>Rewriting can be slow when there are many rewriting rules, since it
        checks every rule for a possible match. To filter out obvious
        non-candidate rules we can use the containment operators for the
          <codeph>tsquery</codeph> type. In the example below, we select only
        those rules which might match the original query:</p>
      <codeblock>SELECT ts_rewrite('a &amp; b'::tsquery,
                  'SELECT t,s FROM aliases WHERE ''a &amp; b''::tsquery @> t');
 ts_rewrite
------------
 'b' &amp; 'c'</codeblock>
    </section>
    <section otherprops="op-hidden" id="triggers-for-automatic-updates">
      <title>Triggers for Automatic Updates</title>
      <p>When using a separate column to store the <codeph>tsvector</codeph> representation of your
        documents, it is necessary to create a trigger to update the <codeph>tsvector</codeph>
        column when the document content columns change. Two built-in trigger functions are
        available for this, or you can write your own.</p>
      <codeblock>tsvector_update_trigger(<i>tsvector_column_name</i>, <i>config_name</i>, <i>text_column_name</i> [, ... ])
tsvector_update_trigger_column(<i>tsvector_column_name</i>, <i>config_column_name</i>, <i>text_column_name</i> [, ... ])</codeblock>
      <p>These trigger functions automatically compute a tsvector column from one or more textual
        columns, under the control of parameters specified in the <codeph>CREATE TRIGGER</codeph>
        command. An example of their use is:</p>
      <codeblock>CREATE TABLE messages (
    msgnum      int,
    title       text,
    body        text,
    tsv         tsvector
);

CREATE TRIGGER tsvectorupdate BEFORE INSERT OR UPDATE
ON messages FOR EACH ROW EXECUTE PROCEDURE
tsvector_update_trigger(tsv, 'pg_catalog.english', title, body);

INSERT INTO messages VALUES(100, 'title here', 'the body text is here');

SELECT * FROM messages;
 msgnum |   title    |         body          |            tsv
--------+------------+-----------------------+----------------------------
    100 | title here | the body text is here | 'bodi':4 'text':5 'titl':1

SELECT title, body FROM messages WHERE tsv @@ to_tsquery('title &amp; body');
   title    |         body          
------------+-----------------------
 title here | the body text is here</codeblock>
      <p>Having created this trigger, any change in <codeph>title</codeph> or <codeph>body</codeph>
        will automatically be reflected into <codeph>tsv</codeph>, without the application having to
        worry about it.</p>
      <p>The first trigger argument must be the name of the <codeph>tsvector</codeph> column to be
        updated. The second argument specifies the text search configuration to be used to perform
        the conversion. For <codeph>tsvector_update_trigger</codeph>, the configuration name is
        simply given as the second trigger argument. It must be schema-qualified as shown above, so
        that the trigger behavior will not change with changes in <codeph>search_path</codeph>. For
          <codeph>tsvector_update_trigger_column</codeph>, the second trigger argument is the name
        of another table column, which must be of type <codeph>regconfig</codeph>. This allows a
        per-row selection of configuration to be made. The remaining argument(s) are the names of
        textual columns (of type <codeph>text</codeph>, <codeph>varchar</codeph>, or
          <codeph>char</codeph>). These will be included in the document in the order given. NULL
        values will be skipped (but the other columns will still be indexed).</p>
      <p>A limitation of these built-in triggers is that they treat all the input columns alike. To
        process columns differently — for example, to weight title differently from body — it is
        necessary to write a custom trigger. Here is an example using PL/pgSQL as the trigger
        language:</p>
      <codeblock>CREATE FUNCTION messages_trigger() RETURNS trigger AS $$
begin
  new.tsv :=
     setweight(to_tsvector('pg_catalog.english', coalesce(new.title,'')), 'A') ||
     setweight(to_tsvector('pg_catalog.english', coalesce(new.body,'')), 'D');
  return new;
end
$$ LANGUAGE plpgsql;

CREATE TRIGGER tsvectorupdate BEFORE INSERT OR UPDATE
    ON messages FOR EACH ROW EXECUTE PROCEDURE messages_trigger();</codeblock>
      <p>Keep in mind that it is important to specify the configuration name explicitly when
        creating <codeph>tsvector</codeph> values inside triggers, so that the column's contents
        will not be affected by changes to <codeph>default_text_search_config</codeph>. Failure to
        do this is likely to lead to problems such as search results changing after a dump and
        reload.</p>
    </section>
    <section id="statistics">
      <title>Gathering Document Statistics</title>
      <p>The function <codeph>ts_stat</codeph> is useful for checking your
        configuration and for finding stop-word candidates.</p>
      <codeblock>ts_stat(<i>sqlquery</i> text, [ <i>weights</i> text, ]
        OUT <i>word</i> text, OUT <i>ndoc</i> integer,
        OUT <i>nentry</i> integer) returns setof record</codeblock>
      <p><codeph><i>sqlquery</i></codeph> is a text value containing an SQL
        query which must return a single <codeph>tsvector</codeph> column.
          <codeph>ts_stat</codeph> executes the query and returns statistics
        about each distinct lexeme (word) contained in the
          <codeph>tsvector</codeph> data. The columns returned are</p>
      <ul id="ul_rwg_ml5_kfb">
        <li><codeph><i>word</i> text</codeph> — the value of a lexeme</li>
        <li><codeph><i>ndoc</i> integer</codeph> — number of documents
            (<codeph>tsvector</codeph>s) the word occurred in</li>
        <li><codeph><i>nentry</i> integer</codeph> — total number of occurrences
          of the word</li>
      </ul>
      <p>If weights is supplied, only occurrences having one of those weights
        are counted.</p>
      <p>For example, to find the ten most frequent words in a document
        collection:</p>
      <codeblock>SELECT * FROM ts_stat('SELECT vector FROM apod')
ORDER BY nentry DESC, ndoc DESC, word
LIMIT 10;</codeblock>
      <p>The same, but counting only word occurrences with weight
          <codeph>A</codeph> or <codeph>B</codeph>:</p>
      <codeblock>SELECT * FROM ts_stat('SELECT vector FROM apod', 'ab')
ORDER BY nentry DESC, ndoc DESC, word
LIMIT 10;</codeblock>
    </section>
  </body>
</topic>
