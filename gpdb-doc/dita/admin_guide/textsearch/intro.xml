<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="intro">
  <title>About Full Text Search</title>
  <shortdesc>This topic provides an overview of Greenplum Database full text search, basic text
    search expressions, configuring, and customizing text search. Greenplum Database full text
    search is compared with Pivotal GPText. </shortdesc>
  <body>
    <p>This section contains the following subtopics:</p>
    <ul id="ul_djv_rww_4fb">
      <li><xref href="#intro/document" format="dita"/></li>
      <li><xref href="#intro/basic-text-matching" format="dita"/></li>
      <li><xref href="#intro/configurations" format="dita"/></li>
      <li><xref href="#intro/gptext" format="dita"/></li>
    </ul>
    <section id="section_dm1_www_4fb">
      <p>Full Text Searching (or just "text search") provides the capability to identify
        natural-language <i>documents</i> that satisfy a <i>query</i>, and optionally to rank them
        by relevance to the query. The most common type of search is to find all documents
        containing given <i>query terms</i> and return them in order of their <i>similarity</i> to
        the query. </p>
      <p>Greenplum Database provides a data type <codeph>tsvector</codeph> to store preprocessed
        documents, and a data type <codeph>tsquery</codeph> to store processed queries (<xref
          href="../../ref_guide/datatype-textsearch.xml"/>). There are many functions and operators
        available for these data types (<xref
          href="../../ref_guide/function-summary.xml#topic_vpj_ss1_lfb"/>), the most important of
        which is the match operator <codeph>@@</codeph>, which we introduce in <xref
          href="#intro/basic-text-matching" format="dita"/>. Full text searches can be accelerated
        using indexes (<xref href="gist-gin.xml#gist-gin"/>).</p>
      <p>Notions of query and similarity are very flexible and depend on the specific application.
        The simplest search considers query as a set of words and similarity as the frequency of
        query words in the document. </p>
      <p>Greenplum Database supports the standard text matching operators <codeph>~</codeph>,
          <codeph>~*</codeph>, <codeph>LIKE</codeph>, and <codeph>ILIKE</codeph> for textual data
        types, but these operators lack many essential properties required for searching
        documents:</p>
      <ul id="ul_py4_m5t_kfb">
        <li>There is no linguistic support, even for English. Regular expressions are not sufficient
          because they cannot easily handle derived words, e.g., <codeph>satisfies</codeph> and
            <codeph>satisfy</codeph>. You might miss documents that contain
            <codeph>satisfies</codeph>, although you probably would like to find them when searching
          for <codeph>satisfy</codeph>. It is possible to use OR to search for multiple derived
          forms, but this is tedious and error-prone (some words can have several thousand
          derivatives).</li>
        <li>
          <p>They provide no ordering (ranking) of search results, which makes them ineffective when
            thousands of matching documents are found.</p>
        </li>
        <li>
          <p>They tend to be slow because there is no index support, so they must process all
            documents for every search.</p>
        </li>
      </ul>
      <p>Full text indexing allows documents to be preprocessed and an index saved for later rapid
        searching. Preprocessing includes:</p>
      <ul id="ul_qy4_m5t_kfb">
        <li><b>Parsing documents into tokens.</b> It is useful to identify various classes of
          tokens, e.g., numbers, words, complex words, email addresses, so that they can be
          processed differently. In principle token classes depend on the specific application, but
          for most purposes it is adequate to use a predefined set of classes. Greenplum Database
          uses a <i>parser</i> to perform this step. A standard parser is provided, and custom
          parsers can be created for specific needs.</li>
        <li><b>Converting tokens into lexemes.</b> A lexeme is a string, just like a token, but it
          has been <i>normalized</i> so that different forms of the same word are made alike. For
          example, normalization almost always includes folding upper-case letters to lower-case,
          and often involves removal of suffixes (such as s or es in English). This allows searches
          to find variant forms of the same word, without tediously entering all the possible
          variants. Also, this step typically eliminates <i>stop words</i>, which are words that are
          so common that they are useless for searching. (In short, then, tokens are raw fragments
          of the document text, while lexemes are words that are believed useful for indexing and
          searching.) Greenplum Database uses <i>dictionaries</i> to perform this step. Various
          standard dictionaries are provided, and custom ones can be created for specific
          needs.</li>
        <li><b>Storing preprocessed documents optimized for searching.</b> For example, each
          document can be represented as a sorted array of normalized lexemes. Along with the
          lexemes it is often desirable to store positional information to use for <i>proximity
            ranking</i>, so that a document that contains a more "dense" region of query words is
          assigned a higher rank than one with scattered query words.</li>
      </ul>
      <p>Dictionaries allow fine-grained control over how tokens are normalized. With appropriate
        dictionaries, you can:</p>
      <ul id="ul_ry4_m5t_kfb">
        <li>Define stop words that should not be indexed.</li>
        <li>Map synonyms to a single word using Ispell.</li>
        <li>Map phrases to a single word using a thesaurus.</li>
        <li>Map different variations of a word to a canonical form using an Ispell dictionary.</li>
        <li>Map different variations of a word to a canonical form using Snowball stemmer
          rules.</li>
      </ul>
    </section>
    <section id="document">
      <title>What is a Document?</title>
      <p>A <i>document</i> is the unit of searching in a full text search system; for example, a
        magazine article or email message. The text search engine must be able to parse documents
        and store associations of lexemes (key words) with their parent document. Later, these
        associations are used to search for documents that contain query words.</p>
      <p>For searches within Greenplum Database, a document is normally a textual field within a row
        of a database table, or possibly a combination (concatenation) of such fields, perhaps
        stored in several tables or obtained dynamically. In other words, a document can be
        constructed from different parts for indexing and it might not be stored anywhere as a
        whole. For example:</p>
      <codeblock>SELECT title || ' ' ||  author || ' ' ||  abstract || ' ' || body AS document
FROM messages
WHERE mid = 12;

SELECT m.title || ' ' || m.author || ' ' || m.abstract || ' ' || d.body AS document
FROM messages m, docs d
WHERE mid = did AND mid = 12;</codeblock>
      <note>
        <p>Actually, in these example queries, <codeph>coalesce</codeph> should be used to prevent a
          single <codeph>NULL</codeph> attribute from causing a <codeph>NULL</codeph> result for the
          whole document.</p>
      </note>
      <p>Another possibility is to store the documents as simple text files in the file system. In
        this case, the database can be used to store the full text index and to execute searches,
        and some unique identifier can be used to retrieve the document from the file system.
        However, retrieving files from outside the database requires superuser permissions or
        special function support, so this is usually less convenient than keeping all the data
        inside Greenplum Database. Also, keeping everything inside the database allows easy access
        to document metadata to assist in indexing and display.</p>
      <p>For text search purposes, each document must be reduced to the preprocessed
          <codeph>tsvector</codeph> format. Searching and ranking are performed entirely on the
        tsvector representation of a document â€” the original text need only be retrieved when the
        document has been selected for display to a user. We therefore often speak of the
          <codeph>tsvector</codeph> as being the document, but of course it is only a compact
        representation of the full document.</p>
    </section>
    <section id="basic-text-matching">
      <title>Basic Text Matching</title>
      <p>Full text searching in Greenplum Database is based on the match operator
          <codeph>@@</codeph>, which returns <codeph>true</codeph> if a <codeph>tsvector</codeph>
        (document) matches a <codeph>tsquery</codeph> (query). It does not matter which data type is
        written first:</p>
      <codeblock>SELECT 'a fat cat sat on a mat and ate a fat rat'::tsvector @@ 'cat &amp; rat'::tsquery;
 ?column?
----------
 t

SELECT 'fat &amp; cow'::tsquery @@ 'a fat cat sat on a mat and ate a fat rat'::tsvector;
 ?column?
----------
 f</codeblock>
      <p>As the above example suggests, a <codeph>tsquery</codeph> is not just raw text, any more
        than a <codeph>tsvector</codeph> is. A <codeph>tsquery</codeph> contains search terms, which
        must be already-normalized lexemes, and may combine multiple terms using AND, OR, and NOT
        operators. (For details see.) There are functions <codeph>to_tsquery</codeph> and
          <codeph>plainto_tsquery</codeph> that are helpful in converting user-written text into a
        proper <codeph>tsquery</codeph>, for example by normalizing words appearing in the text.
        Similarly, <codeph>to_tsvector</codeph> is used to parse and normalize a document string. So
        in practice a text search match would look more like this:</p>
      <codeblock>SELECT to_tsvector('fat cats ate fat rats') @@ to_tsquery('fat &amp; rat');
 ?column? 
----------
 t</codeblock>
      <p>Observe that this match would not succeed if written as</p>
      <codeblock>SELECT 'fat cats ate fat rats'::tsvector @@ to_tsquery('fat &amp; rat');
 ?column? 
----------
 f</codeblock>
      <p>since here no normalization of the word <codeph>rats</codeph> will occur. The elements of a
          <codeph>tsvector</codeph> are lexemes, which are assumed already normalized, so
          <codeph>rats</codeph> does not match <codeph>rat</codeph>.</p>
      <p>The <codeph>@@</codeph> operator also supports <codeph>text</codeph> input, allowing
        explicit conversion of a text string to <codeph>tsvector</codeph> or
          <codeph>tsquery</codeph> to be skipped in simple cases. The variants available are:</p>
      <codeblock>tsvector @@ tsquery
tsquery  @@ tsvector
text @@ tsquery
text @@ text</codeblock>
      <p>The first two of these we saw already. The form <codeph>text @@ tsquery</codeph> is
        equivalent to <codeph>to_tsvector(x) @@ y</codeph>. The form <codeph>text @@ text</codeph>
        is equivalent to <codeph>to_tsvector(x) @@ plainto_tsquery(y)</codeph>.</p>
    </section>
    <section id="configurations">
      <title>Configurations</title>
      <p>The above are all simple text search examples. As mentioned before, full text search
        functionality includes the ability to do many more things: skip indexing certain words (stop
        words), process synonyms, and use sophisticated parsing, e.g., parse based on more than just
        white space. This functionality is controlled by <i>text search configurations</i>.
        Greenplum Database comes with predefined configurations for many languages, and you can
        easily create your own configurations. (psql's <codeph>\dF</codeph> command shows all
        available configurations.)</p>
      <p>During installation an appropriate configuration is selected and <xref
          href="../../ref_guide/config_params/guc-list.xml#default_text_search_config"/> is set
        accordingly in <codeph>postgresql.conf</codeph>. If you are using the same text search
        configuration for the entire cluster you can use the value in
          <codeph>postgresql.conf</codeph>. To use different configurations throughout the cluster
        but the same configuration within any one database, use<codeph> ALTER DATABASE ...
          SET</codeph>. Otherwise, you can set <codeph>default_text_search_config</codeph> in each
        session.</p>
      <p>Each text search function that depends on a configuration has an optional
          <codeph>regconfig</codeph> argument, so that the configuration to use can be specified
        explicitly. <codeph>default_text_search_config</codeph> is used only when this argument is
        omitted.</p>
      <p>To make it easier to build custom text search configurations, a configuration is built up
        from simpler database objects. Greenplum Database's text search facility provides four types
        of configuration-related database objects:</p>
      <ul id="ul_vjd_jyt_kfb">
        <li><i>Text search parsers</i> break documents into tokens and classify each token (for
          example, as words or numbers).</li>
        <li><i>Text search dictionaries</i> convert tokens to normalized form and reject stop
          words.</li>
        <li><i>Text search templates</i> provide the functions underlying dictionaries. (A
          dictionary simply specifies a template and a set of parameters for the template.)</li>
        <li><i>Text search configurations</i> select a parser and a set of dictionaries to use to
          normalize the tokens produced by the parser.</li>
      </ul>
      <p>Text search parsers and templates are built from low-level C functions; therefore it
        requires C programming ability to develop new ones, and superuser privileges to install one
        into a database. (There are examples of add-on parsers and templates in the
          <codeph>contrib/</codeph> area of the Greenplum Database distribution.) Since dictionaries
        and configurations just parameterize and connect together some underlying parsers and
        templates, no special privilege is needed to create a new dictionary or configuration.
        Examples of creating custom dictionaries and configurations appear later in this
        chapter.</p>
    </section>
  <section id="gptext">
    <title>Comparing Greenplum Database Text Search with Pivotal GPText</title>
      <p>Greenplum Database text search is PostgreSQL text search ported to the Greenplum Database
        MPP platform. Pivotal also offers Pivotal GPText, which integrates Greenplum Database with
        the Apache Solr text search platform. GPText installs an Apache Solr cluster alongside your
        Greenplum Database cluster and provides Greenplum Database functions you can use to create
        Solr indexes, query them, and receive results in the database session.</p>
      <p>Both of these systems provide powerful, enterprise-quality document indexing and searching
        services. Greenplum Database text search is immediately available to you, with no need to
        install and maintain additional software. If it meets your applications' requirements, you
        should use it. </p>
      <p>GPText, with Solr, has many capabilities that are not available with Greenplum Database
        text search. In particular, GPText is better for advanced text analysis applications.
        Following are some of the advantages and capabilities available to you when you use GPText
        for text search applications.</p>
      <ul id="ul_ywm_fg1_nfb">
        <li>The Apache Solr cluster can be scaled separately from the database. Solr nodes can be
          deployed on the Greenplum Database hosts or on separate hosts on the network. </li>
        <li>Indexing and search workloads can be moved out of Greenplum Database to Solr to maintain
          database query performance.</li>
        <li>GPText creates Solr indexes that are split into <i>shards</i>, one per Greenplum
          Database segment, so the advantages of the Greenplum Database MPP architecture are
          extended to text search workloads.</li>
        <li>Indexing and searching documents with Solr is very fast and can be scaled by adding more
          Solr nodes to the cluster.</li>
        <li>Document content can be stored in Greenplum Database tables, in the Solr index, or both. </li>
        <li>Through GPText, Solr can index documents stored as text in Greenplum Database tables, as
          well as documents in external stores accessible using HTTP, FTP, S3, or HDFS URLs.</li>
        <li>Solr automatically recognizes most rich document formats and indexes document content
          and metadata separately.</li>
        <li>Solr indexes are highly customizable. You can customize the text analysis chain down to
          the field level.</li>
        <li>In addition to the large number of languages, tokenizers, and filters available from the
          Apache project, GPText provides a social media tokenizer, an international text tokenizer,
          and a universal query parser that understands several common text search syntaxes.</li>
        <li>The GPText API supports advanced text analysis tools, such as facetting, named entity
          recognition (NER), and parts of speech (POS) recognition.</li>
      </ul>
      <p>See the <xref href="https://gptext.docs.pivotal.io" format="html" scope="external">GPText
          Documentation web site</xref> for more information about GPText. </p>
    </section>
  </body>
</topic>
