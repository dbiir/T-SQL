<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="dictionaries">
  <title>Text Search Dictionaries</title>
  <shortdesc>Tokens produced by the Greenplum Database full text search parser
    are passed through a chain of dictionaries to produce a normalized term or
    "lexeme". Different kinds of dictionaries are available to filter and
    transform tokens in different ways and for different languages.</shortdesc>
  <body>
    <p>This section contains the following subtopics:</p>
    <ul id="ul_tjn_nzw_4fb">
      <li><xref href="#dictionaries/section_j2z_lzw_4fb" format="dita"/></li>
      <li><xref href="#dictionaries/stop-words" format="dita"/></li>
      <li><xref href="#dictionaries/simple" format="dita"/></li>
      <li><xref href="#dictionaries/synonym" format="dita"/></li>
      <li><xref href="#dictionaries/thesaurus-dictionary" format="dita"/></li>
      <li><xref href="#dictionaries/ispell" format="dita"/></li>
      <li><xref href="#dictionaries/section_xgc_2zw_4fb" format="dita"/></li>
    </ul>
    <section id="section_j2z_lzw_4fb">
      <title>About Text Search Dictionaries</title>
      <p>Dictionaries are used to eliminate words that should not be considered
        in a search (<i>stop words</i>), and to <i>normalize</i> words so that
        different derived forms of the same word will match. A successfully
        normalized word is called a <i>lexeme</i>. Aside from improving search
        quality, normalization and removal of stop words reduces the size of the
          <codeph>tsvector</codeph> representation of a document, thereby
        improving performance. Normalization does not always have linguistic
        meaning and usually depends on application semantics.</p>
      <p>Some examples of normalization:</p>
      <ul id="ul_y5r_vm5_kfb">
        <li>Linguistic - Ispell dictionaries try to reduce input words to a
          normalized form; stemmer dictionaries remove word endings</li>
        <li>URL locations can be canonicalized to make equivalent URLs match:<ul
            id="ul_z5r_vm5_kfb">
            <li><codeph>http://www.pgsql.ru/db/mw/index.html</codeph></li>
            <li><codeph>http://www.pgsql.ru/db/mw/</codeph></li>
            <li><codeph>http://www.pgsql.ru/db/../db/mw/index.html</codeph></li>
          </ul></li>
        <li>Color names can be replaced by their hexadecimal values, e.g.,
            <codeph>red</codeph>, <codeph>green</codeph>, <codeph>blue</codeph>,
            <codeph>magenta</codeph> -> <codeph>FF0000</codeph>,
            <codeph>00FF00</codeph>, <codeph>0000FF</codeph>,
            <codeph>FF00FF</codeph></li>
        <li>If indexing numbers, we can remove some fractional digits to reduce
          the range of possible numbers, so for example 3.14159265359,
          3.1415926, 3.14 will be the same after normalization if only two
          digits are kept after the decimal point.</li>
      </ul>
      <p>A dictionary is a program that accepts a token as input and
        returns:</p>
      <ul id="ul_avr_vm5_kfb">
        <li>an array of lexemes if the input token is known to the dictionary
          (notice that one token can produce more than one lexeme)</li>
        <li>a single lexeme with the <codeph>TSL_FILTER</codeph> flag set, to
          replace the original token with a new token to be passed to subsequent
          dictionaries (a dictionary that does this is called a <i>filtering
            dictionary</i>)</li>
        <li>an empty array if the dictionary knows the token, but it is a stop
          word</li>
        <li><codeph>NULL</codeph> if the dictionary does not recognize the input
          token</li>
      </ul>
      <p>Greenplum Database provides predefined dictionaries for many languages.
        There are also several predefined templates that can be used to create
        new dictionaries with custom parameters. Each predefined dictionary
        template is described below. If no existing template is suitable, it is
        possible to create new ones; see the <codeph>contrib/</codeph> area of
        the Greenplum Database distribution for examples.</p>
      <p>A text search configuration binds a parser together with a set of
        dictionaries to process the parser's output tokens. For each token type
        that the parser can return, a separate list of dictionaries is specified
        by the configuration. When a token of that type is found by the parser,
        each dictionary in the list is consulted in turn, until some dictionary
        recognizes it as a known word. If it is identified as a stop word, or if
        no dictionary recognizes the token, it will be discarded and not indexed
        or searched for. Normally, the first dictionary that returns a
          <codeph>non-NULL</codeph> output determines the result, and any
        remaining dictionaries are not consulted; but a filtering dictionary can
        replace the given word with a modified word, which is then passed to
        subsequent dictionaries.</p>
      <p>The general rule for configuring a list of dictionaries is to place
        first the most narrow, most specific dictionary, then the more general
        dictionaries, finishing with a very general dictionary, like a Snowball
        stemmer or <codeph>simple</codeph>, which recognizes everything. For
        example, for an astronomy-specific search (<codeph>astro_en</codeph>
        configuration) one could bind token type <codeph>asciiword</codeph>
        (ASCII word) to a synonym dictionary of astronomical terms, a general
        English dictionary and a Snowball English stemmer:</p>
      <codeblock>ALTER TEXT SEARCH CONFIGURATION astro_en
    ADD MAPPING FOR asciiword WITH astrosyn, english_ispell, english_stem;</codeblock>
      <p>A filtering dictionary can be placed anywhere in the list, except at
        the end where it'd be useless. Filtering dictionaries are useful to
        partially normalize words to simplify the task of later dictionaries.
        For example, a filtering dictionary could be used to remove accents from
        accented letters, as is done by the <xref
          href="https://www.postgresql.org/docs/9.4/unaccent.html"
          format="html" scope="external">unaccent</xref> module.</p>
    </section>
    <section id="stop-words">
      <title>Stop Words</title>
      <p>Stop words are words that are very common, appear in almost every document, and have no
        discrimination value. Therefore, they can be ignored in the context of full text searching.
        For example, every English text contains words like a and the, so it is useless to store
        them in an index. However, stop words do affect the positions in <codeph>tsvector</codeph>,
        which in turn affect ranking:</p>
      <codeblock>SELECT to_tsvector('english','in the list of stop words');
        to_tsvector
----------------------------
 'list':3 'stop':5 'word':6</codeblock>
      <p>The missing positions 1,2,4 are because of stop words. Ranks calculated for documents with
        and without stop words are quite different:</p>
      <codeblock>SELECT ts_rank_cd (to_tsvector('english','in the list of stop words'), to_tsquery('list &amp; stop'));
 ts_rank_cd
------------
       0.05

SELECT ts_rank_cd (to_tsvector('english','list stop words'), to_tsquery('list &amp; stop'));
 ts_rank_cd
------------
        0.1</codeblock>
      <p>It is up to the specific dictionary how it treats stop words. For example,
          <codeph>ispell</codeph> dictionaries first normalize words and then look at the list of
        stop words, while <codeph>Snowball</codeph> stemmers first check the list of stop words. The
        reason for the different behavior is an attempt to decrease noise.</p>
    </section>
    <section id="simple">
      <title>Simple Dictionary</title>
      <p>The simple dictionary template operates by converting the input token
        to lower case and checking it against a file of stop words. If it is
        found in the file then an empty array is returned, causing the token to
        be discarded. If not, the lower-cased form of the word is returned as
        the normalized lexeme. Alternatively, the dictionary can be configured
        to report non-stop-words as unrecognized, allowing them to be passed on
        to the next dictionary in the list.</p>
      <p>Here is an example of a dictionary definition using the simple
        template:</p>
      <codeblock>CREATE TEXT SEARCH DICTIONARY public.simple_dict (
    TEMPLATE = pg_catalog.simple,
    STOPWORDS = english
);</codeblock>
      <p>Here, <codeph>english</codeph> is the base name of a file of stop
        words. The file's full name will be
          <codeph>$SHAREDIR/tsearch_data/english.stop</codeph>, where
          <codeph>$SHAREDIR</codeph> means the Greenplum Database installation's
        shared-data directory, often
          <codeph>/usr/local/greenplum-db-&lt;version>/share/postgresql</codeph>
        (use <codeph>pg_config --sharedir</codeph> to determine it if you're not
        sure). The file format is simply a list of words, one per line. Blank
        lines and trailing spaces are ignored, and upper case is folded to lower
        case, but no other processing is done on the file contents.</p>
      <p>Now we can test our dictionary:</p>
      <codeblock>SELECT ts_lexize('public.simple_dict','YeS');
 ts_lexize
-----------
 {yes}

SELECT ts_lexize('public.simple_dict','The');
 ts_lexize
-----------
 {}</codeblock>
      <p>We can also choose to return <codeph>NULL</codeph>, instead of the
        lower-cased word, if it is not found in the stop words file. This
        behavior is selected by setting the dictionary's <codeph>Accept</codeph>
        parameter to false. Continuing the example:</p>
      <codeblock>ALTER TEXT SEARCH DICTIONARY public.simple_dict ( Accept = false );

SELECT ts_lexize('public.simple_dict','YeS');
 ts_lexize
-----------
 {yes}

SELECT ts_lexize('public.simple_dict','The');
 ts_lexize
-----------
 {}</codeblock>
      <p>With the default setting of <codeph>Accept = true</codeph>, it is only
        useful to place a simple dictionary at the end of a list of
        dictionaries, since it will never pass on any token to a following
        dictionary. Conversely, <codeph>Accept = false</codeph> is only useful
        when there is at least one following dictionary.</p>
      <note type="caution">Most types of dictionaries rely on configuration
        files, such as files of stop words. These files must be stored in UTF-8
        encoding. They will be translated to the actual database encoding, if
        that is different, when they are read into the server.</note>
      <note type="caution">Normally, a database session will read a dictionary
        configuration file only once, when it is first used within the session.
        If you modify a configuration file and want to force existing sessions
        to pick up the new contents, issue an <codeph>ALTER TEXT SEARCH
          DICTIONARY </codeph>command on the dictionary. This can be a "dummy"
        update that doesn't actually change any parameter values.</note>
    </section>
    <section id="synonym">
      <title>Synonym Dictionary</title>
      <p>This dictionary template is used to create dictionaries that replace a
        word with a synonym. Phrases are not supported—use the thesaurus
        template (<xref href="#dictionaries/thesaurus-dictionary" format="dita"
        />) for that. A synonym dictionary can be used to overcome linguistic
        problems, for example, to prevent an English stemmer dictionary from
        reducing the word "Paris" to "pari". It is enough to have a
          <codeph>Paris paris</codeph> line in the synonym dictionary and put it
        before the <codeph>english_stem</codeph> dictionary. For example:</p>
      <codeblock>SELECT * FROM ts_debug('english', 'Paris');
   alias   |   description   | token |  dictionaries  |  dictionary  | lexemes 
-----------+-----------------+-------+----------------+--------------+---------
 asciiword | Word, all ASCII | Paris | {english_stem} | english_stem | {pari}

CREATE TEXT SEARCH DICTIONARY my_synonym (
    TEMPLATE = synonym,
    SYNONYMS = my_synonyms
);

ALTER TEXT SEARCH CONFIGURATION english
    ALTER MAPPING FOR asciiword
    WITH my_synonym, english_stem;

SELECT * FROM ts_debug('english', 'Paris');
   alias   |   description   | token |       dictionaries        | dictionary | lexemes 
-----------+-----------------+-------+---------------------------+------------+---------
 asciiword | Word, all ASCII | Paris | {my_synonym,english_stem} | my_synonym | {paris}</codeblock>
      <p>The only parameter required by the synonym template is
          <codeph>SYNONYMS</codeph>, which is the base name of its configuration
        file — <codeph>my_synonyms</codeph> in the above example. The file's
        full name will be
          <codeph>$SHAREDIR/tsearch_data/my_synonyms.syn</codeph> (where
          <codeph>$SHAREDIR</codeph> means the Greenplum Database installation's
        shared-data directory). The file format is just one line per word to be
        substituted, with the word followed by its synonym, separated by white
        space. Blank lines and trailing spaces are ignored.</p>
      <p>The synonym template also has an optional parameter
          <codeph>CaseSensitive</codeph>, which defaults to
          <codeph>false</codeph>. When <codeph>CaseSensitive</codeph> is
          <codeph>false</codeph>, words in the synonym file are folded to lower
        case, as are input tokens. When it is <codeph>true</codeph>, words and
        tokens are not folded to lower case, but are compared as-is.</p>
      <p>An asterisk (*) can be placed at the end of a synonym in the
        configuration file. This indicates that the synonym is a prefix. The
        asterisk is ignored when the entry is used in
          <codeph>to_tsvector()</codeph>, but when it is used in
          <codeph>to_tsquery()</codeph>, the result will be a query item with
        the prefix match marker (see <xref
          href="controlling.xml#controlling/parsing-queries"/>). For example,
        suppose we have these entries in
          <codeph>$SHAREDIR/tsearch_data/synonym_sample.syn</codeph>:</p>
      <codeblock>postgres pgsql postgresql pgsql postgre pgsql 
gogle googl 
indices index*</codeblock>
      <p>Then we will get these results:</p>
      <codeblock>mydb=# CREATE TEXT SEARCH DICTIONARY syn (template=synonym, synonyms='synonym_sample');
mydb=# SELECT ts_lexize('syn','indices');
 ts_lexize
-----------
 {index}
(1 row)

mydb=# CREATE TEXT SEARCH CONFIGURATION tst (copy=simple);
mydb=# ALTER TEXT SEARCH CONFIGURATION tst ALTER MAPPING FOR asciiword WITH syn;
mydb=# SELECT to_tsvector('tst','indices');
 to_tsvector
-------------
 'index':1
(1 row)

mydb=# SELECT to_tsquery('tst','indices');
 to_tsquery
------------
 'index':*
(1 row)

mydb=# SELECT 'indexes are very useful'::tsvector;
            tsvector             
---------------------------------
 'are' 'indexes' 'useful' 'very'
(1 row)

mydb=# SELECT 'indexes are very useful'::tsvector @@ to_tsquery('tst','indices');
 ?column?
----------
 t
(1 row)</codeblock>
    </section>
    <section id="thesaurus-dictionary">
      <title>Thesaurus Dictionary</title>
      <p>A thesaurus dictionary (sometimes abbreviated as TZ) is a collection of words that includes
        information about the relationships of words and phrases, i.e., broader terms (BT), narrower
        terms (NT), preferred terms, non-preferred terms, related terms, etc.</p>
      <p>Basically a thesaurus dictionary replaces all non-preferred terms by one preferred term
        and, optionally, preserves the original terms for indexing as well. Greenplum Database's
        current implementation of the thesaurus dictionary is an extension of the synonym dictionary
        with added <i>phrase</i> support. A thesaurus dictionary requires a configuration file of
        the following format:</p>
      <codeblock># this is a comment
sample word(s) : indexed word(s)
more sample word(s) : more indexed word(s)
...</codeblock>
      <p>where the colon (<codeph>:</codeph>) symbol acts as a delimiter between a phrase and its
        replacement.</p>
      <p>A thesaurus dictionary uses a <i>subdictionary</i> (which is specified in the dictionary's
        configuration) to normalize the input text before checking for phrase matches. It is only
        possible to select one subdictionary. An error is reported if the subdictionary fails to
        recognize a word. In that case, you should remove the use of the word or teach the
        subdictionary about it. You can place an asterisk (<codeph>*</codeph>) at the beginning of
        an indexed word to skip applying the subdictionary to it, but all sample words <b>must</b>
        be known to the subdictionary.</p>
      <p>The thesaurus dictionary chooses the longest match if there are multiple phrases matching
        the input, and ties are broken by using the last definition.</p>
      <p>Specific stop words recognized by the subdictionary cannot be specified; instead use
          <codeph>?</codeph> to mark the location where any stop word can appear. For example,
        assuming that <codeph>a</codeph> and <codeph>the</codeph> are stop words according to the
        subdictionary:</p>
      <codeblock>? one ? two : swsw</codeblock>
      <p>matches <codeph>a one the two</codeph> and <codeph>the one a two</codeph>; both would be
        replaced by <codeph>swsw</codeph>.</p>
      <p>Since a thesaurus dictionary has the capability to recognize phrases it must remember its
        state and interact with the parser. A thesaurus dictionary uses these assignments to check
        if it should handle the next word or stop accumulation. The thesaurus dictionary must be
        configured carefully. For example, if the thesaurus dictionary is assigned to handle only
        the <codeph>asciiword</codeph> token, then a thesaurus dictionary definition like
          <codeph>one 7</codeph> will not work since token type <codeph>uint</codeph> is not
        assigned to the thesaurus dictionary.</p>
      <note type="caution">Thesauruses are used during indexing so any change in the thesaurus
        dictionary's parameters requires reindexing. For most other dictionary types, small changes
        such as adding or removing stopwords does not force reindexing.</note>
      <sectiondiv>
        <p><b>Thesaurus Configuration</b></p>
        <p>To define a new thesaurus dictionary, use the <codeph>thesaurus</codeph> template. For
          example:</p>
        <codeblock>CREATE TEXT SEARCH DICTIONARY thesaurus_simple (
    TEMPLATE = thesaurus,
    DictFile = mythesaurus,
    Dictionary = pg_catalog.english_stem
);</codeblock>
        <p>Here:</p>
        <ul id="ul_dz3_kq5_kfb">
          <li><codeph>thesaurus_simple</codeph> is the new dictionary's name</li>
          <li><codeph>mythesaurus</codeph> is the base name of the thesaurus configuration file.
            (Its full name will be <codeph>$SHAREDIR/tsearch_data/mythesaurus.ths</codeph>, where
              <codeph>$SHAREDIR</codeph> means the installation shared-data directory.)</li>
          <li><codeph>pg_catalog.english_stem</codeph> is the subdictionary (here, a Snowball
            English stemmer) to use for thesaurus normalization. Notice that the subdictionary will
            have its own configuration (for example, stop words), which is not shown here.</li>
        </ul>
        <p>Now it is possible to bind the thesaurus dictionary <codeph>thesaurus_simple</codeph> to
          the desired token types in a configuration, for example:</p>
        <codeblock>ALTER TEXT SEARCH CONFIGURATION russian
    ALTER MAPPING FOR asciiword, asciihword, hword_asciipart
    WITH thesaurus_simple;</codeblock>
      </sectiondiv>
      <sectiondiv>
        <p><b>Thesaurus Example</b></p>
        <p>Consider a simple astronomical thesaurus <codeph>thesaurus_astro</codeph>, which contains
          some astronomical word combinations:</p>
        <pre>supernovae stars : sn
crab nebulae : crab</pre>
        <p>Below we create a dictionary and bind some token types to an astronomical thesaurus and
          English stemmer:</p>
        <codeblock>CREATE TEXT SEARCH DICTIONARY thesaurus_astro (
    TEMPLATE = thesaurus,
    DictFile = thesaurus_astro,
    Dictionary = english_stem
);

ALTER TEXT SEARCH CONFIGURATION russian
    ALTER MAPPING FOR asciiword, asciihword, hword_asciipart
    WITH thesaurus_astro, english_stem;</codeblock>
        <p>Now we can see how it works. <codeph>ts_lexize</codeph> is not very useful for testing a
          thesaurus, because it treats its input as a single token. Instead we can use
            <codeph>plainto_tsquery</codeph> and <codeph>to_tsvector</codeph>, which will break
          their input strings into multiple tokens:</p>
        <codeblock>SELECT plainto_tsquery('supernova star');
 plainto_tsquery
-----------------
 'sn'

SELECT to_tsvector('supernova star');
 to_tsvector
-------------
 'sn':1</codeblock>
        <p>In principle, one can use <codeph>to_tsquery</codeph> if you quote the argument:</p>
        <codeblock>SELECT to_tsquery('''supernova star''');
 to_tsquery
------------
 'sn'</codeblock>
        <p>Notice that <codeph>supernova star</codeph> matches <codeph>supernovae stars</codeph> in
            <codeph>thesaurus_astro</codeph> because we specified the <codeph>english_stem</codeph>
          stemmer in the <codeph>thesaurus</codeph> definition. The stemmer removed the
            <codeph>e</codeph> and <codeph>s</codeph>.</p>
        <p>To index the original phrase as well as the substitute, just include it in the right-hand
          part of the definition:</p>
        <codeblock>supernovae stars : sn supernovae stars

SELECT plainto_tsquery('supernova star');
       plainto_tsquery
-----------------------------
 'sn' &amp; 'supernova' &amp; 'star'</codeblock>
      </sectiondiv>
    </section>
    <section id="ispell">
      <title>Ispell Dictionary</title>
      <p>The Ispell dictionary template supports <i>morphological
          dictionaries</i>, which can normalize many different linguistic forms
        of a word into the same lexeme. For example, an English Ispell
        dictionary can match all declensions and conjugations of the search term
          <codeph>bank</codeph>, e.g., <codeph>banking</codeph>,
          <codeph>banked</codeph>, <codeph>banks</codeph>,
          <codeph>banks</codeph>', and <codeph>bank's</codeph>.</p>
      <p>The standard Greenplum Database distribution does not include any
        Ispell configuration files. Dictionaries for a large number of languages
        are available from <xref
          href="http://ficus-www.cs.ucla.edu/geoff/ispell.html" format="html"
          scope="external">Ispell</xref>. Also, some more modern dictionary file
        formats are supported — <xref
          href="http://en.wikipedia.org/wiki/MySpell" format="html"
          scope="external">MySpell</xref> (OO &lt; 2.0.1) and <xref
          href="http://sourceforge.net/projects/hunspell/" format="html"
          scope="external">Hunspell</xref> (OO >= 2.0.2). A large list of
        dictionaries is available on the <xref
          href="http://wiki.services.openoffice.org/wiki/Dictionaries"
          format="html" scope="external">OpenOffice Wiki</xref>.</p>
      <p>To create an Ispell dictionary, use the built-in
          <codeph>ispell</codeph> template and specify several parameters:</p>
      <codeblock>CREATE TEXT SEARCH DICTIONARY english_ispell (
    TEMPLATE = ispell,
    DictFile = english,
    AffFile = english,
    StopWords = english
);</codeblock>
      <p>Here, <codeph>DictFile</codeph>, <codeph>AffFile</codeph>, and
          <codeph>StopWords</codeph> specify the base names of the dictionary,
        affixes, and stop-words files. The stop-words file has the same format
        explained above for the <codeph>simple</codeph> dictionary type. The
        format of the other files is not specified here but is available from
        the above-mentioned web sites.</p>
      <p>Ispell dictionaries usually recognize a limited set of words, so they
        should be followed by another broader dictionary; for example, a
        Snowball dictionary, which recognizes everything.</p>
      <p>Ispell dictionaries support splitting compound words; a useful feature.
        Notice that the affix file should specify a special flag using the
          <codeph>compoundwords controlled</codeph> statement that marks
        dictionary words that can participate in compound formation:</p>
      <codeblock>compoundwords  controlled z</codeblock>
      <p>Here are some examples for the Norwegian language:</p>
      <codeblock>SELECT ts_lexize('norwegian_ispell', 'overbuljongterningpakkmesterassistent');
   {over,buljong,terning,pakk,mester,assistent}
SELECT ts_lexize('norwegian_ispell', 'sjokoladefabrikk');
   {sjokoladefabrikk,sjokolade,fabrikk}</codeblock>
      <note>
        <p> MySpell does not support compound words. Hunspell has sophisticated
          support for compound words. At present, Greenplum Database implements
          only the basic compound word operations of Hunspell.</p>
      </note>
    </section>
    <section id="section_xgc_2zw_4fb">
      <title>SnowBall Dictionary</title>
      <p>The Snowball dictionary template is based on a project by Martin
        Porter, inventor of the popular Porter's stemming algorithm for the
        English language. Snowball now provides stemming algorithms for many
        languages (see the <xref href="http://snowballstem.org/" format="html"
          scope="external">Snowball site</xref> for more information). Each
        algorithm understands how to reduce common variant forms of words to a
        base, or stem, spelling within its language. A Snowball dictionary
        requires a language parameter to identify which stemmer to use, and
        optionally can specify a stopword file name that gives a list of words
        to eliminate. (Greenplum Database's standard stopword lists are also
        provided by the Snowball project.) For example, there is a built-in
        definition equivalent to</p>
      <codeblock>CREATE TEXT SEARCH DICTIONARY english_stem (
    TEMPLATE = snowball,
    Language = english,
    StopWords = english
);</codeblock>
      <p>The stopword file format is the same as already explained.</p>
      <p>A Snowball dictionary recognizes everything, whether or not it is able
        to simplify the word, so it should be placed at the end of the
        dictionary list. It is useless to have it before any other dictionary
        because a token will never pass through it to the next dictionary.</p>
    </section>
  </body>
</topic>
