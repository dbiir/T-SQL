<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic78">
   <title>Write the gpfdist Configuration</title>
   <body>
      <p>The <cmdname>gpfdist</cmdname> configuration is specified as a YAML 1.1 document.
                    It specifies rules that <cmdname>gpfdist</cmdname> uses to select a Transform to
                    apply when loading or extracting data. </p>
      <p>This example <cmdname>gpfdist</cmdname> configuration contains the following
                    items:</p>
      <ul>
         <li id="du219363">the <codeph>config.yaml</codeph> file defining
                            <codeph>TRANSFORMATIONS</codeph>
         </li>
         <li id="du219364">the <codeph>input_transform.sh</codeph> wrapper script,
                        referenced in the <codeph>config.yaml</codeph> file</li>
         <li id="du219365">the <codeph>input_transform.stx</codeph> joost transformation,
                        called from <codeph>input_transform.sh</codeph>
         </li>
      </ul>
      <p>Aside from the ordinary YAML rules, such as starting the document with three
                    dashes (<codeph>---</codeph>), a <cmdname>gpfdist</cmdname> configuration must
                    conform to the following restrictions:</p>
      <ol>
         <li id="du186770">a <codeph>VERSION</codeph> setting must be present with the
                        value <codeph>1.0.0.1</codeph>.</li>
         <li id="du186771">a <codeph>TRANSFORMATIONS</codeph> setting must be present and
                        contain one or more mappings.</li>
         <li id="du186772">Each mapping in the <codeph>TRANSFORMATION</codeph> must
                            contain:<ul id="ul_ass_j31_34">
               <li id="du186773">a <codeph>TYPE</codeph> with the value 'input' or
                                'output'</li>
               <li id="du186774">a <codeph>COMMAND</codeph> indicating how the
                                transform is run.</li>
            </ul>
         </li>
         <li id="du186775">Each mapping in the <codeph>TRANSFORMATION</codeph> can
                        contain optional <codeph>CONTENT</codeph>, <codeph>SAFE</codeph>, and
                            <codeph>STDERR</codeph> settings.</li>
      </ol>
      <p>The following <cmdname>gpfdist</cmdname> configuration called
                        <codeph>config.YAML</codeph> applies to the prices example. The initial
                    indentation on each line is significant and reflects the hierarchical nature of
                    the specification. The name <codeph>prices_input</codeph> in the following
                    example will be referenced later when creating the table in SQL.</p>
      <codeblock>---
VERSION: 1.0.0.1
TRANSFORMATIONS:
  prices_input:
    TYPE:     input
    COMMAND:  /bin/bash input_transform.sh %filename%
</codeblock>
      <p>The <codeph>COMMAND</codeph> setting uses a wrapper script called
                        <codeph>input_transform.sh</codeph> with a <codeph>%filename%</codeph>
                    placeholder. When <cmdname>gpfdist</cmdname> runs the
                        <codeph>prices_input</codeph> transform, it invokes
                        <codeph>input_transform.sh</codeph> with <codeph>/bin/bash</codeph> and
                    replaces the <codeph>%filename%</codeph> placeholder with the path to the input
                    file to transform. The wrapper script called <codeph>input_transform.sh</codeph>
                    contains the logic to invoke the STX transformation and return the output.</p>
      <p>If Joost is used, the Joost STX engine must be installed.</p>
      <codeblock>#!/bin/bash
# input_transform.sh - sample input transformation, 
# demonstrating use of Java and Joost STX to convert XML into
# text to load into Greenplum Database.
# java arguments:
#   -jar joost.jar         joost STX engine
#   -nodecl                  don't generate a &lt;?xml?&gt; declaration
#   $1                        filename to process
#   input_transform.stx    the STX transformation
#
# the AWK step eliminates a blank line joost emits at the end
java \
    -jar joost.jar \
    -nodecl \
    $1 \
    input_transform.stx \
 | awk 'NF&gt;0
</codeblock>
      <p>The <codeph>input_transform.sh</codeph> file uses the Joost STX engine with the
                    AWK interpreter. The following diagram shows the process flow as
                        <cmdname>gpfdist</cmdname> runs the transformation.</p>
      <image href="../../graphics/02-pipeline.png" placement="break" width="462px" height="190px"/>
   </body>
</topic>