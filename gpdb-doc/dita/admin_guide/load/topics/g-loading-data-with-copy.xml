<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic64">
   <title>Loading Data with COPY</title>
   <body>
      <p>
         <codeph>COPY FROM</codeph> copies data from a file or standard input into a table and
         appends the data to the table contents. <codeph>COPY</codeph> is non-parallel: data is
         loaded in a single process using the Greenplum master instance. Using <codeph>COPY</codeph>
         is only recommended for very small data files. </p>
     <p>The <codeph>COPY</codeph> source file must be accessible to the <codeph>postgres</codeph>
        process on the master host. Specify the <codeph>COPY</codeph> source file name relative to
        the data directory on the master host, or specify an absolute path. </p>
      <p>Greenplum copies data from <codeph>STDIN</codeph> or <codeph>STDOUT</codeph> using the
         connection between the client and the master server. </p>
   </body>
  <topic id="topic1" xml:lang="en">
    <title>Loading From a File</title>
    <body>
      <p>The <codeph>COPY</codeph> command asks the <codeph>postgres</codeph> backend to open the
         specified file, read it and append it to the table. In order to be able to read the file,
         the backend needs to have read permissions on the file, and the file name must be
         specified using an absolute path on the master host, or a relative path to the master
         data directory.</p>
      <p>
          <codeblock>COPY <i>table_name</i> FROM <i>/path/to/filename</i>;</codeblock>
      </p>
   </body>
  </topic>
  <topic id="topic2" xml:lang="en">
    <title>Loading From STDIN</title>
    <body>
      <p>To avoid the problem of copying the data file to the master host before loading the data,
         <codeph>COPY FROM STDIN</codeph> uses the Standard Input channel and feeds data directly
         into the <codeph>postgres</codeph> backend. After the <codeph>COPY FROM STDIN</codeph>
         command started, the backend will accept lines of data until a single line only contains
         a backslash-period (\.).</p>
      <p>
          <codeblock>COPY <i>table_name</i> FROM <i>STDIN</i>;</codeblock>
      </p>
   </body>
  </topic>
  <topic id="topic3" xml:lang="en">
    <title>Loading Data Using \copy in psql</title>
    <body>
      <p>Do not confuse the psql <codeph>\copy</codeph> command with the <codeph>COPY</codeph> SQL
         command. The <codeph>\copy</codeph> invokes a regular <codeph>COPY FROM STDIN</codeph>
         and sends the data from the psql client to the backend. Therefore any file must reside on
         the host where the psql client runs, and must be accessible to the user which runs the
         client.</p>
      <p>To avoid the problem of copying the data file to the master host before loading the data,
         <codeph>COPY FROM STDIN</codeph> uses the Standard Input channel and feeds data directly
         into the <codeph>postgres</codeph> backend. After the <codeph>COPY FROM STDIN</codeph>
         command started, the backend will accept lines of data until a single line only contains
         a backslash-period (\.). psql is wrapping all of this into the handy
         <codeph>\copy</codeph> command.</p>
      <p>
          <codeblock>\copy <i>table_name</i> FROM <i>filename</i>;</codeblock>
      </p>
   </body>
  </topic>
  <topic id="topic4" xml:lang="en">
    <title>Input Format</title>
    <body>
      <p><codeph>COPY FROM</codeph> accepts a <codeph>FORMAT</codeph> parameter, which specifies
         the format of the input data. The possible values are <codeph>TEXT</codeph>,
         <codeph>CSV</codeph> (Comma Separated Values), and <codeph>BINARY</codeph>.</p>
      <p>
          <codeblock>COPY <i>table_name</i> FROM <i>/path/to/filename</i> WITH (FORMAT csv);</codeblock>
      </p>
      <p>The <codeph>FORMAT csv</codeph> will read comma-separated values. The
         <codeph>FORMAT text</codeph> by default uses tabulators to separate the values, the
         <codeph>DELIMITER</codeph> option specifies a different character as value delimiter.</p>
      <p>
          <codeblock>COPY <i>table_name</i> FROM <i>/path/to/filename</i> WITH (FORMAT text, DELIMITER '|');</codeblock>
      </p>
      <p>By default, the default client encoding is used, this can be changed with the
         <codeph>ENCODING</codeph> option. This is useful if data is coming from another operating
         system.</p>
      <p>
          <codeblock>COPY <i>table_name</i> FROM <i>/path/to/filename</i> WITH (ENCODING 'latin1');</codeblock>
      </p>
   </body>
  </topic>
</topic>
