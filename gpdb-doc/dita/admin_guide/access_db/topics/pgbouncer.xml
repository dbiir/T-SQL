<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
  <topic id="topic_fstrm">
    <title>Using the PgBouncer Connection Pooler </title>
    <body>
      <p>The PgBouncer utility manages connection pools for PostgreSQL and Greenplum Database
      connections.</p>
      <p>The
        following topics describe how to set up and use PgBouncer with Greenplum Database. Refer to the
          <xref href="https://pgbouncer.github.io" format="html" scope="external">PgBouncer web
          site</xref> for information about using PgBouncer with PostgreSQL.</p>
      <ul id="ul_off_zqj_5s">
        <li>
          <xref href="#topic_nzk_nqg_cs" format="dita"/>
        </li>
        <li>
          <xref href="#pgb_migrate" format="dita"/>
        </li>
        <li>
          <xref href="#pgb_config" format="dita"/>
        </li>
        <li>
          <xref href="#pgb_start" format="dita"/>
        </li>
        <li>
          <xref href="#topic_manage" format="dita"/>
        </li>
      </ul>
    </body>
    <topic id="topic_nzk_nqg_cs">
      <title>Overview</title>
      <body>
        <p>A database connection pool is a cache of database connections. Once a pool of connections
          is established, connection pooling eliminates the overhead of creating new database
          connections, so clients connect much faster and the server load is reduced.</p>
        <p>The PgBouncer connection pooler, from the PostgreSQL community, is included in
          your Greenplum Database installation. PgBouncer is a light-weight connection pool
          manager for Greenplum and PostgreSQL.
          PgBouncer maintains a pool for connections for each database and user combination. PgBouncer either creates a new database connection for a client or reuses an
          existing connection for the same user and database. When the client disconnects, PgBouncer
          returns the connection to the pool for re-use.</p>
        <p>PgBouncer shares connections in one of three pool modes:<ul id="ul_jyx_rvg_cs">
            <li><i>Session pooling</i> – When a client connects, a connection is assigned to it as
              long as it remains connected. When the client disconnects, the connection is placed
              back into the pool.</li>
            <li><i>Transaction pooling</i> – A connection is assigned to a client for the duration
              of a transaction. When PgBouncer notices the transaction is done, the connection is
              placed back into the pool. This mode can be used only with applications that do not
              use features that depend upon a session. </li>
            <li><i>Statement pooling</i> – Statement pooling is like transaction pooling, but
              multi-statement transactions are not allowed. This mode is intended to enforce
              autocommit mode on the client and is targeted for PL/Proxy on PostgreSQL.</li>
          </ul></p>
        <p>You can set a default pool mode for the PgBouncer instance. You can override this
          mode for individual databases and users. </p>
        <p>PgBouncer supports the standard connection interface shared by PostgreSQL and Greenplum
          Database. The Greenplum Database client application (for example, <codeph>psql</codeph>)
          connects to the host and port on which PgBouncer is running rather than the Greenplum Database master host and port.</p>
        <p>PgBouncer includes a <codeph>psql</codeph>-like administration console. Authorized users can connect to a virtual database to monitor and manage PgBouncer. You can manage a PgBouncer daemon process via the admin console. You can also use the console to update and reload PgBouncer configuration at runtime without stopping and restarting the process.</p>
        <p>PgBouncer natively supports TLS.</p>
      </body>
    </topic>
    <topic id="pgb_migrate">
      <title>Migrating PgBouncer</title>
      <body>
        <p>When you migrate to a new Greenplum Database version, you must migrate your PgBouncer
          instance to that in the new Greenplum Database installation.</p>
        <ul><li><b>If you are migrating to a Greenplum Database version 5.8.x or earlier</b>, you can migrate PgBouncer without dropping connections. Launch the new PgBouncer
          process with the <codeph>-R</codeph> option and the configuration file that you started the process with:
        <codeblock>$ pgbouncer -R -d pgbouncer.ini</codeblock>
        <p>The <codeph>-R</codeph> (reboot) option causes the new process to connect to the console
          of the old process through a Unix socket and issue the following commands:</p>
        <codeblock>SUSPEND;
SHOW FDS;
SHUTDOWN;</codeblock>
        <p>When the new process detects that the old process is gone, it resumes the work with the old
          connections. This is possible because the <codeph>SHOW FDS</codeph> command sends actual
          file descriptors to the new process. If the transition fails for any reason, kill the new
          process and the old process will resume.</p></li>
        <li><b>If you are migrating to a Greenplum Database version 5.9.0 or later</b>, you must shut down the PgBouncer instance in your old installation and reconfigure and restart PgBouncer in your new installation.</li>
        <li>If you used stunnel to secure PgBouncer connections in your old installation, you must configure SSL/TLS in your new installation using the built-in TLS capabilities of PgBouncer 1.8.1 and later.</li>
        <li>If you used LDAP authentication in your old installation, you must configure LDAP in your new installation using the built-in PAM integration capabilities of PgBouncer 1.8.1 and later. You must also remove or replace any <codeph>ldap://</codeph>-prefixed password strings in the <codeph>auth_file</codeph>.</li></ul>
      </body>
    </topic>
    <topic id="pgb_config">
      <title>Configuring PgBouncer</title>
      <body>
        <p></p>
        <p>You configure PgBouncer and its access to Greenplum Database via a configuration file. This configuration file, commonly named <codeph>pgbouncer.ini</codeph>, provides location information for Greenplum databases. The <codeph>pgbouncer.ini</codeph> file also specifies process, connection pool, authorized users, and authentication configuration for PgBouncer.</p>
        <p>Sample <codeph>pgbouncer.ini</codeph> file contents:<codeblock>[databases]
postgres = host=127.0.0.1 port=5432 dbname=postgres
pgb_mydb = host=127.0.0.1 port=5432 dbname=mydb

[pgbouncer]
pool_mode = session
listen_port = 6543
listen_addr = 127.0.0.1
auth_type = md5
auth_file = users.txt
logfile = pgbouncer.log
pidfile = pgbouncer.pid
admin_users = gpadmin</codeblock></p>
        <p>Refer to the <xref href="../../../utility_guide/ref/pgbouncer-ini.xml" format="dita"
              scope="peer">pgbouncer.ini</xref> reference page for the
          PgBouncer configuration file format and the list of configuration properties it supports.</p>
         <p>When a client connects to PgBouncer, the connection pooler looks up the
           the configuration for the requested database (which may be an alias for the actual database) that was specified in the
           <codeph>pgbouncer.ini</codeph> configuration file to find the host name, port, and
          database name for the database connection. The configuration file also identifies
          the authentication mode in effect for the database. </p>
        <p>PgBouncer requires an authentication file, a text file that contains a list of
          Greenplum Database users and passwords. The contents of the file are dependent on the <codeph>auth_type</codeph> you configure in the <codeph>pgbouncer.ini</codeph> file. Passwords may be either clear text or MD5-encoded strings.
          You can also configure PgBouncer to query the destination database to obtain
          password information for users that are not in the authentication file. </p>
      <section id="pgb_auth">
        <title>PgBouncer Authentication File Format</title>
        <p>PgBouncer requires its own user authentication file. You specify the name of this file 
          in the <codeph>auth_file</codeph> property of the <codeph>pgbouncer.ini</codeph> configuration
           file. <codeph>auth_file</codeph> is a text file in the following format:</p>
        <codeblock>"username1" "password" ...
"username2" "md5abcdef012342345" ...</codeblock>
        <p><codeph>auth_file</codeph> contains one line per user. Each line must have at least two fields,
          both of which are enclosed in double quotes (<codeph>" "</codeph>). The first
          field identifies the Greenplum Database user name. The second field is
          either a plain-text or an MD5-encoded password. PgBouncer ignores the remainder of the line.</p>
        <p>(The format of <codeph>auth_file</codeph> is similar to that of the <codeph>pg_auth</codeph>
          text file that Greenplum Database uses for authentication information. PgBouncer
          can work directly with this Greenplum Database authentication file.)</p>
        <p>Use an MD5 encoded password. The format of an MD5 encoded password is: 
        <codeblock>"md5" + MD5_encoded(<varname>&lt;password>&lt;username></varname>)</codeblock></p>
        <p>You can also obtain the MD5-encoded passwords of all Greenplum Database users from the <codeph>pg_shadow</codeph> view.</p>
      </section>
      <section id="pgb_hba">
        <title>Configuring HBA-based Authentication for PgBouncer</title>
        <p>PgBouncer supports HBA-based authentication. To configure HBA-based authentication for PgBouncer, you set <codeph>auth_type=hba</codeph> in the <codeph>pgbouncer.ini</codeph> configuration file. You also provide the filename of the HBA-format file in the <codeph>auth_hba_file</codeph> parameter of the <codeph>pgbouncer.ini</codeph> file.</p>
        <p>Contents of an example PgBouncer HBA file named <codeph>hba_bouncer.conf</codeph>:<codeblock>local       all     bouncer             trust
host        all     bouncer      127.0.0.1/32       trust</codeblock></p>
        <p>Example excerpt from the related <codeph>pgbouncer.ini</codeph> configuration file:</p><codeblock>[databases]
p0 = port=15432 host=127.0.0.1 dbname=p0 user=bouncer pool_size=2
p1 = port=15432 host=127.0.0.1 dbname=p1 user=bouncer
...

[pgbouncer]
...
auth_type = hba
auth_file = userlist.txt
auth_hba_file = hba_bouncer.conf
...</codeblock>
         <p>Refer to the <xref href="https://pgbouncer.github.io/config.html#hba-file-format" format="html" scope="external">HBA file format
          </xref> discussion in the PgBouncer documentation for information about PgBouncer support of the HBA authentication file format.</p>
      </section>
      </body>
    </topic>
    <topic id="pgb_start">
      <title>Starting PgBouncer</title>
      <body>
        <p>You can run PgBouncer on the Greenplum Database master or on another server. If you
          install PgBouncer on a separate server, you can easily switch clients to the standby
          master by updating the PgBouncer configuration file and reloading the configuration using
          the PgBouncer Administration Console. </p>
        <p>Follow these steps to set up PgBouncer.</p>
        <ol id="ol_xyn_qwg_cs">
          <li>Create a PgBouncer configuration file. For example, add the following text
           to a file named <codeph>pgbouncer.ini</codeph>:<codeblock>[databases]
postgres = host=127.0.0.1 port=5432 dbname=postgres
pgb_mydb = host=127.0.0.1 port=5432 dbname=mydb

[pgbouncer]
pool_mode = session
listen_port = 6543
listen_addr = 127.0.0.1
auth_type = md5
auth_file = users.txt
logfile = pgbouncer.log
pidfile = pgbouncer.pid
admin_users = gpadmin</codeblock><p>The file lists databases and their connection details. The file also configures the PgBouncer instance. Refer to the <xref href="../../../utility_guide/ref/pgbouncer-ini.xml" format="dita"
              scope="peer">pgbouncer.ini</xref> reference page for information about the
              format and content of a PgBouncer configuration file.</p></li>
          <li>Create an authentication file. The filename should be the name you specified for the <codeph>auth_file</codeph> parameter of the <codeph>pgbouncer.ini</codeph> file, <codeph>users.txt</codeph>.
            Each line contains a user name and
            password. The format of the password string matches the <codeph>auth_type</codeph>
            you configured in the PgBouncer configuration file. If the <codeph>auth_type</codeph>
            parameter is <codeph>plain</codeph>, the password string is a clear text password, for
            example: <codeblock>"gpadmin" "gpadmin1234"</codeblock><p>If the <codeph>auth_type</codeph>
              in the following example is <codeph>md5</codeph>, the authentication field must be
              MD5-encoded. The format for an MD5-encoded password
              is:<codeblock>"md5" + MD5_encoded(<varname>&lt;password>&lt;username></varname>)</codeblock></p></li>
          <li>Launch
              <codeph>pgbouncer</codeph>:<codeblock>$ $GPHOME/bin/pgbouncer -d pgbouncer.ini</codeblock><p>The
                <codeph>-d</codeph> option runs PgBouncer as a
              background (daemon) process. Refer to the <xref href="../../../utility_guide/ref/pgbouncer.xml" format="dita"
              scope="peer">pgbouncer</xref> reference page for the
              <codeph>pgbouncer</codeph> command syntax and options.</p></li>
          <li>Update your client applications to connect to <codeph>pgbouncer</codeph> instead of
            directly to Greenplum Database server. For example, to connect to the Greenplum
            database named <codeph>mydb</codeph> configured above, run <codeph>psql</codeph> as follows:<codeblock>$ psql -p 6543 -U <varname>someuser</varname> pgb_mydb</codeblock><p>The <codeph>-p</codeph> option value is the <codeph>listen_port</codeph> that you configured for the PgBouncer instance.</p></li>
        </ol>
      </body>
    </topic>
    <topic id="topic_manage">
      <title>Managing PgBouncer</title>
      <body>
        <p>PgBouncer provides a <codeph>psql</codeph>-like administration console. You
          log in to the PgBouncer Administration Console by specifying the PgBouncer port
           number and a virtual database named <codeph>pgbouncer</codeph>.
          The console accepts SQL-like commands that you can use to monitor, reconfigure, and manage PgBouncer.</p>
        <p>For complete documentation of PgBouncer Administration Console
          commands, refer to the <xref href="../../../utility_guide/ref/pgbouncer-admin.xml" format="dita"
              scope="peer">PgBouncer Administration Console</xref> command reference.</p>
        <p>Follow these steps to get started with the PgBouncer Administration Console.</p>
        <ol id="ol_jwt_hyn_ts">
          <li>Use <codeph>psql</codeph> to log in to the <codeph>pgbouncer</codeph>
            virtual database:<codeblock>$ psql -p 6543 -U <varname>username</varname> pgbouncer</codeblock><p>The
              <varname>username</varname> that you specify must be listed in the <codeph>admin_users</codeph> parameter in the
                <codeph>pgbouncer.ini</codeph> configuration file. You can also log in 
              to the PgBouncer Administration Console with the
              current Unix username if the <codeph>pgbouncer</codeph> process is running under that
              user's UID.</p></li>
          <li>To view the available PgBouncer Administration Console commands, run the <codeph>SHOW help</codeph>
            command:<codeblock>pgbouncer=# SHOW help;
NOTICE:  Console usage
DETAIL:
    SHOW HELP|CONFIG|DATABASES|POOLS|CLIENTS|SERVERS|VERSION
    SHOW FDS|SOCKETS|ACTIVE_SOCKETS|LISTS|MEM
    SHOW DNS_HOSTS|DNS_ZONES
    SHOW STATS|STATS_TOTALS|STATS_AVERAGES
    SET key = arg
    RELOAD
    PAUSE [&lt;db>]
    RESUME [&lt;db>]
    DISABLE &lt;db>
    ENABLE &lt;db>
    KILL &lt;db>
    SUSPEND
    SHUTDOWN</codeblock></li>
          <li>If you update PgBouncer configuration by editing the <codeph>pgbouncer.ini</codeph> configuration file, you use the <codeph>RELOAD</codeph> command to reload the file:<codeblock>pgbouncer=# RELOAD;</codeblock></li>
        </ol>
        <section>
          <title>Mapping PgBouncer Clients to Greenplum Database Server Connections</title>
          <p>To map a PgBouncer client to a Greenplum Database server connection, use the 
            PgBouncer Administration Console <codeph>SHOW CLIENTS</codeph> and
              <codeph>SHOW SERVERS</codeph> commands:</p>
          <ol id="ol_xgn_qfq_bt">
            <li>Use <codeph>ptr</codeph> and <codeph>link</codeph> to map the local client
              connection to the server connection.</li>
            <li>Use the <codeph>addr</codeph> and the <codeph>port</codeph> of the client connection to
              identify the TCP connection from the client.</li>
            <li>Use <codeph>local_addr</codeph> and <codeph>local_port</codeph> to identify the TCP
              connection to the server.</li>
          </ol>
        </section>
      </body>
    </topic>
  </topic>
