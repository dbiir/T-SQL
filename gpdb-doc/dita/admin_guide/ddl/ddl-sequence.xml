<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_eys_3wy_sp">
  <title id="im148803">Creating and Using Sequences</title>
  <body>
    <p>A Greenplum Database sequence object is a special single row table that functions as a
      number generator. You can use a sequence to generate unique integer identifiers for a row
      that you add to a table.  Declaring a column of type <codeph>SERIAL</codeph> implicitly
      creates a sequence counter for use in that table column.
    </p>
    <p>Greenplum Database provides commands to create, alter, and drop a sequence. Greenplum Database
       also provides built-in functions to return the next value in the
       sequence (<codeph>nextval()</codeph>) or to set the sequence to a specific start
       value (<codeph>setval()</codeph>).</p>
    <note>The PostgreSQL <codeph>currval()</codeph> and <codeph>lastval()</codeph> sequence
       functions are not supported in Greenplum Database.</note>
   <p>Attributes of a sequence object include the name of the sequence, its increment value, and the last, minimum, and
     maximum values of the sequence counter. Sequences also have a special boolean attribute
     named <codeph>is_called</codeph> that governs the auto-increment behavior of
     a <codeph>nextval()</codeph> operation on the sequence counter. When a sequence's 
     <codeph>is_called</codeph> attribute is <codeph>true</codeph>, <codeph>nextval()</codeph>
     increments the sequence counter before returning the value. When the
     <codeph>is_called</codeph> attribute value of a sequence is <codeph>false</codeph>,
      <codeph>nextval()</codeph> does not increment the counter before returning the value.</p>
  </body>
  <topic id="topic87" xml:lang="en">
    <title>Creating a Sequence</title>
    <body>
      <p>The <codeph><xref href="../../ref_guide/sql_commands/CREATE_SEQUENCE.xml#topic1"/></codeph>
        command creates and initializes a sequence with the given sequence name
        and optional start value. The sequence name must be distinct
        from the name of any other sequence, table, index, or view in the same schema. For
        example:</p>
      <p>
        <codeblock>CREATE SEQUENCE myserial START 101;
</codeblock>
      </p>
      <p>When you create a new sequence, Greenplum Database sets the sequence
         <codeph>is_called</codeph> attribute to <codeph>false</codeph>.
         Invoking <codeph>nextval()</codeph> on a newly-created sequence does not increment
         the sequence counter, but returns the sequence start value and sets
         <codeph>is_called</codeph> to <codeph>true</codeph>.</p>
    </body>
  </topic>
  <topic id="topic88" xml:lang="en">
    <title>Using a Sequence</title>
    <body>
      <p>After you create a sequence with the <codeph>CREATE SEQUENCE</codeph> command, you can
        examine the sequence and use the sequence built-in functions. </p>
     <section>
       <title>Examining Sequence Attributes</title>
      <p>To examine the current attributes of a sequence, query the sequence directly. For example, to examine a sequence named <codeph>myserial</codeph>:</p>
      <p>
        <codeblock>SELECT * FROM myserial;
</codeblock>
      </p>
     </section>
     <section>
       <title>Returning the Next Sequence Counter Value</title>
      <p>You can invoke the <codeph>nextval()</codeph> built-in function to return and use
        the next value in a sequence. The following command inserts the next value of the sequence
         named <codeph>myserial</codeph>
         into the first column of a table named <codeph>vendors</codeph>: </p>
      <p>
        <codeblock>INSERT INTO vendors VALUES (nextval('myserial'), 'acme');
</codeblock>
      </p>
      <p> <codeph>nextval()</codeph> uses the sequence's
        <codeph>is_called</codeph> attribute value to determine whether or not to increment
        the sequence counter before returning the value. <codeph>nextval()</codeph> advances
        the counter when <codeph>is_called</codeph> is <codeph>true</codeph>.
        <codeph>nextval()</codeph> sets the sequence <codeph>is_called</codeph> attribute to
        <codeph>true</codeph> before returning.</p>
      <p>A <codeph>nextval()</codeph> operation is never rolled back. A fetched value is considered
        used, even if the transaction that performed the <codeph>nextval()</codeph> fails. This means
        that failed transactions can leave unused holes in the sequence of assigned values.</p>
      <note>You cannot use the <codeph>nextval()</codeph> function in <codeph>UPDATE</codeph>
        or <codeph>DELETE</codeph> statements if mirroring is enabled in
        Greenplum Database.</note>
     </section>
     <section>
       <title>Setting the Sequence Counter Value</title>
      <p>You can use the Greenplum Database <codeph>setval()</codeph> built-in function to 
        set the counter value for a sequence. For example, the following command sets the counter value of the sequence named <codeph>myserial</codeph> to <codeph>201</codeph>:</p>
      <p>
        <codeblock>SELECT setval('myserial', 201);
</codeblock>
      </p>
      <p><codeph>setval()</codeph> has two function signatures: <codeph>setval(sequence,
            start_val)</codeph> and <codeph>setval(sequence, start_val, is_called)</codeph>. The
          default behaviour of <codeph>setval(sequence, start_val)</codeph> sets the sequence
            <codeph>is_called</codeph> attribute value to <codeph>true</codeph>. </p>
      <p>If you do not want the sequence counter advanced on the next <codeph>nextval()</codeph>
          call, use the <codeph>setval(sequence, start_val, is_called)</codeph> function signature,
          passing a <codeph>false</codeph> argument:</p>
      <p>
        <codeblock>SELECT setval('myserial', 201, false);
</codeblock>
      </p>
      <p><codeph>setval()</codeph> operations are never rolled back.</p>
     </section>
    </body>
  </topic>
  <topic id="topic89" xml:lang="en">
    <title>Altering a Sequence</title>
    <body>
      <p>The <codeph><xref href="../../ref_guide/sql_commands/ALTER_SEQUENCE.xml#topic1"/></codeph>
        command changes the attributes of an existing sequence. You can alter the sequence start,
        minimum, maximum, and increment values. You can also restart the sequence at the start value
        or at a specified value.</p>
      <p>Any parameters not set in the <codeph>ALTER SEQUENCE</codeph> command retain their prior
        settings.</p>
      <p><codeph>ALTER SEQUENCE <varname>sequence</varname> START WITH
            <varname>start_value</varname></codeph> sets the sequence's <codeph>start_value</codeph>
        attribute to the new starting value. It has no effect on the <codeph>last_value</codeph>
        attribute or the value returned by the <codeph>nextval(sequence)</codeph> function.</p>
      <p><codeph>ALTER SEQUENCE <varname>sequence</varname> RESTART</codeph> resets the sequence's
          <codeph>last_value</codeph> attribute to the current value of the
          <codeph>start_value</codeph> attribute and the <codeph>is_called</codeph> attribute to
          <codeph>false</codeph>. The next call to the <codeph>nextval(sequence)</codeph>  function
        returns <varname>start_value</varname>.</p>
      <p><codeph>ALTER SEQUENCE <varname>sequence</varname> RESTART WITH
            <varname>restart_value</varname></codeph> sets the sequence's
          <varname>last_value</varname> attribute to the new value and the
          <codeph>is_called</codeph> attribute to <codeph>false</codeph>. The next call to the
          <codeph>nextval(sequence)</codeph>  returns <varname>restart_value</varname>. This is the
        equivalent of calling <codeph>setval(sequence, restart_value, false)</codeph>.</p>
      <p>The following command restarts the sequence named <codeph>myserial</codeph> at value
          <codeph>105</codeph>:</p>
      <p>
        <codeblock>ALTER SEQUENCE myserial RESTART WITH 105;
</codeblock>
      </p>
    </body>
  </topic>
  <topic id="topic90" xml:lang="en">
    <title>Dropping a Sequence</title>
    <body>
      <p>The <codeph><xref href="../../ref_guide/sql_commands/DROP_SEQUENCE.xml#topic1"/></codeph>
        command removes a sequence. For example, the following command removes the sequence named <codeph>myserial</codeph>:</p>
      <p>
        <codeblock>DROP SEQUENCE myserial;
</codeblock>
      </p>
    </body>
  </topic>
  <topic id="topic91" xml:lang="en">
    <title>Specifying a Sequence as the Default Value for a Column</title>
    <body>
      <p>You can reference a sequence directly in the
        <codeph><xref href="../../ref_guide/sql_commands/CREATE_TABLE.xml#topic1"/></codeph>
        command in addition to using the <codeph>SERIAL</codeph> or <codeph>BIGSERIAL</codeph> types. For example:</p>
      <p>
        <codeblock>CREATE TABLE tablename ( id INT4 DEFAULT nextval('myserial'), name text );
</codeblock>
      </p>
      <p>You can also alter a table column to set its default value to a sequence counter:</p>
        <codeblock>ALTER TABLE tablename ALTER COLUMN id SET DEFAULT nextval('myserial');
</codeblock>
    </body>
  </topic>
  <topic id="topic92" xml:lang="en">
    <title>Sequence Wraparound</title>
    <body>
      <p>By default, a sequence does not wrap around. That is, when a sequence reaches the max value
          (<codeph>+32767</codeph> for <codeph>SMALLSERIAL</codeph>, <codeph>+2147483647</codeph>
          for <codeph>SERIAL</codeph>, <codeph>+9223372036854775807</codeph> for
          <codeph>BIGSERIAL</codeph>), every subsequent <codeph>nextval()</codeph> call produces an error.
          You can alter a sequence to make it cycle around and start at <codeph>1</codeph> again:</p>
      <p>
        <codeblock>ALTER SEQUENCE myserial CYCLE;</codeblock>
      </p>
      <p>You can also specify the wraparound behaviour when you create the sequence:</p>
      <p>
        <codeblock>CREATE SEQUENCE myserial CYCLE;</codeblock>
      </p>
    </body>
  </topic>
</topic>
