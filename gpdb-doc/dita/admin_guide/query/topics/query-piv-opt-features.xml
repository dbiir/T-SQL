<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">


<topic id="topic1">
  <title>GPORCA Features and Enhancements</title>
  <abstract>
    <shortdesc>GPORCA, the Greenplum next generation query optimizer, includes enhancements for specific types of queries and
      operations:</shortdesc>
    <ul id="ul_ywz_j5d_gr">
      <li>
        <xref href="#topic_dwy_zml_gr" format="dita"/>
      </li>
      <li>
        <xref href="#topic_vph_wml_gr" format="dita"/>
      </li>
      <li>
        <xref href="#topic_c3v_rml_gr" format="dita"/>
      </li>
      <li>
        <xref href="#topic_plx_mml_gr" format="dita"/>
      </li>
    </ul>
  </abstract>
  <body>
    <p>GPORCA also includes these optimization enhancements:<ul id="ul_vtk_2wd_gr">
        <li>Improved join ordering</li>
        <li>Join-Aggregate reordering</li>
        <li>Sort order optimization</li>
        <li>Data skew estimates included in query optimization</li>
      </ul></p>
  </body>
  <topic id="topic_dwy_zml_gr">
    <title>Queries Against Partitioned Tables</title>
    <body>
      <p>GPORCA includes these enhancements for queries against partitioned
          tables:<ul id="ul_upq_hkr_gr">
          <li>Partition elimination is improved.</li>
          <li>Uniform multi-level partitioned tables are supported. For information about uniform
            multi-level partitioned tables, see <xref href="query-piv-uniform-part-tbl.xml#topic1"
            /></li>
          <li>Query plan can contain the <cmdname>Partition selector</cmdname> operator.</li>
          <li>Partitions are not enumerated in <cmdname>EXPLAIN</cmdname> plans. <p>For queries that
              involve static partition selection where the partitioning key is compared to a
              constant, GPORCA lists the number of partitions to be scanned in
              the <codeph>EXPLAIN</codeph> output under the Partition Selector operator. This
              example Partition Selector operator shows the filter and number of partitions
              selected:
              <codeblock>Partition Selector for Part_Table (dynamic scan id: 1) 
       <b>Filter: a > 10
       Partitions selected:  1 (out of 3)</b></codeblock></p><p>For
              queries that involve dynamic partition selection where the partitioning key is
              compared to a variable, the number of partitions that are scanned will be known only
              during query execution. The partitions selected are not shown in the
                <codeph>EXPLAIN</codeph> output.</p></li>
          <li>Plan size is independent of number of partitions.</li>
          <li>Out of memory errors caused by number of partitions are reduced.</li>
        </ul></p>
      <p>This example <cmdname>CREATE TABLE</cmdname> command creates a range partitioned table.</p>
      <codeblock>CREATE TABLE sales(order_id int, item_id int, amount numeric(15,2), 
      date date, yr_qtr int)
   <b>range partitioned by yr_qtr</b>;</codeblock>
      <p>GPORCA improves on these types of queries against partitioned tables:</p>
      <ul id="ul_jdl_zwd_gr">
        <li>Full table scan. Partitions are not enumerated in
          plans.<codeblock>SELECT * FROM sales;</codeblock></li>
        <li>Query with a constant filter predicate. Partition elimination is
          performed.<codeblock>SELECT * FROM sales WHERE yr_qtr = 201501;</codeblock></li>
        <li>Range selection. Partition elimination is
          performed.<codeblock>SELECT * FROM sales WHERE yr_qtr BETWEEN 201601 AND 201704 ;</codeblock></li>
        <li>Joins involving partitioned tables. In this example, the partitioned dimension table
            <i>date_dim</i> is joined with fact table
          <i>catalog_sales</i>:<codeblock>SELECT * FROM catalog_sales
   WHERE date_id IN (SELECT id FROM date_dim WHERE month=12);</codeblock></li>
      </ul>
    </body>
  </topic>
  <topic id="topic_vph_wml_gr">
    <title>Queries that Contain Subqueries</title>
    <body>
      <p>GPORCA handles subqueries more efficiently. A subquery is query that is
        nested inside an outer query block. In the following query, the <cmdname>SELECT</cmdname> in
        the <cmdname>WHERE</cmdname> clause is a
        subquery.<codeblock>SELECT * FROM part
  WHERE price > (<b>SELECT avg(price) FROM part</b>);</codeblock></p>
      <p>GPORCA also handles queries that contain a correlated subquery (CSQ) more
        efficiently. A correlated subquery is a subquery that uses values from the outer query. In
        the following query, the <codeph>price</codeph> column is used in both the outer query and
        the subquery.
        <codeblock>SELECT * FROM part p1
  WHERE <b>price</b> > (<b>SELECT avg(</b>price<b>) FROM part p2 
  WHERE  p2.brand = p1.brand</b>);</codeblock></p>
      <p>GPORCA generates more efficient plans for the following types of
        subqueries: <ul id="ul_mk2_fyd_gr">
          <li>CSQ in the <cmdname>SELECT</cmdname>
            list.<codeblock>SELECT *,
 (<b>SELECT min(price) FROM part p2 WHERE p1.brand = p2.brand</b>)
 AS foo
FROM part p1;</codeblock></li>
          <li>CSQ in disjunctive (<cmdname>OR</cmdname>) filters.
            <codeblock>SELECT FROM part p1 WHERE p_size > 40 <b>OR</b> 
      p_retailprice > 
      (<b>SELECT avg(p_retailprice) 
          FROM part p2 
          WHERE p2.p_brand = p1.p_brand</b>)</codeblock></li>
          <li>Nested CSQ with skip level
              correlations<codeblock>SELECT * FROM part p1 WHERE p1.p_partkey 
IN (<b>SELECT p_partkey FROM part p2 WHERE p2.p_retailprice = </b>
     (<b>SELECT min(p_retailprice)
       FROM part p3 
       WHERE p3.p_brand = p1.p_brand)</b>
);</codeblock><note>Nested
              CSQ with skip level correlations are not supported by the Postgres Planner.</note></li>
          <li>CSQ with aggregate and inequality. This example contains a CSQ with an
            inequality.<codeblock>SELECT * FROM part p1 WHERE p1.p_retailprice =
 (SELECT min(p_retailprice) FROM part p2 WHERE p2.p_brand &lt;> p1.p_brand);</codeblock></li>
        </ul><ul id="ul_qpq_1vs_gr">
          <li>CSQ that must return one
            row.<codeblock>SELECT p_partkey, 
  (<b>SELECT p_retailprice FROM part p2 WHERE p2.p_brand = p1.p_brand</b> )
FROM part p1;</codeblock></li>
        </ul></p>
    </body>
  </topic>
  <topic id="topic_c3v_rml_gr">
    <title>Queries that Contain Common Table Expressions</title>
    <body>
      <p>GPORCA handles queries that contain the <cmdname>WITH</cmdname> clause.
        The <cmdname>WITH</cmdname> clause, also known as a common table expression (CTE), generates
        temporary tables that exist only for the query. This example query contains a
        CTE.<codeblock><b>WITH v AS (SELECT a, sum(b) as s FROM T where c &lt; 10 GROUP BY a)</b>
  SELECT *FROM  v AS v1 ,  v AS v2
  WHERE v1.a &lt;> v2.a AND v1.s &lt; v2.s;</codeblock></p>
      <p>As part of query optimization, GPORCA can push down predicates into a
        CTE. For example query, GPORCA pushes the equality predicates to the
        CTE.<codeblock>WITH v AS (SELECT a, sum(b) as s FROM T GROUP BY a)
  SELECT *
  FROM v as v1, v as v2, v as v3
  WHERE v1.a &lt; v2.a
    AND v1.s &lt; v3.s
    AND <b>v1.a = 10</b>
    AND <b>v2.a = 20</b>
    AND <b>v3.a = 30</b>;</codeblock></p>
      <p>GPORCA can handle these types of CTEs:<ul id="ul_ohm_d3r_gr">
          <li>CTE that defines one or multiple tables. In this query, the CTE defines two
            tables.<codeblock><b>WITH cte1 AS (SELECT a, sum(b) as s FROM T 
               where c &lt; 10 GROUP BY a),
      cte2 AS (SELECT a, s FROM cte1 where s > 1000)</b>
  SELECT *
  FROM cte1 as v1, cte2 as v2, cte2 as v3
  WHERE v1.a &lt; v2.a AND v1.s &lt; v3.s;</codeblock></li>
          <li>Nested CTEs.
            <codeblock><b>WITH</b> v AS (<b>WITH</b> w AS (SELECT a, b FROM foo 
                      WHERE b &lt; 5) 
           SELECT w1.a, w2.b 
           FROM w AS w1, w AS w2 
           WHERE w1.a = w2.a AND w1.a > 2)
  SELECT v1.a, v2.a, v2.b
  FROM v as v1, v as v2
  WHERE v1.a &lt; v2.a; </codeblock></li>
        </ul></p>
    </body>
  </topic>
  <topic id="topic_plx_mml_gr">
    <title>DML Operation Enhancements with GPORCA</title>
    <body>
      <p>GPORCA contains enhancements for DML operations such as
          <cmdname>INSERT</cmdname><ph>, <cmdname>UPDATE</cmdname>, and
            <cmdname>DELETE</cmdname></ph>.<ul id="ul_rnx_nml_gr">
          <li>A DML node in a query plan is a query plan operator.<ul id="ul_f4x_nml_gr">
              <li>Can appear anywhere in the plan, as a regular node (top slice only for now)</li>
              <li>Can have consumers</li>
            </ul></li>
          <li><cmdname>UPDATE</cmdname> operations use the query plan operator
              <cmdname>Split</cmdname> and supports these operations: <ul id="ul_slx_nvl_gr">
              <li><cmdname>UPDATE</cmdname> operations on the table distribution key columns. </li>
              <li><cmdname>UPDATE</cmdname> operations on the table on the partition key
                column.</li>
            </ul><p>This example plan shows the <cmdname>Split</cmdname>
              operator.<codeblock>QUERY PLAN
--------------------------------------------------------------
Update  (cost=0.00..5.46 rows=1 width=1)
   ->  Redistribute Motion 2:2  (slice1; segments: 2)
         Hash Key: a
         ->  Result  (cost=0.00..3.23 rows=1 width=48)
               ->  <b>Split  (cost=0.00..2.13 rows=1 width=40)</b>
                     ->  Result  (cost=0.00..1.05 rows=1 width=40)
                           ->  Seq Scan on dmltest</codeblock></p></li>
          <li>New query plan operator <cmdname>Assert</cmdname> is used for constraints
              checking.<p>This example plan shows the <cmdname>Assert</cmdname>
              operator.<codeblock>QUERY PLAN
------------------------------------------------------------
 Insert  (cost=0.00..4.61 rows=3 width=8)
   ->  <b>Assert  (cost=0.00..3.37 rows=3 width=24)</b>
         <b>Assert Cond: (dmlsource.a > 2) IS DISTINCT FROM</b> 
false
         ->  <b>Assert  (cost=0.00..2.25 rows=3 width=24)</b>
               <b>Assert Cond: NOT dmlsource.b IS NULL</b>
               ->  Result  (cost=0.00..1.14 rows=3 width=24)
                     ->  Seq Scan on dmlsource</codeblock></p></li>
        </ul></p>
    </body>
  </topic>
</topic>
