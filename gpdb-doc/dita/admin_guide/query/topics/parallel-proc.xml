<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1" xml:lang="en">
  <title id="iy147500">About Greenplum Query Processing</title>
  <shortdesc>This topic provides an overview of how Greenplum Database processes
    queries. Understanding this process can be useful when writing and tuning queries.</shortdesc>
  <body>
    <p>Users issue queries to Greenplum Database as they would to any database
      management system. They connect to the database instance on the Greenplum master host using a client application such as
        <codeph>psql</codeph> and submit SQL statements.</p>
  </body>
  <topic id="topic2" xml:lang="en">
    <title>Understanding Query Planning and Dispatch</title>
    <body>
      <p id="iy139991">The master receives, parses, and optimizes the query. The resulting query
        plan is either parallel or targeted. The master dispatches parallel query plans to all
        segments, as shown in <xref href="#topic2/iy139990" type="fig" format="dita"/>. The master
        dispatches targeted query plans to a single segment, as shown in <xref
          href="#topic2/iy145883" type="fig" format="dita"/>. Each segment is responsible for
        executing local database operations on its own set of data.</p>
      <p>Most database operations—such as table scans, joins, aggregations, and sorts—execute across
        all segments in parallel. Each operation is performed on a segment database independent of
        the data stored in the other segment databases.</p>
      <fig id="iy139990">
        <title>Dispatching the Parallel Query Plan</title>
        <image href="../../graphics/parallel_plan.jpg" placement="break" width="450px"
          height="297px"/>
      </fig>
      <p>Certain queries may access only data on a single segment, such as single-row
          <codeph>INSERT</codeph><ph>, <codeph>UPDATE</codeph>,
            <codeph>DELETE</codeph>,</ph> or <codeph>SELECT</codeph> operations or queries that
        filter on the table distribution key column(s). In queries such as these, the query plan is
        not dispatched to all segments, but is targeted at the segment that contains the affected or
        relevant row(s).</p>
      <fig id="iy145883">
        <title>Dispatching a Targeted Query Plan</title>
        <image href="../../graphics/targeted_dispatch.jpg" placement="break" width="454px"
          height="281px"/>
      </fig>
    </body>
  </topic>
  <topic id="topic3" xml:lang="en">
    <title id="iy139957">Understanding Greenplum Query Plans</title>
    <body>
      <p>A query plan is the set of operations Greenplum Database will perform to
        produce the answer to a query. Each <i>node</i> or step in the plan represents a database
        operation such as a table scan, join, aggregation, or sort. Plans are read and executed from
        bottom to top.</p>
      <p id="iy146386">In addition to common database operations such as table scans, joins, and so
        on, Greenplum Database has an additional operation type called <i>motion</i>.
        A motion operation involves moving tuples between the segments during query processing. Note
        that not every query requires a motion. For example, a targeted query plan does not require
        data to move across the interconnect. </p>
      <p>To achieve maximum parallelism during query execution, Greenplum divides the work of the query plan into <i>slices</i>. A slice is a portion of the plan
        that segments can work on independently. A query plan is sliced wherever a <i>motion</i>
        operation occurs in the plan, with one slice on each side of the motion.</p>
      <p>For example, consider the following simple query involving a join between two tables:</p>
      <p>
        <codeblock>SELECT customer, amount
FROM sales JOIN customer USING (cust_id)
WHERE dateCol = '04-30-2016';
</codeblock>
      </p>
      <p><xref href="#topic3/iy140224" type="fig" format="dita"/> shows the query plan. Each segment
        receives a copy of the query plan and works on it in parallel. </p>
      <p>The query plan for this example has a <i>redistribute motion</i> that moves tuples between
        the segments to complete the join. The redistribute motion is necessary because the customer
        table is distributed across the segments by <codeph>cust_id</codeph>, but the sales table is
        distributed across the segments by <codeph>sale_id</codeph>. To perform the join, the
          <codeph>sales</codeph> tuples must be redistributed by <codeph>cust_id</codeph>. The plan
        is sliced on either side of the redistribute motion, creating <i>slice 1</i> and <i>slice
          2</i>. </p>
      <p>This query plan has another type of motion operation called a <i>gather motion</i>. A
        gather motion is when the segments send results back up to the master for presentation to
        the client. Because a query plan is always sliced wherever a motion occurs, this plan also
        has an implicit slice at the very top of the plan (<i>slice 3</i>). Not all query plans
        involve a gather motion. For example, a <codeph>CREATE TABLE x AS SELECT...</codeph>
        statement would not have a gather motion because tuples are sent to the newly created table,
        not to the master. </p>
      <fig id="iy140224">
        <title>Query Slice Plan</title>
        <image href="../../graphics/slice_plan.jpg" placement="break" width="462px"
          height="382px"/>
      </fig>
    </body>
  </topic>
  <topic id="topic4" xml:lang="en">
    <title id="iy140034">Understanding Parallel Query Execution</title>
    <body>
      <p id="iy141128">Greenplum creates a number of database processes
        to handle the work of a query. On the master, the query worker process is called the
          <i>query dispatcher</i> (QD). The QD is responsible for creating and dispatching the query
        plan. It also accumulates and presents the final results. On the segments, a query worker
        process is called a <i>query executor</i> (QE). A QE is responsible for completing its
        portion of work and communicating its intermediate results to the other worker
        processes.</p>
      <p>There is at least one worker process assigned to each <i>slice</i> of the query plan. A
        worker process works on its assigned portion of the query plan independently. During query
        execution, each segment will have a number of processes working on the query in parallel. </p>
      <p>Related processes that are working on the same slice of the query plan but on different
        segments are called <i>gangs</i>. As a portion of work is completed, tuples flow up the
        query plan from one gang of processes to the next. This inter-process communication between
        the segments is referred to as the <i>interconnect</i> component of Greenplum Database.</p>
      <p><xref href="#topic4/iy141495" type="fig" format="dita"/> shows the query worker processes
        on the master and two segment instances for the query plan illustrated in <xref
          href="#topic3/iy140224" type="fig" format="dita"/>.</p>
      <fig id="iy141495">
        <title>Query Worker Processes</title>
        <image href="../../graphics/gangs.jpg" placement="break" width="318px" height="288px"/>
      </fig>
    </body>
  </topic>
</topic>
