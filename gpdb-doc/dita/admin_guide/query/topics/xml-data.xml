<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1" xml:lang="en">
  <title id="ih135496">Working with XML Data</title>
  <shortdesc>Greenplum Database supports the <codeph>xml</codeph> data type that stores XML data. </shortdesc>
  <body>
    <p>The <codeph>xml</codeph> data type checks the input values for well-formedness, providing an
      advantage over simply storing XML data in a text field. Additionally, support functions allow
      you to perform type-safe operations on this data; refer to <xref href="#topic_gn4_x3w_mq"
        format="dita"/>, below. </p>
    <p otherprops="oss-only">Use of this data type requires the installation to have been built with
        <codeph>configure --with-libxml</codeph>. </p>
    <p>The <codeph>xml</codeph> type can store well-formed "documents", as defined by the XML
      standard, as well as "content" fragments, which are defined by reference to the more
      permissive <xref href="https://www.w3.org/TR/2010/REC-xpath-datamodel-20101214/#DocumentNode"
        format="html" scope="external">document node</xref> of the XQuery and XPath model.
      Roughly, this means that content
      fragments can have more than one top-level element or character node. The expression
          <codeph><varname>xmlvalue</varname> IS DOCUMENT</codeph> can be used to evaluate whether a
      particular <codeph>xml</codeph> value is a full document or only a content fragment.</p>
    <p>This section contains the following topics:<ul id="ul_sjd_hsr_fz">
        <li><xref href="#topic_upc_tcs_fz" format="dita"/></li>
      <li><xref href="#topic_eyt_3tw_mq" format="dita"/></li>
      <li><xref href="#topic_kxv_4gq_vz" format="dita"/></li>
      <li><xref href="#topic_a4k_w33_xz" format="dita"/></li>
      <li><xref href="#topic_ucn_mkp_xz" format="dita"/></li>
      <li><xref href="#topic_gn4_x3w_mq" format="dita"> Using XML Functions and
          Expressions</xref></li>
      </ul></p>
  </body>
  <topic id="topic_upc_tcs_fz">
    <title>Creating XML Values</title>
    <body>
      <p>To produce a value of type <codeph>xml</codeph> from character data, use the function
          <codeph>xmlparse</codeph>:<codeblock>xmlparse ( { DOCUMENT | CONTENT } value)</codeblock>For
        example:<codeblock>XMLPARSE (DOCUMENT '&lt;?xml version="1.0"?>&lt;book>&lt;title>Manual&lt;/title>&lt;chapter>...&lt;/chapter>&lt;/book>')
XMLPARSE (CONTENT 'abc&lt;foo>bar&lt;/foo>&lt;bar>foo&lt;/bar>')</codeblock></p>
      <p>The above method  converts character strings into XML values according to the SQL standard,
        but you can also use Greenplum Database syntax like the
        following:<codeblock>xml '&lt;foo>bar&lt;/foo>'
'&lt;foo>bar&lt;/foo>'::xml</codeblock></p>
      <p>The <codeph>xml</codeph> type does not validate input values against a document type
        declaration (DTD), even when the input value specifies a DTD. There is also currently no
        built-in support for validating against other XML schema languages such as XML schema.</p>
      <p>The inverse operation, producing a character string value from <codeph>xml</codeph>, uses
        the function
        <codeph>xmlserialize</codeph>:<codeblock>xmlserialize ( { DOCUMENT | CONTENT } <varname>value</varname> AS <varname>type</varname> )</codeblock></p>
      <p><varname>type</varname> can be <codeph>character</codeph>, <codeph>character
          varying</codeph>, or <codeph>text</codeph> (or an alias for one of those). Again,
        according to the SQL standard, this is the only way to convert between type
          <codeph>xml</codeph> and character types, but Greenplum Database also allows you to simply
        cast the value.</p>
      <p>When a character string value is cast to or from type <codeph>xml</codeph> without going
        through <codeph>XMLPARSE</codeph> or <codeph>XMLSERIALIZE</codeph>, respectively, the choice
        of <codeph>DOCUMENT</codeph> versus <codeph>CONTENT</codeph> is determined by the
          <codeph>XML OPTION</codeph> session configuration parameter, which can be set using the
        standard command:<codeblock>SET XML OPTION { DOCUMENT | CONTENT };
</codeblock></p>
      <p>or simply like Greenplum
        Database:<codeblock>SET XML OPTION TO { DOCUMENT | CONTENT };</codeblock></p>
      <p>The default is CONTENT, so all forms of XML data are allowed.</p>
    </body>
  </topic>
  <topic id="topic_eyt_3tw_mq">
    <title>Encoding Handling</title>
    <body>
      <p>Be careful when dealing with multiple character encodings on the client, server, and in the
        XML data passed through them. When using the text mode to pass queries to the server and
        query results to the client (which is the normal mode), Greenplum Database converts all
        character data passed between the client and the server, and vice versa, to the character
        encoding of the respective endpoint; see <xref
          href="../../../ref_guide/character_sets.xml#topic1/ig167937">Character Set Support</xref>.
        This includes string representations of XML values, such as in the above examples.
        Ordinarily, this means that encoding declarations contained in XML data can become invalid,
        as the character data is converted to other encodings while travelling between client and
        server, because the embedded encoding declaration is not changed. To cope with this
        behavior, encoding declarations contained in character strings presented for input to the
          <codeph>xml</codeph> type are ignored, and content is assumed to be in the current server
        encoding. Consequently, for correct processing, character strings of XML data must be sent
        from the client in the current client encoding. It is the responsibility of the client to
        either convert documents to the current client encoding before sending them to the server,
        or to adjust the client encoding appropriately. On output, values of type
          <codeph>xml</codeph> will not have an encoding declaration, and clients should assume all
        data is in the current client encoding.</p>
      <p>When using binary mode to pass query parameters to the server and query results back to the
        client, no character set conversion is performed, so the situation is different. In this
        case, an encoding declaration in the XML data will be observed, and if it is absent, the
        data will be assumed to be in UTF-8 (as required by the XML standard; note that Greenplum
        Database does not support UTF-16). On output, data will have an encoding declaration
        specifying the client encoding, unless the client encoding is UTF-8, in which case it will
        be omitted.</p>
      <note>
        <p>Processing XML data with Greenplum Database will be less error-prone and more efficient
          if the XML data encoding, client encoding, and server encoding are the same. Because XML
          data is internally processed in UTF-8, computations will be most efficient if the server
          encoding is also UTF-8.</p>
      </note>
    </body>
  </topic>
  <topic id="topic_kxv_4gq_vz">
    <title>Accessing XML Values</title>
    <body>
      <p>The <codeph>xml</codeph> data type is unusual in that it does not provide any comparison
        operators. This is because there is no well-defined and universally useful comparison
        algorithm for XML data. One consequence of this is that you cannot retrieve rows by
        comparing an <codeph>xml</codeph> column against a search value. XML values should therefore
        typically be accompanied by a separate key field such as an ID. An alternative solution for
        comparing XML values is to convert them to character strings first, but note that character
        string comparison has little to do with a useful XML comparison method.</p>
      <p>Because there are no comparison operators for the <codeph>xml</codeph> data type, it is not
        possible to create an index directly on a column of this type. If speedy searches in XML
        data are desired, possible workarounds include casting the expression to a character string
        type and indexing that, or indexing an XPath expression. Of course, the actual query would
        have to be adjusted to search by the indexed expression.</p>
    </body>
  </topic>
  <topic id="topic_a4k_w33_xz">
    <title>Processing XML</title>
    <body>
      <p>To process values of data type <codeph>xml</codeph>, Greenplum Database offers the
        functions <codeph>xpath</codeph> and <codeph>xpath_exists</codeph>, which evaluate XPath 1.0
        expressions.<codeblock>xpath(<varname>xpath</varname>, <varname>xml</varname> [, <varname>nsarray</varname>])
</codeblock></p>
      <p>The function <codeph>xpath</codeph> evaluates the XPath expression
            <codeph><varname>xpath</varname></codeph> (a text value) against the XML value
            <codeph><varname>xml</varname></codeph>. It returns an array of XML values corresponding
        to the node set produced by the XPath expression.</p>
      <p>The second argument must be a well formed XML document. In particular, it must have a
        single root node element.</p>
      <p>The optional third argument of the function is an array of namespace mappings. This array
        should be a two-dimensional text array with the length of the second axis being equal to 2
        (i.e., it should be an array of arrays, each of which consists of exactly 2 elements). The
        first element of each array entry is the namespace name (alias), the second the namespace
        URI. It is not required that aliases provided in this array be the same as those being used
        in the XML document itself (in other words, both in the XML document and in the
          <codeph>xpath</codeph> function context, aliases are local).</p>
      <p>Example:<codeblock>SELECT xpath('/my:a/<varname>text</varname>()', '&lt;my:a xmlns:my="http://example.com">test&lt;/my:a>',
             ARRAY[ARRAY['my', 'http://example.com']]);

 xpath  
--------
 {test}
(1 row)
</codeblock></p>
      <p>To deal with default (anonymous) namespaces, do something like
        this:<codeblock>SELECT xpath('//mydefns:b/<varname>text</varname>()', '&lt;a xmlns="http://example.com">&lt;b>test&lt;/b>&lt;/a>',
             ARRAY[ARRAY['mydefns', 'http://example.com']]);

 xpath
--------
 {test}
(1 row)
</codeblock><codeblock>xpath_exists(<varname>xpath</varname>, <varname>xml</varname> [, <varname>nsarray</varname>])
</codeblock></p>
      <p>The function <codeph>xpath_exists</codeph> is a specialized form of the
          <codeph>xpath</codeph> function. Instead of returning the individual XML values that
        satisfy the XPath, this function returns a Boolean indicating whether the query was
        satisfied or not. This function is equivalent to the standard <codeph>XMLEXISTS</codeph>
        predicate, except that it also offers support for a namespace mapping argument.</p>
      <p>Example:<codeblock>SELECT xpath_exists('/my:a/<varname>text</varname>()', '&lt;my:a xmlns:my="http://example.com">test&lt;/my:a>',
                     ARRAY[ARRAY['my', 'http://example.com']]);

 xpath_exists  
--------------
 t
(1 row)</codeblock></p>
    </body>
  </topic>
  <topic id="topic_ucn_mkp_xz">
    <title>Mapping Tables to XML</title>
    <body>
      <p>The following functions map the contents of relational tables to XML values. They can be
        thought of as XML export
        functionality:<codeblock>table_to_xml(tbl regclass, nulls boolean, tableforest boolean, targetns text)
query_to_xml(query <varname>text</varname>, nulls boolean, tableforest boolean, targetns text)
cursor_to_xml(cursor refcursor, count int, nulls boolean,
              tableforest boolean, targetns text)
</codeblock></p>
      <p>The return type of each function is <codeph>xml</codeph>.</p>
      <p><codeph>table_to_xml</codeph> maps the content of the named table, passed as parameter
          <codeph>tbl</codeph>. The <codeph>regclass</codeph> type accepts strings identifying
        tables using the usual notation, including optional schema qualifications and double quotes.
          <codeph>query_to_xml</codeph> executes the query whose text is passed as parameter query
        and maps the result set. <codeph>cursor_to_xml</codeph> fetches the indicated number of rows
        from the cursor specified by the parameter cursor. This variant is recommended if large
        tables have to be mapped, because the result value is built up in memory by each
        function.</p>
      <p>If <codeph>tableforest</codeph> is false, then the resulting XML document looks like
        this:<codeblock>&lt;tablename>
  &lt;row>
    &lt;columnname1>data&lt;/columnname1>
    &lt;columnname2>data&lt;/columnname2>
  &lt;/row>

  &lt;row>
    ...
  &lt;/row>

  ...
&lt;/tablename>
</codeblock></p>
      <p>If <codeph>tableforest</codeph> is true, the result is an XML content fragment that looks
        like
        this:<codeblock>&lt;tablename>
  &lt;columnname1>data&lt;/columnname1>
  &lt;columnname2>data&lt;/columnname2>
&lt;/tablename>

&lt;tablename>
  ...
&lt;/tablename>

...
</codeblock></p>
      <p>If no table name is available, that is, when mapping a query or a cursor, the string
          <codeph>table</codeph> is used in the first format, <codeph>row</codeph> in the second
        format.</p>
      <p>The choice between these formats is up to the user. The first format is a proper XML
        document, which will be important in many applications. The second format tends to be more
        useful in the <codeph>cursor_to_xml</codeph> function if the result values are to be later
        reassembled into one document. The functions for producing XML content discussed above, in
        particular <codeph>xmlelement</codeph>, can be used to alter the results as desired.</p>
      <p>The data values are mapped in the same way as described for the function
          <codeph>xmlelement</codeph>, above.</p>
      <p>The parameter nulls determines whether null values should be included in the output. If
        true, null values in columns are represented
        as:<codeblock>&lt;columnname xsi:nil="true"/></codeblock></p>
      <p>where <codeph>xsi</codeph> is the XML namespace prefix for XML schema Instance. An
        appropriate namespace declaration will be added to the result value. If false, columns
        containing null values are simply omitted from the output.</p>
      <p>The parameter <codeph>targetns</codeph> specifies the desired XML namespace of the result.
        If no particular namespace is wanted, an empty string should be passed.</p>
      <p>The following functions return XML schema documents describing the mappings performed by
        the corresponding functions
        above:<codeblock>able_to_xmlschema(tbl regclass, nulls boolean, tableforest boolean, targetns text)
query_to_xmlschema(query <varname>text</varname>, nulls boolean, tableforest boolean, targetns text)
cursor_to_xmlschema(cursor refcursor, nulls boolean, tableforest boolean, targetns text)
</codeblock></p>
      <p>It is essential that the same parameters are passed in order to obtain matching XML data
        mappings and XML schema documents.</p>
      <p>The following functions produce XML data mappings and the corresponding XML schema in one
        document (or <codeph>forest</codeph>), linked together. They can be useful where
        self-contained and self-describing results are
        desired:<codeblock>table_to_xml_and_xmlschema(tbl regclass, nulls boolean, tableforest boolean, targetns text)
query_to_xml_and_xmlschema(query <varname>text</varname>, nulls boolean, tableforest boolean, targetns text)
</codeblock></p>
      <p>In addition, the following functions are available to produce analogous mappings of entire
        schemas or the entire current
        database:<codeblock>schema_to_xml(schema name, nulls boolean, tableforest boolean, targetns text)
schema_to_xmlschema(schema name, nulls boolean, tableforest boolean, targetns text)
schema_to_xml_and_xmlschema(schema name, nulls boolean, tableforest boolean, targetns text)

database_to_xml(nulls boolean, tableforest boolean, targetns text)
database_to_xmlschema(nulls boolean, tableforest boolean, targetns text)
database_to_xml_and_xmlschema(nulls boolean, tableforest boolean, targetns text)
</codeblock></p>
      <p>Note that these potentially produce large amounts of data, which needs to be built up in
        memory. When requesting content mappings of large schemas or databases, consider mapping the
        tables separately instead, possibly even through a cursor.</p>
      <p>The result of a schema content mapping looks like
        this:<codeblock>&lt;schemaname>

table1-mapping

table2-mapping

...

&lt;/schemaname>
</codeblock></p>
      <p>where the format of a table mapping depends on the <codeph>tableforest</codeph> parameter,
        as explained above.</p>
      <p>The result of a database content mapping looks like
        this:<codeblock>&lt;dbname>

&lt;schema1name>
  ...
&lt;/schema1name>

&lt;schema2name>
  ...
&lt;/schema2name>

...

&lt;/dbname>
</codeblock></p>
      <p>where the schema mapping is as above.</p>
      <p>The example below demonstrates using the output produced by these functions, The example
        shows an XSLT stylesheet that converts the output of
          <codeph>table_to_xml_and_xmlschema</codeph> to an HTML document containing a tabular
        rendition of the table data. In a similar manner, the results from these functions can be
        converted into other XML-based
        formats.<codeblock>&lt;?xml version="1.0"?>
&lt;xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns="http://www.w3.org/1999/xhtml"
>

  &lt;xsl:output method="xml"
      doctype-system="http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"
      doctype-public="-//W3C/DTD XHTML 1.0 Strict//EN"
      indent="yes"/>

  &lt;xsl:template match="/*">
    &lt;xsl:variable name="schema" select="//xsd:schema"/>
    &lt;xsl:variable name="tabletypename"
                  select="$schema/xsd:element[@name=name(current())]/@type"/>
    &lt;xsl:variable name="rowtypename"
                  select="$schema/xsd:complexType[@name=$tabletypename]/xsd:sequence/xsd:element[@name='row']/@type"/>

    &lt;html>
      &lt;head>
        &lt;title>&lt;xsl:value-of select="name(current())"/>&lt;/title>
      &lt;/head>
      &lt;body>
        &lt;table>
          &lt;tr>
            &lt;xsl:for-each select="$schema/xsd:complexType[@name=$rowtypename]/xsd:sequence/xsd:element/@name">
              &lt;th>&lt;xsl:value-of select="."/>&lt;/th>
            &lt;/xsl:for-each>
          &lt;/tr>

          &lt;xsl:for-each select="row">
            &lt;tr>
              &lt;xsl:for-each select="*">
                &lt;td>&lt;xsl:value-of select="."/>&lt;/td>
              &lt;/xsl:for-each>
            &lt;/tr>
          &lt;/xsl:for-each>
        &lt;/table>
      &lt;/body>
    &lt;/html>
  &lt;/xsl:template>

&lt;/xsl:stylesheet></codeblock></p>
    </body>
  </topic>
  <topic id="topic_gn4_x3w_mq">
    <title>XML Function Reference</title>
    <body>
      <p>The functions described in this section operate on values of type <codeph>xml</codeph>. The
        section <xref href="#topic_zpg_jl2_wz" format="dita"/>also contains information about the
          <codeph>xml</codeph> functions and function-like expressions.</p>
      <p><b>Function:</b></p>
      <p><codeph><cmdname>xmlcomment</cmdname></codeph></p>
      <p><b>Synopsis:</b></p>
      <p>
        <codeblock>xmlcomment(<varname>text</varname>)</codeblock>
      </p>
      <p>The function <codeph>xmlcomment</codeph> creates an XML value containing an XML comment
        with the specified text as content. The text cannot contain "--" or end with a "-" so that
        the resulting construct is a valid XML comment. If the argument is null, the result is
        null.</p>
      <p>Example:<codeblock>SELECT xmlcomment('hello');

  xmlcomment
--------------
 &lt;!--hello--></codeblock></p>
      <p><b>Function:</b></p>
      <p><codeph><cmdname>xmlconcat</cmdname></codeph></p>
      <p><b>Synopsis:</b></p>
      <p>
        <codeblock>xmlconcat(xml[, …])</codeblock>
      </p>
      <p>The function <codeph>xmlconcat</codeph> concatenates a list of individual XML values to
        create a single value containing an XML content fragment. Null values are omitted; the
        result is only null if there are no nonnull arguments.</p>
      <p>Example:<codeblock>SELECT xmlconcat('&lt;abc/>', '&lt;bar>foo&lt;/bar>');

      xmlconcat
----------------------
 &lt;abc/>&lt;bar>foo&lt;/bar></codeblock></p>
      <p>XML declarations, if present, are combined as follows:</p>
      <p><ul id="ul_i3n_my2_wz">
          <li>If all argument values have the same XML version declaration, that version is used in
            the result, else no version is used.</li>
          <li>If all argument values have the standalone declaration value "yes", then that value is
            used in the result.</li>
          <li>If all argument values have a standalone declaration value and at least one is "no",
            then that is used in the result. Otherwise, the result will have no standalone
            declaration. </li>
          <li>If the result is determined to require a standalone declaration but no version
            declaration, a version declaration with version 1.0 will be used because XML requires an
            XML declaration to contain a version declaration.</li>
        </ul>Encoding declarations are ignored and removed in all cases.</p>
      <p>Example:
        <codeblock>SELECT xmlconcat('&lt;?xml version="1.1"?>&lt;foo/>', '&lt;?xml version="1.1" standalone="no"?>&lt;bar/>');

             xmlconcat
-----------------------------------
 &lt;?xml version="1.1"?>&lt;foo/>&lt;bar/></codeblock></p>
      <p><b>Function:</b></p>
      <p><codeph><cmdname>xmlelement</cmdname></codeph>
      </p>
      <p><b>Synopsis:</b></p>
      <p>
        <codeblock>xmlelement(name name [, xmlattributes(value [AS attname] [, ... ])] [, content, ...])</codeblock>
      </p>
      <p>The <codeph>xmlelement</codeph> expression produces an XML element with the given name,
        attributes, and content.</p>
      <p>Examples:<codeblock>SELECT xmlelement(name foo);

 xmlelement
------------
 &lt;foo/>

SELECT xmlelement(name foo, xmlattributes('xyz' as bar));

    xmlelement
------------------
 &lt;foo bar="xyz"/>

SELECT xmlelement(name foo, xmlattributes(current_date as bar), 'cont', 'ent');

             xmlelement
-------------------------------------
 &lt;foo bar="2017-01-26">content&lt;/foo></codeblock></p>
      <p>Element and attribute names that are not valid XML names are escaped by replacing the
        offending characters by the sequence <codeph>_x<varname>HHHH</varname>_</codeph>, where
          <varname>HHHH</varname> is the character's Unicode codepoint in hexadecimal notation. For
        example:<codeblock>SELECT xmlelement(name "foo$bar", xmlattributes('xyz' as "a&amp;b"));

            xmlelement
----------------------------------
 &lt;foo_x0024_bar a_x0026_b="xyz"/></codeblock></p>
      <p>An explicit attribute name need not be specified if the attribute value is a column
        reference, in which case the column's name will be used as the attribute name by default. In
        other cases, the attribute must be given an explicit name. So this example is
        valid:<codeblock>CREATE TABLE test (a xml, b xml);
SELECT xmlelement(name test, xmlattributes(a, b)) FROM test;</codeblock></p>
      <p>But these are
        not:<codeblock>SELECT xmlelement(name test, xmlattributes('constant'), a, b) FROM test;
SELECT xmlelement(name test, xmlattributes(func(a, b))) FROM test;</codeblock></p>
      <p>Element content, if specified, will be formatted according to its data type. If the content
        is itself of type <codeph>xml</codeph>, complex XML documents can be constructed. For
        example:<codeblock>SELECT xmlelement(name foo, xmlattributes('xyz' as bar),
                            xmlelement(name abc),
                            xmlcomment('test'),
                            xmlelement(name xyz));

                  xmlelement
----------------------------------------------
 &lt;foo bar="xyz">&lt;abc/>&lt;!--test-->&lt;xyz/>&lt;/foo></codeblock></p>
      <p>Content of other types will be formatted into valid XML character data. This means in
        particular that the characters <codeph>&lt;</codeph>, <codeph>></codeph>, and
          <codeph>&amp;</codeph> will be converted to entities. Binary data (data type
          <codeph>bytea</codeph>) will be represented in base64 or hex encoding, depending on the
        setting of the configuration parameter <xref
          href="https://www.postgresql.org/docs/9.4/runtime-config-client.html#GUC-XMLBINARY"
          format="html" scope="external">xmlbinary</xref>. The particular behavior for individual
        data types is expected to evolve in order to align the SQL and Greenplum Database data types
        with the XML schema specification, at which point a more precise description will
        appear.</p>
      <p><b>Function:</b></p>
      <p><codeph><cmdname>xmlforest</cmdname></codeph></p>
      <p><b>Synopsis:</b></p>
      <p>
        <codeblock>xmlforest(<varname>content</varname> [AS <varname>name</varname>] [, ...])</codeblock>
      </p>
      <p>The <codeph>xmlforest</codeph> expression produces an XML forest (sequence) of elements
        using the given names and content.</p>
      <p>Examples:</p>
      <codeblock>SELECT xmlforest('abc' AS foo, 123 AS bar);

          xmlforest
------------------------------
 &lt;foo>abc&lt;/foo>&lt;bar>123&lt;/bar>


SELECT xmlforest(table_name, column_name)
FROM information_schema.columns
WHERE table_schema = 'pg_catalog';

                                         xmlforest
-------------------------------------------------------------------------------------------
 &lt;table_name>pg_authid&lt;/table_name>&lt;column_name>rolname&lt;/column_name>
 &lt;table_name>pg_authid&lt;/table_name>&lt;column_name>rolsuper&lt;/column_name></codeblock>
      <p>As seen in the second example, the element name can be omitted if the content value is a
        column reference, in which case the column name is used by default. Otherwise, a name must
        be specified.</p>
      <p>Element names that are not valid XML names are escaped as shown for
          <codeph>xmlelement</codeph> above. Similarly, content data is escaped to make valid XML
        content, unless it is already of type <codeph>xml</codeph>.</p>
      <p>Note that XML forests are not valid XML documents if they consist of more than one element,
        so it might be useful to wrap <codeph>xmlforest</codeph> expressions in
          <codeph>xmlelement</codeph>.</p>
      <p><b>Function:</b></p>
      <p><codeph><cmdname>xmlpi</cmdname></codeph></p>
      <p><b>Synopsis:</b></p>
      <p>
        <codeblock>xmlpi(name <varname>target</varname> [, <varname>content</varname>])</codeblock>
      </p>
      <p>The <codeph>xmlpi</codeph> expression creates an XML processing instruction. The content,
        if present, must not contain the character sequence <codeph>?></codeph>.</p>
      <p>Example:<codeblock>SELECT xmlpi(name php, 'echo "hello world";');

            xmlpi
-----------------------------
 &lt;?php echo "hello world";?></codeblock></p>
      <p><b>Function:</b></p>
      <p><codeph><cmdname>xmlroot</cmdname></codeph></p>
      <p><b>Synopsis:</b></p>
      <p>
        <codeblock>xmlroot(<varname>xml</varname>, version <varname>text</varname> | no value [, standalone yes|no|no value])</codeblock>
      </p>
      <p>The <codeph>xmlroot</codeph> expression alters the properties of the root node of an XML
        value. If a version is specified, it replaces the value in the root node's version
        declaration; if a standalone setting is specified, it replaces the value in the root node's
        standalone
        declaration.<codeblock>SELECT xmlroot(xmlparse(document '&lt;?xml version="1.1"?>&lt;content>abc&lt;/content>'),
               version '1.0', standalone yes);

                xmlroot
----------------------------------------
 &lt;?xml version="1.0" standalone="yes"?>
 &lt;content>abc&lt;/content></codeblock></p>
      <p><b>Function:</b></p>
      <p><codeph><cmdname>xmlagg</cmdname></codeph></p>
      <p>
        <codeblock>xmlagg (<varname>xml</varname>)</codeblock>
      </p>
      <p>The function <codeph>xmlagg</codeph> is, unlike the other functions described here, an
        aggregate function. It concatenates the input values to the aggregate function call, much
        like <codeph>xmlconcat</codeph> does, except that concatenation occurs across rows rather
        than across expressions in a single row. See <xref
          href="functions-operators.xml#topic26/in151167">Using Functions and Operators</xref> for
        additional information about aggregate functions.</p>
      <p>Example:</p>
      <codeblock>CREATE TABLE test (y int, x xml);
INSERT INTO test VALUES (1, '&lt;foo>abc&lt;/foo>');
INSERT INTO test VALUES (2, '&lt;bar/>');
SELECT xmlagg(x) FROM test;
        xmlagg
----------------------
 &lt;foo>abc&lt;/foo>&lt;bar/></codeblock>
      <p>To determine the order of the concatenation, an <codeph>ORDER BY</codeph> clause may be
        added to the aggregate call. For example:</p>
      <codeblock>SELECT xmlagg(x ORDER BY y DESC) FROM test;
        xmlagg
----------------------
 &lt;bar/>&lt;foo>abc&lt;/foo></codeblock>
      <p>The following non-standard approach used to be recommended in previous versions, and may
        still be useful in specific
        cases:<codeblock>SELECT xmlagg(x) FROM (SELECT * FROM test ORDER BY y DESC) AS tab;
        xmlagg
----------------------
 &lt;bar/>&lt;foo>abc&lt;/foo></codeblock></p>
    </body>
  </topic>
  <topic id="topic_zpg_jl2_wz">
    <title>XML Predicates</title>
    <body>
      <p>The expressions described in this section check properties of <codeph>xml</codeph>
        values.</p>
      <p><b>Expression:</b></p>
      <p><codeph><cmdname>IS DOCUMENT</cmdname></codeph></p>
      <p><b>Synopsis:</b></p>
      <p>
        <codeblock><varname>xml</varname> IS DOCUMENT</codeblock>
      </p>
      <p>The expression <codeph>IS DOCUMENT</codeph> returns true if the argument XML value is a
        proper XML document, false if it is not (that is, it is a content fragment), or null if the
        argument is null.</p>
      <p><b>Expression:</b></p>
      <p><codeph><cmdname>XMLEXISTS</cmdname></codeph></p>
      <p><b>Synopsis:</b></p>
      <p>
        <codeblock>XMLEXISTS(<varname>text</varname> PASSING [BY REF] <varname>xml</varname> [BY REF])</codeblock>
      </p>
      <p>The function <codeph>xmlexists</codeph> returns true if the XPath expression in the first
        argument returns any nodes, and false otherwise. (If either argument is null, the result is
        null.)</p>
      <p>Example:<codeblock>SELECT xmlexists('//town[<varname>text</varname>() = ''Toronto'']' PASSING BY REF '&lt;towns>&lt;town>Toronto&lt;/town>&lt;town>Ottawa&lt;/town>&lt;/towns>');

 xmlexists
------------
 t
(1 row)
</codeblock></p>
      <p>The <codeph>BY REF</codeph> clauses have no effect in Greenplum Database, but are allowed
        for SQL conformance and compatibility with other implementations. Per SQL standard, the
        first <codeph>BY REF</codeph> is required, the second is optional. Also note that the SQL
        standard specifies the <codeph>xmlexists</codeph> construct to take an XQuery expression as
        first argument, but Greenplum Database currently only supports XPath, which is a subset of
        XQuery.</p>
      <p><b>Expression:</b></p>
      <p><codeph><cmdname>xml_is_well_formed</cmdname></codeph></p>
      <p><b>Synopsis:</b></p>
      <p>
        <codeblock>xml_is_well_formed(<varname>text</varname>)
xml_is_well_formed_document(<varname>text</varname>)
xml_is_well_formed_content(<varname>text</varname>)</codeblock>
      </p>
      <p>These functions check whether a text string is well-formed XML, returning a Boolean result.
          <codeph>xml_is_well_formed_document</codeph> checks for a well-formed document, while
          <codeph>xml_is_well_formed_content</codeph>  checks for well-formed content.
          <codeph>xml_is_well_formed</codeph> does the former if the <codeph>xmloption</codeph>
        configuration parameter is set to <codeph>DOCUMENT</codeph>, or the latter if it is set to
          <codeph>CONTENT</codeph>. This means that <codeph>xml_is_well_formed</codeph> is useful
        for seeing whether a simple cast to type <codeph>xml</codeph> will succeed, whereas the
        other two functions are useful for seeing whether the corresponding variants of
          <codeph>XMLPARSE</codeph> will succeed.</p>
      <p>Examples:</p>
      <p>
        <codeblock>SET xmloption TO DOCUMENT;
SELECT xml_is_well_formed('&lt;>');
 xml_is_well_formed 
--------------------
 f
(1 row)

SELECT xml_is_well_formed('&lt;abc/>');
 xml_is_well_formed 
--------------------
 t
(1 row)

SET xmloption TO CONTENT;
SELECT xml_is_well_formed('abc');
 xml_is_well_formed 
--------------------
 t
(1 row)

SELECT xml_is_well_formed_document('&lt;pg:foo xmlns:pg="http://postgresql.org/stuff">bar&lt;/pg:foo>');
 xml_is_well_formed_document 
-----------------------------
 t
(1 row)

SELECT xml_is_well_formed_document('&lt;pg:foo xmlns:pg="http://postgresql.org/stuff">bar&lt;/my:foo>');
 xml_is_well_formed_document 
-----------------------------
 f
(1 row)</codeblock>
      </p>
      <p>The last example shows that the checks include whether namespaces are correctly
        matched.</p>
    </body>
  </topic>
</topic>
