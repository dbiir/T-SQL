<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_djz_rmn_wbb">
  <title>Collecting Root Partition Statistics</title>
  <shortdesc>For a partitioned table, GPORCA uses statistics of the table root partition to generate
    query plans. These statistics are used for determining the join order, for splitting and joining
    aggregate nodes, and for costing the query steps. In contrast, the Postgres Planner uses the
    statistics of each leaf partition.</shortdesc>
  <body>
    <p>If you execute queries on partitioned tables, you should collect statistics on the root
      partition and periodically update those statistics to ensure that GPORCA can generate optimal
      query plans. If the root partition statistics are not up-to-date or do not exist, GPORCA still
      performs dynamic partition elimination for queries against the table. However, the query plan
      might not be optimal. </p>
  </body>
  <topic id="topic_w1y_srn_wbb">
    <title>Running ANALYZE</title>
    <body>
      <p>By default, running the <codeph>ANALYZE</codeph> command on the root partition of a
        partitioned table samples the leaf partition data in the table, and stores the statistics
        for the root partition. <codeph>ANALYZE</codeph> collects statistics on the root and leaf
        partitions, including HyperLogLog (HLL) statistics on the leaf partitions. <codeph>ANALYZE
          ROOTPARTITION</codeph> collects statistics only on the root partition. The server
        configuration parameter <codeph><xref
            href="../../../ref_guide/config_params/guc-list.xml#optimizer_analyze_root_partition"
            >optimizer_analyze_root_partition</xref></codeph> controls whether the
          <codeph>ROOTPARTITION</codeph> keyword is required to collect root statistics for the root
        partition of a partitioned table. See the <codeph><xref
            href="../../../ref_guide/sql_commands/ANALYZE.xml#topic1">ANALYZE</xref></codeph>
        command for information about collecting statistics on partitioned tables.</p>
      <p>Keep in mind that <codeph>ANALYZE</codeph> always scans the entire table before updating
        the root partition statistics. If your table is very large, this operation can take a
        significant amount of time. <codeph>ANALYZE ROOTPARTITION</codeph> also uses an
          <codeph>ACCESS SHARE</codeph> lock that prevents certain operations, such as
          <codeph>TRUNCATE</codeph> and <codeph>VACUUM</codeph> operations, during execution. For
        these reasons, you should schedule <codeph>ANALYZE</codeph> operations periodically, or when
        there are significant changes to leaf partition data.</p>
      <p>Follow these best practices for running <codeph>ANALYZE</codeph> or <codeph>ANALYZE
          ROOTPARTITION</codeph> on partitioned tables in your system:<ul id="ul_vm4_fsn_wbb">
          <li>Run <codeph>ANALYZE &lt;<varname>root_partition</varname>></codeph> on a new
            partitioned table after adding initial data. Run <codeph>ANALYZE
                &lt;<varname>leaf_partition</varname>></codeph> on a new leaf partition or a leaf
            partition where data has changed. By default, running the command on a leaf partition
            updates the root partition statistics if the other leaf partitions have statistics.</li>
          <li>Update root partition statistics when you observe query performance regression in
              <codeph>EXPLAIN</codeph> plans against the table, or after significant changes to leaf
            partition data. For example, if you add a new leaf partition at some point after
            generating root partition statistics, consider running <codeph>ANALYZE</codeph> or
              <codeph>ANALYZE ROOTPARTITION</codeph> to update root partition statistics with the
            new tuples inserted from the new leaf partition.</li>
          <li>For very large tables, run <codeph>ANALYZE</codeph> or <codeph>ANALYZE
              ROOTPARTITION</codeph> only weekly, or at some interval longer than daily.</li>
          <li>Avoid running <codeph>ANALYZE</codeph> with no arguments, because doing so executes
            the command on all database tables including partitioned tables. With large databases,
            these global <codeph>ANALYZE</codeph> operations are difficult to monitor, and it can be
            difficult to predict the time needed for completion.</li>
          <li>Consider running multiple <codeph>ANALYZE &lt;<varname>table_name</varname>></codeph>
            or <codeph>ANALYZE ROOTPARTITION &lt;<varname>table_name</varname>></codeph> operations
            in parallel to speed the operation of statistics collection, if your I/O throughput can
            support the load.</li>
          <li>You can also use the Greenplum Database utility <codeph>analyzedb</codeph> to update
            table statistics. Using <codeph>analyzedb</codeph> ensures that tables that were
            previously analzyed are not re-analyzed if no modifications were made to the leaf
            partition.</li>
        </ul></p>
    </body>
  </topic>
  <topic id="topic_h2x_hks_wbb">
    <title>GPORCA and Leaf Partition Statistics</title>
    <body>
      <p>Although creating and maintaining root partition statistics is crucial for GPORCA query
        performance with partitioned tables, maintaining leaf partition statistics is also
        important. If GPORCA cannot generate a plan for a query against a partitioned table, then
        the Postgres Planner is used and leaf partition statistics are needed to produce the optimal
        plan for that query. </p>
      <p>GPORCA itself also uses leaf partition statistics for any queries that access leaf
        partitions directly, instead of using the root partition with predicates to eliminate
        partitions. For example, if you know which partitions hold necessary tuples for a query, you
        can directly query the leaf partition table itself; in this case GPORCA uses the leaf
        partition statistics.</p>
    </body>
  </topic>
  <topic id="topic_r5d_hv1_kr">
    <title>Disabling Automatic Root Partition Statistics Collection</title>
    <body>
      <p>If you do not intend to execute queries on partitioned tables with GPORCA (setting the
        server configuration parameter <codeph><xref
            href="../../../ref_guide/config_params/guc-list.xml#optimizer"
            >optimizer</xref></codeph> to <codeph>off</codeph>), then you can disable the automatic
        collection of statistics on the root partition of the partitioned table. The server
        configuration parameter <codeph><xref
            href="../../../ref_guide/config_params/guc-list.xml#optimizer_analyze_root_partition"
            >optimizer_analyze_root_partition</xref></codeph> controls whether the
          <codeph>ROOTPARTITION</codeph> keyword is required to collect root statistics for the root
        partition of a partitioned table. The default setting for the parameter is
          <codeph>on</codeph>, the <codeph>ANALYZE</codeph> command can collect root partition
        statistics without the <codeph>ROOTPARTITION</codeph> keyword. You can disable automatic
        collection of root partition statistics by setting the parameter to <codeph>off</codeph>.
        When the value is <codeph>off</codeph>, you must run <codeph>ANALZYE ROOTPARTITION</codeph>
        to collect root partition statistics.</p>
      <ol id="ol_n22_hv1_kr">
        <li>Log into the Greenplum Database master host as <codeph>gpadmin</codeph>, the Greenplum
          Database administrator.</li>
        <li>Set the values of the server configuration parameters. These Greenplum Database
            <codeph>gpconfig</codeph> utility commands sets the value of the parameters to
            <codeph>off</codeph>:<codeblock>$ gpconfig -c optimizer_analyze_root_partition -v off --masteronly</codeblock></li>
        <li>Restart Greenplum Database. This Greenplum Database <codeph>gpstop</codeph> utility
          command reloads the <codeph>postgresql.conf</codeph> files of the master and segments
          without shutting down Greenplum Database. <codeblock>gpstop -u</codeblock></li>
      </ol>
    </body>
  </topic>
</topic>
