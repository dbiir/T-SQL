<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="Untitled1">
  <title>About the Segment Recovery Process</title>
  <body>
    <p>This topic describes the process for recovering segments, initiated by the
        <codeph>gprecoverseg</codeph> management utility. It describes actions
        <codeph>gprecoverseg</codeph> performs and how the Greenplum File Replication and FTS (fault
      tolerance service) processes complete the recovery initiated with
        <codeph>gprecoverseg</codeph>. </p>
    <p>Although <codeph>gprecoverseg</codeph> is an online operation, there are two brief periods
      during which all IO is paused. First, when recovery is initiated, IO is suspended while empty
      data files are created on the mirror. Second, after data files are synchronized, IO is
      suspended while system files such as transaction logs are copied from the primary to the
      mirror. The duration of these pauses is affected primarily by the number of file system files
      that must be created on the mirror and the sizes of the system flat files that must be copied.
      The system is online and available while database tables are replicated from the primary to
      the mirror, and any changes made to the database during recovery are replicated directly to
      the mirror.</p>
    <p dir="ltr">To initiate recovery, the administrator runs the <codeph>gprecoverseg</codeph>
      utility. <codeph>gprecoverseg</codeph> prepares segments for recovery and initiates
      synchronization. When synchronization is complete and the segment status is updated in the
      system catalog, the segments are recovered. If the recovered segments are not running in their
      preferred roles, <codeph>gprecoverseg -r</codeph> can be used to bring the system back into
      balance.</p>
    <p dir="ltr">Without the <codeph>-F</codeph> option, <codeph>gprecoverseg</codeph> recovers
      segments incrementally, copying only the changes since the mirror entered down status. The
        <codeph>-F</codeph> option fully recovers mirrors by deleting their data directories and
      then synchronizing all persistent data files from the primary to the mirror. </p>
    <p dir="ltr">You can run <codeph>gpstate -e</codeph> to view the mirroring status of the
      segments before and during the recovery process. The primary and mirror segment statuses are
      updated as the recovery process proceeds. </p>
    <p dir="ltr">Consider a single primary-mirror segment pair where the primary is active and the
      mirror is down. The following table shows the segment status before beginning recovery of the
      mirror. </p>
    <table frame="all" rowsep="1" colsep="1" id="table_nv4_k1t_bx">
      <tgroup cols="5">
        <colspec colname="c1" colnum="1" colwidth="1.0*"/>
        <colspec colname="c2" colnum="2" colwidth="1.0*"/>
        <colspec colname="c3" colnum="3" colwidth="1.0*"/>
        <colspec colname="c4" colnum="4" colwidth="1.0*"/>
        <colspec colname="c5" colnum="5" colwidth="1.0*"/>
        <thead>
          <row>
            <entry/>
            <entry><codeph>preferred_role</codeph></entry>
            <entry><codeph>role</codeph></entry>
            <entry><codeph>mode</codeph></entry>
            <entry><codeph>status</codeph></entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>Primary</entry>
            <entry><codeph>p</codeph><p>(primary)</p></entry>
            <entry><codeph>p</codeph><p>(primary)</p></entry>
            <entry><codeph>c</codeph><p>(change tracking)</p></entry>
            <entry><codeph>u</codeph><p>(up)</p></entry>
          </row>
          <row>
            <entry>Mirror</entry>
            <entry><codeph>m</codeph><p>(mirror)</p></entry>
            <entry><codeph>m</codeph><p>(mirror)</p></entry>
            <entry><codeph>s</codeph><p>(synchronizing)</p></entry>
            <entry><codeph>d</codeph><p>(down)</p></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p>The segments are in their preferred roles, but the mirror is down. The primary is up and is
      in change tracking mode because it is unable to send changes to its mirror. </p>
    <section>
      <title>Segment Recovery Preparation</title>
      <p>The <codeph>gprecoverseg</codeph> utility prepares the segments for recovery and then
        exits, allowing the Greenplum file replication processes to copy data from the primary to
        the mirror. </p>
      <p> During the <codeph>gprecoverseg</codeph> execution the following recovery process steps
        are completed. </p>
      <ol id="ol_zx4_1nr_bx">
        <li dir="ltr">The down segments are identified.</li>
        <li dir="ltr">The mirror segment processes are initialized.</li>
        <li dir="ltr">For full recovery (<codeph>-aF</codeph>):<ul id="ul_fst_cnr_bx">
            <li>The data directories of the down segments are deleted.</li>
            <li>A new data directory structure is created. </li>
          </ul></li>
        <li>The segment mode in the <codeph>gp_segment_configuration</codeph> system table is
          updated to 'r' (resynchronization mode).</li>
        <li dir="ltr">The backend performs the following:<ul id="ul_ttj_bpt_bx">
            <li>Suspends IOâ€”connections to the master are allowed, but reads and writes from the
              segment being recovered are not allowed.</li>
            <li dir="ltr">Scans persistent tables on the primary segment. </li>
            <li dir="ltr">For each persistent file object (<codeph>relfilenode</codeph> in the
                <codeph>pg_class</codeph> system table), creates a data file on the mirror. </li>
          </ul><p>The greater the number of data files, the longer IO is suspended. </p><p>For
            incremental recovery, the IO is suspended for a shorter period because only file system
            objects added (or dropped) on the primary after the mirror was marked down need to be
            created (or deleted) on the mirror.</p></li>
        <li dir="ltr">The <codeph>gprecoverseg</codeph> script completes.</li>
      </ol>
      <p>Once <codeph>gprecoverseg</codeph> has completed, the segments are in the states shown in
        the following table.</p>
      <table frame="all" rowsep="1" colsep="1" id="table_xn5_qct_bx">
        <tgroup cols="5">
          <colspec colname="c1" colnum="1" colwidth="1.0*"/>
          <colspec colname="c2" colnum="2" colwidth="1.0*"/>
          <colspec colname="c3" colnum="3" colwidth="1.0*"/>
          <colspec colname="c4" colnum="4" colwidth="1.0*"/>
          <colspec colname="c5" colnum="5" colwidth="1.0*"/>
          <thead>
            <row>
              <entry/>
              <entry><codeph>preferred_role</codeph></entry>
              <entry><codeph>role</codeph></entry>
              <entry><codeph>mode</codeph></entry>
              <entry><codeph>status</codeph></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>Primary</entry>
              <entry><codeph>p</codeph><p>(primary)</p></entry>
              <entry><codeph>p</codeph><p>(primary)</p></entry>
              <entry><codeph>r</codeph><p>(resynchronizing)</p></entry>
              <entry><codeph>u</codeph><p>(up)</p></entry>
            </row>
            <row>
              <entry>Mirror</entry>
              <entry><codeph>m</codeph><p>(mirror)</p></entry>
              <entry><codeph>m</codeph><p>(mirror)</p></entry>
              <entry><codeph>r</codeph><p>(resynchronizing)</p></entry>
              <entry><codeph>u</codeph><p>(up)</p></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
    <section>
      <title>Data File Replication</title>
      <p>Data file resynchronization is performed in the background by file replication processes.
        Run <codeph>gpstate -e</codeph> to check the process of resynchronization. The Greenplum
        system is fully available for workloads while this process completes. </p>
      <p>Following are steps in the resynchronization process:</p>
      <ol id="ol_a2z_2dt_bx">
        <li dir="ltr">Data copy (full and incremental recovery): <p>After the file system objects
            are created, data copy is initiated for the affected segments. The ResyncManager process
            scans the persistent table system catalogs to find the file objects to be synchronized.
            ResyncWorker processes sync the file objects from the primary to the mirror.</p></li>
        <li dir="ltr">Any changes or new data created with database transactions during the data
          copy are mirrored directly to the mirror.</li>
        <li dir="ltr">Once data copy has finished synchronizing persistent data files, file
          replication updates the shared memory state on the current primary segment to 'insync'.
        </li>
      </ol>
    </section>
    <section>
      <title>Flat File Replication</title>
      <p>During this phase, system files in the primary segment's data directory are copied to the
        segment data directory. IO is suspended while the following flat files are copied from the
        primary data directory to the segment data directory:<ul id="ul_ozt_c3t_bx">
          <li><codeph>pg_xlog/*</codeph></li>
          <li><codeph>pg_clog/*</codeph></li>
          <li><codeph>pg_distributedlog/*</codeph></li>
          <li><codeph>pg_distributedxidmap/*</codeph></li>
          <li><codeph>pg_multixact/members</codeph></li>
          <li><codeph>pg_multixact/offsets</codeph></li>
          <li><codeph>pg_twophase/*</codeph></li>
          <li><codeph>global/pg_database</codeph></li>
          <li><codeph>global/pg_auth</codeph></li>
          <li><codeph>global/pg_auth_time_constraint</codeph></li>
        </ul></p>
      <p>IOSUSPEND ends after these files are copied. </p>
      <p>The next time the fault tolerance server (ftsprobe) process on the master wakes, it will
        set the primary and mirror states to synchronized (mode=s, state=u). A distributed query
        will also trigger the ftsprobe process to update the state. </p>
      <p>When all segment recovery and file replication processes are complete, the segment status
        in the <codeph>gp_segment_configuration</codeph> system table and <codeph>gp_state
          -e</codeph> output is as shown in the following table. </p>
      <table frame="all" rowsep="1" colsep="1" id="table_c31_2jt_bx">
        <tgroup cols="5">
          <colspec colname="c1" colnum="1" colwidth="1.0*"/>
          <colspec colname="c2" colnum="2" colwidth="1.0*"/>
          <colspec colname="c3" colnum="3" colwidth="1.0*"/>
          <colspec colname="c4" colnum="4" colwidth="1.0*"/>
          <colspec colname="c5" colnum="5" colwidth="1.0*"/>
          <thead>
            <row>
              <entry/>
              <entry><codeph>preferred_role</codeph></entry>
              <entry><codeph>role</codeph></entry>
              <entry><codeph>mode</codeph></entry>
              <entry><codeph>status</codeph></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>Primary</entry>
              <entry><codeph>p</codeph><p>(primary)</p></entry>
              <entry><codeph>p</codeph><p>(primary)</p></entry>
              <entry><codeph>s</codeph><p>(synchronized)</p></entry>
              <entry><codeph>u</codeph><p>(up)</p></entry>
            </row>
            <row>
              <entry>Mirror</entry>
              <entry><codeph>m</codeph><p>(mirror)</p></entry>
              <entry><codeph>m</codeph><p>(mirror)</p></entry>
              <entry><codeph>s</codeph><p>(synchronized)</p></entry>
              <entry><codeph>u</codeph><p>(up)</p></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
    <section>
      <title>Factors Affecting Duration of Segment Recovery</title>
      <p dir="ltr">Following are some factors that can affect the duration of the segment recovery
        process.</p>
      <ul id="ul_ag2_2kt_bx">
        <li dir="ltr">The number of database objects, mainly tables and indexes. </li>
        <li dir="ltr">The number of data files in segment data directories.</li>
        <li dir="ltr">The types of workloads updating data during resynchronization â€“ both DDL and
          DML (insert, update, delete, and truncate).</li>
        <li dir="ltr">The size of the data.</li>
        <li dir="ltr">The size of system files, such as transaction log files, pg_database, pg_auth,
          and pg_auth_time_constraint.</li>
      </ul>
    </section>
  </body>
</topic>
