<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1" xml:lang="en">
  <title id="iq110126">Managing Roles and Privileges</title>
  <shortdesc>The Greenplum Database authorization mechanism stores roles and
    permissions to access database objects in the database and is administered using SQL statements
    or command-line utilities.</shortdesc>
  <body>
    <p>Greenplum Database manages database access permissions using <i>roles</i>. The
      concept of roles subsumes the concepts of <i>users</i> and <i>groups</i>. A role can be a
      database user, a group, or both. Roles can own database objects (for example, tables) and can
      assign privileges on those objects to other roles to control access to the objects. Roles can
      be members of other roles, thus a member role can inherit the object privileges of its parent
      role.</p>
    <p>Every Greenplum Database system contains a set of database roles (users and
      groups). Those roles are separate from the users and groups managed by the operating system on
      which the server runs. However, for convenience you may want to maintain a relationship
      between operating system user names and Greenplum Database role names, since
      many of the client applications use the current operating system user name as the default.</p>
    <p>In Greenplum Database, users log in and connect through the master instance,
      which then verifies their role and access privileges. The master then issues commands to the
      segment instances behind the scenes as the currently logged in role. </p>
    <p>Roles are defined at the system level, meaning they are valid for all databases in the
      system.</p>
    <p>In order to bootstrap the Greenplum Database system, a freshly initialized
      system always contains one predefined <i>superuser</i> role <ph>(also referred to as the
        system user)</ph>. This role will have the same name as the operating system user that
      initialized the Greenplum Database system. Customarily, this role is named
        <codeph>gpadmin</codeph>. In order to create more roles you first have to connect as this
      initial role.</p>
  </body>
  <topic id="topic2" xml:lang="en">
    <title>Security Best Practices for Roles and Privileges</title>
    <body>
      <ul>
        <li id="iq142445"><b>Secure the gpadmin system user.</b>
          Greenplum requires a UNIX user id to install and initialize
          the Greenplum Database system. This system user is referred to as
            <codeph>gpadmin</codeph> in the Greenplum documentation.
          This <codeph>gpadmin</codeph> user is the default database superuser in Greenplum Database, as well as the file system owner of the Greenplum installation and its underlying data files. This default
          administrator account is fundamental to the design of Greenplum Database.
          The system cannot run without it, and there is no way to limit the access of this gpadmin
          user id. Use roles to manage who has access to the database for specific purposes. You
          should only use the <codeph>gpadmin</codeph> account for system maintenance tasks such as
          expansion and upgrade. Anyone who logs on to a Greenplum host
          as this user id can read, alter or delete any data; including system catalog data and
          database access rights. Therefore, it is very important to secure the gpadmin user id and
          only provide access to essential system administrators. Administrators should only log in
          to Greenplum as <codeph>gpadmin</codeph> when performing
          certain system maintenance tasks (such as upgrade or expansion). Database users should
          never log on as <codeph>gpadmin</codeph>, and ETL or production workloads should never run
          as <codeph>gpadmin</codeph>.</li>
        <li id="iq142438"><b>Assign a distinct role to each user that logs in.</b> For logging and
          auditing purposes, each user that is allowed to log in to Greenplum Database
          should be given their own database role. For applications or web services, consider
          creating a distinct role for each application or service. See <xref href="#topic3"
            type="topic" format="dita"/>.</li>
        <li id="iq142229"><b>Use groups to manage access privileges.</b> See <xref href="#topic5"
            type="topic" format="dita"/>.</li>
        <li id="iq142283"><b>Limit users who have the SUPERUSER role attribute.</b> Roles that are
          superusers bypass all access privilege checks in Greenplum Database, as well
          as resource queuing. Only system administrators should be given superuser rights. See
            <xref href="#topic4" type="topic" format="dita"/>.</li>
      </ul>
    </body>
  </topic>
  <topic id="topic3" xml:lang="en">
    <title id="iq139303">Creating New Roles (Users)</title>
    <body>
      <p>A user-level role is considered to be a database role that can log in to the database and
        initiate a database session. Therefore, when you create a new user-level role using the
          <codeph>CREATE ROLE</codeph> command, you must specify the <codeph>LOGIN</codeph>
        privilege. For example:</p>
      <p>
        <codeblock>=# CREATE ROLE jsmith WITH LOGIN;
</codeblock>
      </p>
      <p>A database role may have a number of attributes that define what sort of tasks that role
        can perform in the database. You can set these attributes when you create the role, or later
        using the <codeph>ALTER ROLE</codeph> command. See <xref href="#topic4/iq139556"
          type="table" format="dita"/> for a description of the role attributes you can set.</p>
    </body>
    <topic id="topic4" xml:lang="en">
      <title id="iq139512">Altering Role Attributes</title>
      <body>
        <p>A database role may have a number of attributes that define what sort of tasks that role
          can perform in the database. </p>
        <table id="iq139556">
          <title>Role Attributes</title>
          <tgroup cols="2">
            <colspec colnum="1" colname="col1" colwidth="1*"/>
            <colspec colnum="2" colname="col2" colwidth="2*"/>
            <thead>
              <row>
                <entry colname="col1">Attributes</entry>
                <entry colname="col2">Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry colname="col1">
                  <codeph>SUPERUSER | NOSUPERUSER</codeph>
                </entry>
                <entry colname="col2">Determines if the role is a superuser. You must yourself be a
                  superuser to create a new superuser. <codeph>NOSUPERUSER</codeph> is the default.
                </entry>
              </row>
              <row>
                <entry colname="col1">
                  <codeph>CREATEDB | NOCREATEDB</codeph>
                </entry>
                <entry colname="col2">Determines if the role is allowed to create databases.
                    <codeph>NOCREATEDB</codeph> is the default. </entry>
              </row>
              <row>
                <entry colname="col1">
                  <codeph>CREATEROLE | NOCREATEROLE</codeph>
                </entry>
                <entry colname="col2">Determines if the role is allowed to create and manage other
                  roles. <codeph>NOCREATEROLE</codeph> is the default. </entry>
              </row>
              <row>
                <entry colname="col1">
                  <codeph>INHERIT | NOINHERIT</codeph>
                </entry>
                <entry colname="col2">Determines whether a role inherits the privileges of roles it
                  is a member of. A role with the <codeph>INHERIT</codeph> attribute can
                  automatically use whatever database privileges have been granted to all roles it
                  is directly or indirectly a member of. <codeph>INHERIT</codeph> is the
                  default.</entry>
              </row>
              <row>
                <entry colname="col1">
                  <codeph>LOGIN | NOLOGIN</codeph>
                </entry>
                <entry colname="col2">Determines whether a role is allowed to log in. A role having
                  the <codeph>LOGIN</codeph> attribute can be thought of as a user. Roles without
                  this attribute are useful for managing database privileges (groups).
                    <codeph>NOLOGIN</codeph> is the default. </entry>
              </row>
              <row>
                <entry colname="col1">
                  <codeph>CONNECTION LIMIT <i>connlimit</i></codeph>
                </entry>
                <entry colname="col2">If role can log in, this specifies how many concurrent
                  connections the role can make. -1 (the default) means no limit. </entry>
              </row>
              <row>
                <entry colname="col1">
                  <codeph>CREATEEXTTABLE | NOCREATEEXTTABLE</codeph>
                </entry>
                <entry colname="col2">Determines whether a role is allowed to create external
                  tables. <codeph>NOCREATEEXTTABLE</codeph> is the default. For a role with the
                    <codeph>CREATEEXTTABLE</codeph> attribute, the default external table
                    <codeph>type</codeph> is <codeph>readable</codeph> and the default
                    <codeph>protocol</codeph> is <codeph>gpfdist</codeph>. Note that external tables
                  that use the <codeph>file</codeph> or <codeph>execute</codeph> protocols can only
                  be created by superusers. </entry>
              </row>
              <row>
                <entry colname="col1">
                  <codeph>PASSWORD '<i>password</i>'</codeph>
                </entry>
                <entry colname="col2">Sets the role's password. If you do not plan to use password
                  authentication you can omit this option. If no password is specified, the password
                  will be set to null and password authentication will always fail for that user. A
                  null password can optionally be written explicitly as <codeph>PASSWORD
                    NULL</codeph>. </entry>
              </row>
              <row>

                <entry colname="col1">
                  <codeph>ENCRYPTED | UNENCRYPTED</codeph>
                </entry>
                <entry colname="col2">Controls whether a new password is stored as a hash string in
                  the <codeph>pg_authid</codeph> system catalog. If neither
                    <codeph>ENCRYPTED</codeph> nor <codeph>UNENCRYPTED</codeph> is specified, the
                  default behavior is determined by the <codeph>password_encryption</codeph>
                  configuration parameter, which is <codeph>on</codeph> by default. <p>If the
                    supplied <codeph><i>password</i></codeph> string is already in hashed format, it
                    is stored as-is, regardless of whether <codeph>ENCRYPTED</codeph> or
                      <codeph>UNENCRYPTED</codeph> is specified. </p><p>See <xref href="#topic9"
                      format="dita"/> for additional information about protecting login
                    passwords.</p></entry>
              </row>
              <row>
                <entry colname="col1">
                  <codeph>VALID UNTIL '<i>timestamp</i>'</codeph>
                </entry>
                <entry colname="col2">Sets a date and time after which the role's password is no
                  longer valid. If omitted the password will be valid for all time.</entry>
              </row>
              <row>

                <entry colname="col1">
                  <codeph>RESOURCE QUEUE <i>queue_name</i></codeph>
                </entry>

                <entry colname="col2">Assigns the role to the named resource queue for workload
                  management. Any statement that role issues is then subject to the resource queue's
                  limits. Note that the <codeph>RESOURCE QUEUE</codeph> attribute is not inherited;
                  it must be set on each user-level (<codeph>LOGIN</codeph>) role.</entry>
              </row>
              <row>

                <entry colname="col1">
                  <codeph>DENY {deny_interval | deny_point}</codeph>
                </entry>

                <entry colname="col2">Restricts access during an interval, specified by day or day
                  and time. For more information see <xref href="#topic13" type="topic"
                    format="dita"/>.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <p>You can set these attributes when you create the role, or later using the <codeph>ALTER
            ROLE</codeph> command. For example:</p>
        <p>
          <codeblock>=# ALTER ROLE jsmith WITH PASSWORD 'passwd123';
=# ALTER ROLE admin VALID UNTIL 'infinity';
=# ALTER ROLE jsmith LOGIN;
=# ALTER ROLE jsmith RESOURCE QUEUE adhoc;
=# ALTER ROLE jsmith DENY DAY 'Sunday';</codeblock>
        </p>
        <p>A role can also have role-specific defaults for many of the server configuration
          settings. For example, to set the default schema search path for a role:</p>
        <p>
          <codeblock>=# ALTER ROLE admin SET search_path TO myschema, public;</codeblock>
        </p>
      </body>
    </topic>
  </topic>
  <topic id="topic5" xml:lang="en">
    <title id="iq139320">Role Membership</title>
    <body>
      <p>It is frequently convenient to group users together to ease management of object
        privileges: that way, privileges can be granted to, or revoked from, a group as a whole. In
          Greenplum Database this is done by creating a role that represents the
        group, and then granting membership in the group role to individual user roles. </p>
      <p>Use the <codeph>CREATE ROLE</codeph> SQL command to create a new group role. For
        example:</p>
      <p>
        <codeblock>=# CREATE ROLE admin CREATEROLE CREATEDB;
</codeblock>
      </p>
      <p>Once the group role exists, you can add and remove members (user roles) using the
          <codeph>GRANT</codeph> and <codeph>REVOKE</codeph> commands. For example:</p>
      <p>
        <codeblock>=# GRANT admin TO john, sally;
=# REVOKE admin FROM bob;
</codeblock>
      </p>
      <p>For managing object privileges, you would then grant the appropriate permissions to the
        group-level role only (see <xref href="#topic6/iq139925" type="table" format="dita"/>). The
        member user roles then inherit the object privileges of the group role. For example:</p>
      <p>
        <codeblock>=# GRANT ALL ON TABLE mytable TO admin;
=# GRANT ALL ON SCHEMA myschema TO admin;
=# GRANT ALL ON DATABASE mydb TO admin;
</codeblock>
      </p>
      <p>The role attributes <codeph>LOGIN</codeph>, <codeph>SUPERUSER</codeph>,
          <codeph>CREATEDB</codeph>, <codeph>CREATEROLE</codeph>, <codeph>CREATEEXTTABLE</codeph>,
          and <codeph>RESOURCE QUEUE</codeph> are never inherited as ordinary privileges on database
        objects are. User members must actually <codeph>SET ROLE</codeph> to a specific role having
        one of these attributes in order to make use of the attribute. In the above example, we gave
          <codeph>CREATEDB</codeph> and <codeph>CREATEROLE</codeph> to the <codeph>admin</codeph>
        role. If <codeph>sally</codeph> is a member of <codeph>admin</codeph>, she could issue the
        following command to assume the role attributes of the parent role:</p>
      <p>
        <codeblock>=&gt; SET ROLE admin;
</codeblock>
      </p>
    </body>
  </topic>
  <topic id="topic6" xml:lang="en">
    <title id="iq139337">Managing Object Privileges</title>
    <body>
      <p>When an object (table, view, sequence, database, function, language, schema, or tablespace)
        is created, it is assigned an owner. The owner is normally the role that executed the
        creation statement. For most kinds of objects, the initial state is that only the owner (or
        a superuser) can do anything with the object. To allow other roles to use it, privileges
        must be granted. Greenplum Database supports the following privileges for each
        object type:</p>
      <table id="iq139925">
        <title>Object Privileges</title>
        <tgroup cols="2">
          <colspec colnum="1" colname="col1" colwidth="2*"/>
          <colspec colnum="2" colname="col2" colwidth="1*"/>
          <thead>
            <row>
              <entry colname="col1">Object Type</entry>
              <entry colname="col2">Privileges</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry colname="col1">Tables, Views, Sequences</entry>
              <entry colname="col2">
                <codeph>SELECT</codeph>
                <p>
                  <codeph>INSERT</codeph>
                </p>
                <p>
                  <codeph>UPDATE</codeph>
                </p>
                <p>
                  <codeph>DELETE</codeph>
                </p>
                <p>
                  <codeph>RULE</codeph>
                </p>
                <p>
                  <codeph>ALL</codeph>
                </p>
              </entry>
            </row>
            <row>
              <entry colname="col1">External Tables</entry>
              <entry colname="col2">
                <codeph>SELECT</codeph>
                <p>
                  <codeph>RULE</codeph>
                </p>
                <p>
                  <codeph>ALL</codeph>
                </p>
              </entry>
            </row>
            <row>
              <entry colname="col1">Databases</entry>
              <entry colname="col2">
                <codeph>CONNECT</codeph>
                <p>
                  <codeph>CREATE</codeph>
                </p>
                <p>
                  <codeph>TEMPORARY | TEMP</codeph>
                </p>
                <p>
                  <codeph>ALL</codeph>
                </p>
              </entry>
            </row>
            <row>
              <entry colname="col1">Functions</entry>
              <entry colname="col2">
                <codeph>EXECUTE</codeph>
              </entry>
            </row>
            <row>
              <entry colname="col1">Procedural Languages</entry>
              <entry colname="col2">
                <codeph>USAGE</codeph>
              </entry>
            </row>
            <row>
              <entry colname="col1">Schemas</entry>
              <entry colname="col2">
                <codeph>CREATE</codeph>
                <p>
                  <codeph>USAGE</codeph>
                </p>
                <p>
                  <codeph>ALL</codeph>
                </p>
              </entry>
            </row>
            <row>
              <entry colname="col1">Custom Protocol</entry>
              <entry colname="col2">
                <codeph>SELECT</codeph>
                <p>
                  <codeph>INSERT</codeph>
                </p>
                <p>
                  <codeph>UPDATE</codeph>
                </p>
                <p>
                  <codeph>DELETE</codeph>
                </p>
                <p>
                  <codeph>RULE</codeph>
                </p>
                <p>
                  <codeph>ALL</codeph>
                </p>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <note type="note">You must grant privileges for each object individually. For example,
        granting <codeph>ALL</codeph> on a database does not grant full access to the objects within
        that database. It only grants all of the database-level privileges
        (<codeph>CONNECT</codeph>, <codeph>CREATE</codeph>, <codeph>TEMPORARY</codeph>) to the
        database itself.</note>
      <p>Use the <codeph>GRANT</codeph> SQL command to give a specified role privileges on an
        object. For example, to grant the role named <codeph>jsmith</codeph> insert
        privileges on the table named <codeph>mytable</codeph>:</p>
      <p>
        <codeblock>=# GRANT INSERT ON mytable TO jsmith;</codeblock>
        Similarly, to grant <codeph>jsmith</codeph> select privileges only to the column named
        <codeph>col1</codeph> in the table named <codeph>table2</codeph>:
        <codeblock>=# GRANT SELECT (col1) on TABLE table2 TO jsmith;</codeblock>
      </p>
      <p>To revoke privileges, use the <codeph>REVOKE</codeph> command. For example:</p>
      <p>
        <codeblock>=# REVOKE ALL PRIVILEGES ON mytable FROM jsmith;
</codeblock>
      </p>
      <p>You can also use the <codeph>DROP OWNED</codeph> and <codeph>REASSIGN OWNED</codeph>
        commands for managing objects owned by deprecated roles (Note: only an object's owner or a
        superuser can drop an object or reassign ownership). For example:</p>
      <p>
        <codeblock>=# REASSIGN OWNED BY sally TO bob;
=# DROP OWNED BY visitor;
</codeblock>
      </p>
    </body>
    <topic id="topic7" xml:lang="en">
      <title>Simulating Row Level Access Control</title>
      <body>
        <p>Greenplum Database does not support row-level access or row-level, labeled security. You can
          simulate row-level access by using views to restrict the rows that
          are selected. You can simulate row-level labels by adding an extra column to the table to
          store sensitivity information, and then using views to control row-level access based on
          this column. You can then grant roles access to the views rather than to the base table.
        </p>
      </body>
    </topic>
  </topic>
  <topic id="topic8" xml:lang="en">
    <title>Encrypting Data</title>
    <body>
      <p>Greenplum Database is installed with an optional module of encryption/decryption functions called
          <codeph>pgcrypto</codeph>. The <codeph>pgcrypto</codeph> functions allow database
        administrators to store certain columns of data in encrypted form. This adds an extra layer
        of protection for sensitive data, as data stored in Greenplum Database in encrypted form
        cannot be read by anyone who does not have the encryption key, nor can it be read directly
        from the disks. </p>
      <note>The <codeph>pgcrypto</codeph> functions run inside the database server, which means that
        all the data and passwords move between <codeph>pgcrypto</codeph> and the client application
        in clear-text. For optimal security, consider also using SSL connections between the client
        and the Greenplum master server.</note>
      <p>To use <codeph>pgcrypto</codeph> functions, register the <codeph>pgcrypto</codeph>
        extension in each database in which you want to use the functions. For example:
        <codeblock>$ psql -d testdb -c "CREATE EXTENSION pgcrypto"</codeblock></p>
      <p>See <xref
          href="https://www.postgresql.org/docs/9.4/pgcrypto.html"
          format="html" scope="external">pgcrypto</xref> in the PostgreSQL documentation for more
        information about individual functions.</p>
    </body>
  </topic>
  <topic id="topic9" xml:lang="en">
    <title>Protecting Passwords in Greenplum Database</title>
    <body>
      <p>In its default configuration, Greenplum Database saves MD5 hashes of login
        users' passwords in the <codeph>pg_authid</codeph> system catalog rather than saving clear
        text passwords. Anyone who is able to view the <codeph>pg_authid</codeph> table can see hash
        strings, but no passwords. This also ensures that passwords are obscured when the database
        is dumped to backup files.</p>
      <p>The hash function executes when the password is set by using any of the following
          commands:<ul id="ul_e35_rmp_pt">
          <li><codeph>CREATE USER <varname>name</varname> WITH ENCRYPTED PASSWORD
                '<varname>password</varname>'</codeph></li>
          <li><codeph>CREATE ROLE <varname>name</varname> WITH LOGIN ENCRYPTED PASSWORD
                '<varname>password</varname>'</codeph></li>
          <li><codeph>ALTER USER <varname>name</varname> WITH ENCRYPTED PASSWORD
                '<varname>password</varname>'</codeph></li>
          <li><codeph>ALTER ROLE <varname>name</varname> WITH ENCRYPTED PASSWORD
                '<varname>password</varname>'</codeph></li>
        </ul></p>
      <p>The <codeph>ENCRYPTED</codeph> keyword may be omitted when the
          <codeph>password_encryption</codeph> system configuration parameter is
        <codeph>on</codeph>, which is the default value. The <codeph>password_encryption</codeph>
        configuration parameter determines whether clear text or hashed passwords are saved when the
          <codeph>ENCRYPTED</codeph> or <codeph>UNENCRYPTED</codeph> keyword is not present in the
        command.</p>
      <note>The SQL command syntax and <codeph>password_encryption</codeph> configuration variable
        include the term <i>encrypt</i>, but the passwords are not technically encrypted. They are
          <i>hashed</i> and therefore cannot be decrypted.</note>
      <p>The hash is calculated on the concatenated clear text password and role name. The MD5 hash
        produces a 32-byte hexadecimal string prefixed with the characters <codeph>md5</codeph>. The
        hashed password is saved in the <codeph>rolpassword</codeph> column of the
          <codeph>pg_authid</codeph> system table.</p>
      <p>Although it is not recommended, passwords may be saved in clear text in the database by
        including the <codeph>UNENCRYPTED</codeph> keyword in the command or by setting the
          <codeph>password_encryption</codeph> configuration variable to <codeph>off</codeph>. Note
        that changing the configuration value has no effect on existing passwords, only newly
        created or updated passwords. </p>
      <p>To set <codeph>password_encryption</codeph> globally, execute these commands in a shell as
        the <codeph>gpadmin</codeph>
        user:<codeblock>$ gpconfig -c password_encryption -v 'off'
$ gpstop -u</codeblock></p>
      <p>To set <codeph>password_encryption</codeph> in a session, use the SQL <codeph>SET</codeph>
        command:<codeblock>=# SET password_encryption = 'on';</codeblock></p>
      <p>Passwords may be hashed using the SHA-256 hash algorithm instead of the
        default MD5 hash algorithm. The algorithm produces a 64-byte hexadecimal string prefixed
        with the characters <codeph>sha256</codeph>.</p>
      <note>
        <p>Although SHA-256 uses a stronger cryptographic algorithm and produces a longer hash
          string, it cannot be used with the MD5 authentication method. To use SHA-256 password
          hashing the authentication method must be set to <codeph>password</codeph> in the
            <codeph>pg_hba.conf</codeph> configuration file so that clear text passwords are sent to
            Greenplum Database. Because clear text passwords are sent over the
          network, it is very important to use SSL for client connections when you use SHA-256. The
          default <codeph>md5</codeph> authentication method, on the other hand, hashes the password
          twice before sending it to Greenplum Database, once on the password and role
          name and then again with a salt value shared between the client and server, so the clear
          text password is never sent on the network. </p>
      </note>
      <p>To enable SHA-256 hashing, change the <codeph>password_hash_algorithm</codeph>
        configuration parameter from its default value, <codeph>md5</codeph>, to
          <codeph>sha-256</codeph>. The parameter can be set either
        globally or at the session level. To set <codeph>password_hash_algorithm</codeph> globally,
        execute these commands in a shell as the <codeph>gpadmin</codeph>
        user:<codeblock>$ gpconfig -c password_hash_algorithm -v 'sha-256'
$ gpstop -u</codeblock></p>
      <p>To set <codeph>password_hash_algorithm</codeph> in a session, use the SQL
          <codeph>SET</codeph>
        command:<codeblock>=# SET password_hash_algorithm = 'sha-256';</codeblock></p>
    </body>
  </topic>
  <topic id="topic13" xml:lang="en">
    <title id="iq146691">Time-based Authentication</title>
    <body>
      <p>Greenplum Database enables the administrator to restrict access to certain
        times by role. Use the <codeph>CREATE ROLE</codeph> or <codeph>ALTER ROLE</codeph> commands
        to specify time-based constraints. </p>
      <p>For details, refer to the <i>Greenplum Database Security Configuration
          Guide</i>.</p>
    </body>
  </topic>
</topic>
