<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1">
  <title id="kb137116">psql</title>
  <body>
    <p id="client_util_desc">Interactive command-line interface for Greenplum Database</p>
    <section id="section2">
      <title>Synopsis</title>
      <codeblock id="client_util_synopsis"><b>psql</b> [<varname>option</varname> ...] [<varname>dbname</varname> [<varname>username</varname>]]</codeblock>
    </section>
    <section id="section3">
      <title>Description</title>
      <p><codeph>psql</codeph> is a terminal-based front-end to Greenplum Database. It enables you
        to type in queries interactively, issue them to Greenplum Database, and see the query
        results. Alternatively, input can be from a file. In addition, it provides a number of
        meta-commands and various shell-like features to facilitate writing scripts and automating a
        wide variety of tasks.</p>
    </section>
    <section id="section4">
      <title>Options</title>
      <parml>
        <plentry>
          <pt>-a | --echo-all</pt>
          <pd>Print all nonempty input lines to standard output as they are read. (This does not
            apply to lines read interactively.) This is equivalent to setting the variable
              <varname>ECHO</varname> to <codeph>all</codeph>. </pd>
        </plentry>
        <plentry>
          <pt>-A | --no-align</pt>
          <pd>Switches to unaligned output mode. (The default output mode is aligned.) </pd>
        </plentry>
        <plentry>
          <pt>-c '<varname>command</varname>' | --command='<varname>command'</varname></pt>
          <pd>Specifies that <codeph>psql</codeph> is to execute the specified command string, and
            then exit. This is useful in shell scripts. <varname>command</varname> must be either a
            command string that is completely parseable by the server, or a single backslash
            command. Thus you cannot mix SQL and <codeph>psql</codeph> meta-commands with this
            option. To achieve that, you could pipe the string into <codeph>psql</codeph>, like
            this:<codeblock>echo '\x \\ SELECT * FROM foo;' | psql</codeblock></pd>
          <pd>(<codeph>\\</codeph> is the separator meta-command.) </pd>
          <pd>If the command string contains multiple SQL commands, they are processed in a single
            transaction, unless there are explicit <codeph>BEGIN/COMMIT</codeph> commands included
            in the string to divide it into multiple transactions. This is different from the
            behavior when the same string is fed to <codeph>psql</codeph>'s standard input. Also,
            only the result of the last SQL command is returned.</pd>
        </plentry>
        <plentry>
          <pt>-d <varname>dbname</varname> | --dbname=<varname>dbname</varname></pt>
          <pd>Specifies the name of the database to connect to. This is equivalent to specifying
            dbname as the first non-option argument on the command line.</pd>
          <pd>If this parameter contains an <codeph>=</codeph> sign or starts with a valid URI
            prefix (<codeph>postgresql://</codeph> or <codeph>postgres://</codeph>), it is treated
            as a <codeph>conninfo</codeph> string. See <xref
              href="https://www.postgresql.org/docs/9.4/libpq-connect.html#LIBPQ-CONNSTRING"
              format="html" scope="external">Connection Strings</xref> in the PostgreSQL
            documentation for more information.</pd>
        </plentry>
        <plentry>
          <pt>-e | --echo-queries</pt>
          <pd>Copy all SQL commands sent to the server to standard output as well.</pd>
        </plentry>
        <plentry>
          <pt>-E | --echo-hidden</pt>
          <pd>Echo the actual queries generated by <codeph>\d</codeph> and other backslash commands.
            You can use this to study <codeph>psql</codeph>'s internal operations. This is
            equivalent to setting the variable <varname>ECHO_HIDDEN</varname> to
            <codeph>on</codeph>.</pd>
        </plentry>
        <plentry>
          <pt>-f <varname>filename</varname> | --file=<varname>filename</varname></pt>
          <pd>Use the file <varname>filename</varname> as the source of commands instead of reading
            commands interactively. After the file is processed, <codeph>psql</codeph> terminates.
            This is in many ways equivalent to the meta-command <codeph>\i</codeph>.</pd>
          <pd>If filename is <codeph>-</codeph> (hyphen), then standard input is read until an EOF
            indication or <codeph>\q</codeph> meta-command. Note however that Readline is not used
            in this case (much as if <codeph>-n</codeph> had been specified). </pd>
          <pd>Using this option is subtly different from writing <codeph>psql &lt;
                <varname>filename</varname></codeph>. In general, both will do what you expect, but
            using <codeph>-f</codeph> enables some nice features such as error messages with line
            numbers. There is also a slight chance that using this option will reduce the start-up
            overhead. On the other hand, the variant using the shell's input redirection is (in
            theory) guaranteed to yield exactly the same output you would have received had you
            entered everything by hand.</pd>
        </plentry>
        <plentry>
          <pt>-F <varname>separator</varname> | --field-separator=<varname>separator</varname></pt>
          <pd>Use the specified separator as the field separator for unaligned output. </pd>
        </plentry>
        <plentry>
          <pt>-H | --html</pt>
          <pd>Turn on HTML tabular output.</pd>
        </plentry>
        <plentry>
          <pt>-l | --list</pt>
          <pd>List all available databases, then exit. Other non-connection options are
            ignored.</pd>
        </plentry>
        <plentry>
          <pt>-L <varname>filename</varname> | --log-file=<varname>filename</varname></pt>
          <pd>Write all query output into the specified log file, in addition to the normal output
            destination.</pd>
        </plentry>
        <plentry>
          <pt>-n | --no-readline</pt>
          <pd>Do not use Readline for line editing and do not use the command history. This can be
            useful to turn off tab expansion when cutting and pasting. </pd>
        </plentry>
        <plentry>
          <pt>-o <varname>filename</varname> | --output=<varname>filename</varname></pt>
          <pd>Put all query output into the specified file.</pd>
        </plentry>
        <plentry>
          <pt>-P <varname>assignment</varname> | --pset=<varname>assignment</varname></pt>
          <pd>Allows you to specify printing options in the style of <codeph>\pset</codeph> on the
            command line. Note that here you have to separate name and value with an equal sign
            instead of a space. Thus to set the output format to <codeph>LaTeX</codeph>, you could
            write <codeph>-P format=latex</codeph>. </pd>
        </plentry>
        <plentry>
          <pt>-q | --quiet</pt>
          <pd>Specifies that <codeph>psql</codeph> should do its work quietly. By default, it prints
            welcome messages and various informational output. If this option is used, none of this
            happens. This is useful with the <codeph>-c</codeph> option. This is equivalent to
            setting the variable <varname>QUIET</varname> to <codeph>on</codeph>.</pd>
        </plentry>
        <plentry>
          <pt>-R <varname>separator</varname> | --record-separator=<varname>separator</varname></pt>
          <pd>Use <varname>separator</varname> as the record separator for unaligned output.</pd>
        </plentry>
        <plentry>
          <pt>-s | --single-step</pt>
          <pd>Run in single-step mode. That means the user is prompted before each command is sent
            to the server, with the option to cancel execution as well. Use this to debug scripts.
          </pd>
        </plentry>
        <plentry>
          <pt>-S | --single-line</pt>
          <pd>Runs in single-line mode where a new line terminates an SQL command, as a semicolon
            does.</pd>
        </plentry>
        <plentry>
          <pt>-t | --tuples-only</pt>
          <pd>Turn off printing of column names and result row count footers, etc. This command is
            equivalent to <codeph>\pset tuples_only</codeph> and is provided for convenience. </pd>
        </plentry>
        <plentry>
          <pt>-T <varname>table_options</varname> | --table-attr=
            <varname>table_options</varname></pt>
          <pd>Allows you to specify options to be placed within the HTML table tag. See
              <codeph>\pset</codeph> for details. </pd>
        </plentry>
        <plentry>
          <pt>-v <varname>assignment</varname> | --set=<varname>assignment</varname> | --variable=
              <varname>assignment</varname></pt>
          <pd>Perform a variable assignment, like the <codeph>\set</codeph> meta command. Note that
            you must separate name and value, if any, by an equal sign on the command line. To unset
            a variable, leave off the equal sign. To set a variable with an empty value, use the
            equal sign but leave off the value. These assignments are done during a very early stage
            of start-up, so variables reserved for internal purposes might get overwritten
            later.</pd>
        </plentry>
        <plentry>
          <pt>-V | --version</pt>
          <pd>Print the <codeph>psql</codeph> version and exit. </pd>
        </plentry>
        <plentry>
          <pt>-x | --expanded</pt>
          <pd>Turn on the expanded table formatting mode.</pd>
        </plentry>
        <plentry>
          <pt>-X | --no-psqlrc</pt>
          <pd>Do not read the start-up file (neither the system-wide <codeph>psqlrc</codeph> file
            nor the user's <codeph>~/.psqlrc</codeph> file). </pd>
        </plentry>
        <plentry>
          <pt>-z | --field-separator-zero</pt>
          <pd>Set the field separator for unaligned output to a zero byte.</pd>
        </plentry>
        <plentry>
          <pt>-0 | --record-separator-zero</pt>
          <pd>Set the record separator for unaligned output to a zero byte. This is useful for
            interfacing, for example, with <codeph>xargs -0</codeph>.</pd>
        </plentry>
        <plentry>
          <pt>-1 | --single-transaction</pt>
          <pd>When <codeph>psql</codeph> executes a script, adding this option wraps
              <codeph>BEGIN</codeph>/<codeph>COMMIT</codeph> around the script to execute it as a
            single transaction. This ensures that either all the commands complete successfully, or
            no changes are applied.</pd>
          <pd>If the script itself uses <codeph>BEGIN</codeph>, <codeph>COMMIT</codeph>, or
              <codeph>ROLLBACK</codeph>, this option will not have the desired effects. Also, if the
            script contains any command that cannot be executed inside a transaction block,
            specifying this option will cause that command (and hence the whole transaction) to
            fail.</pd>
        </plentry>
        <plentry>
          <pt>-? | --help</pt>
          <pd>Show help about <codeph>psql</codeph> command line arguments, and exit. </pd>
        </plentry>
      </parml>
      <sectiondiv id="section5">
        <b>Connection Options</b>
        <parml>
          <plentry>
            <pt>-h <varname>host</varname> | --host=<varname>host</varname></pt>
            <pd>The host name of the machine on which the Greenplum master database server is
              running. If not specified, reads from the environment variable <codeph>PGHOST</codeph>
              or defaults to localhost.</pd>
            <pd>When starting <codeph>psql</codeph> on the master host, if the
                <varname>host</varname> value begins with a slash, it is used as the directory for
              the UNIX-domain socket.</pd>
          </plentry>
          <plentry>
            <pt>-p <varname>port</varname> | --port=<varname>port</varname></pt>
            <pd>The TCP port on which the Greenplum master database server is listening for
              connections. If not specified, reads from the environment variable
                <codeph>PGPORT</codeph> or defaults to 5432.</pd>
          </plentry>
          <plentry>
            <pt>-U <varname>username</varname> | --username=<varname>username</varname></pt>
            <pd>The database role name to connect as. If not specified, reads from the environment
              variable <codeph>PGUSER</codeph> or defaults to the current system role name.</pd>
          </plentry>
          <plentry>
            <pt>-W | --password</pt>
            <pd>Force a password prompt. <codeph>psql</codeph> should automatically prompt for a
              password whenever the server requests password authentication. However, currently
              password request detection is not totally reliable, hence this option to force a
              prompt. If no password prompt is issued and the server requires password
              authentication, the connection attempt will fail.</pd>
          </plentry>
          <plentry>
            <pt>-w --no-password</pt>
            <pd>Never issue a password prompt. If the server requires password authentication and a
              password is not available by other means such as a .pgpass file, the connection
              attempt will fail. This option can be useful in batch jobs and scripts where no user
              is present to enter a password. </pd>
            <pd><b>Note:</b> This option remains set for the entire session, and so it affects uses
              of the meta-command <codeph>\connect</codeph> as well as the initial connection
              attempt. </pd>
          </plentry>
        </parml>
      </sectiondiv>
    </section>
    <section id="section6">
      <title>Exit Status</title>
      <p><codeph>psql</codeph> returns 0 to the shell if it finished normally, 1 if a fatal error of
        its own (out of memory, file not found) occurs, 2 if the connection to the server went bad
        and the session was not interactive, and 3 if an error occurred in a script and the variable
          <codeph>ON_ERROR_STOP</codeph> was set.</p>
    </section>
    <section id="section7">
      <title>Usage</title>
      <sectiondiv id="section8">
        <b>Connecting to a Database</b>
        <p><codeph>psql</codeph> is a client application for Greenplum Database. In order to connect
          to a database you need to know the name of your target database, the host name and port
          number of the Greenplum master server and what database user name you want to connect as.
            <codeph>psql</codeph> can be told about those parameters via command line options,
          namely <codeph>-d</codeph>, <codeph>-h</codeph>, <codeph>-p</codeph>, and
            <codeph>-U</codeph> respectively. If an argument is found that does not belong to any
          option it will be interpreted as the database name (or the user name, if the database name
          is already given). Not all of these options are required; there are useful defaults. If
          you omit the host name, <codeph>psql</codeph> will connect via a UNIX-domain socket to a
          master server on the local host, or via TCP/IP to <codeph>localhost</codeph> on machines
          that do not have UNIX-domain sockets. The default master port number is 5432. If you use a
          different port for the master, you must specify the port. The default database user name
          is your operating-system user name, as is the default database name. Note that you cannot
          just connect to any database under any user name. Your database administrator should have
          informed you about your access rights.</p>
        <p>When the defaults are not right, you can save yourself some typing by setting any or all
          of the environment variables <codeph>PGAPPNAME</codeph>, <codeph>PGDATABASE</codeph>,
            <codeph>PGHOST</codeph>, <codeph>PGPORT</codeph>, and <codeph>PGUSER</codeph> to
          appropriate values. </p><p>It is also convenient to have a <codeph>~/.pgpass</codeph> file
          to avoid regularly having to type in passwords. This file should reside in your home
          directory and contain lines of the following format:</p><codeblock><varname>hostname</varname>:<varname>port</varname>:<varname>database</varname>:<varname>username</varname>:<varname>password</varname></codeblock>
        <p>The permissions on <codeph>.pgpass</codeph> must disallow any access to world or group
          (for example: <codeph>chmod 0600 ~/.pgpass</codeph>). If the permissions are less strict
          than this, the file will be ignored. (The file permissions are not currently checked on
          Microsoft Windows clients, however.)</p>
        <p>An alternative way to specify connection parameters is in a <codeph>conninfo</codeph>
          string or a URI, which is used instead of a database name. This mechanism gives you very
          wide control over the connection. For
          example:</p><codeblock>$ psql "service=myservice sslmode=require"
$ psql postgresql://gpmaster:5433/mydb?sslmode=require</codeblock><p>This
          way you can also use LDAP for connection parameter lookup as described in <xref
            href="https://www.postgresql.org/docs/9.4/libpq-ldap.html" format="html"
            scope="external">LDAP Lookup of Connection Parameters</xref> in the PostgreSQL
          documentation. See <xref
            href="https://www.postgresql.org/docs/9.4/libpq-connect.html#LIBPQ-PARAMKEYWORDS"
            format="html" scope="external">Parameter Keywords</xref> in the PostgreSQL documentation
          for more information on all the available connection options.</p><p>If the connection
          could not be made for any reason (insufficient privileges, server is not running, etc.),
            <codeph>psql</codeph> will return an error and terminate.</p>
        <p>If at least one of standard input or standard output are a terminal, then
            <codeph>psql</codeph> sets the client encoding to <codeph>auto</codeph>, which will
          detect the appropriate client encoding from the locale settings (<codeph>LC_CTYPE</codeph>
          environment variable on Unix systems). If this doesn't work out as expected, the client
          encoding can be overridden using the environment variable
            <codeph>PGCLIENTENCODING</codeph>.</p>
      </sectiondiv>
      <sectiondiv id="section9">
        <b>Entering SQL Commands</b>
        <p>In normal operation, <codeph>psql</codeph> provides a prompt with the name of the
          database to which <codeph>psql</codeph> is currently connected, followed by the string
            <b>=&gt;</b> for a regular user or <b>=#</b> for a superuser. For example:</p>
        <codeblock>testdb=&gt;
testdb=#</codeblock>
        <p>At the prompt, the user may type in SQL commands. Ordinarily, input lines are sent to the
          server when a command-terminating semicolon is reached. An end of line does not terminate
          a command. Thus commands can be spread over several lines for clarity. If the command was
          sent and executed without error, the results of the command are displayed on the
          screen.</p>
        <p>If untrusted users have access to a database that has not adopted a <xref
            href="https://www.postgresql.org/docs/9.4/ddl-schemas.html#DDL-SCHEMAS-PATTERNS"
            scope="external" format="html">secure schema usage pattern</xref>, begin your session by
          removing publicly-writable schemas from <varname>search_path</varname>. You can add
            <codeph>options=-csearch_path=</codeph> to the connection string or issue
            <codeph>SELECT pg_catalog.set_config('search_path', '', false)</codeph> before other
          SQL commands. This consideration is not specific to <codeph>psql</codeph>; it
          applies to every interface for executing arbitrary SQL commands. </p>
      </sectiondiv>
    </section>
    <section id="section10">
      <title>Meta-Commands</title>
      <p>Anything you enter in <codeph>psql</codeph> that begins with an unquoted backslash is a
          <codeph>psql</codeph> meta-command that is processed by <codeph>psql</codeph> itself.
        These commands help make <codeph>psql</codeph> more useful for administration or scripting.
        Meta-commands are more commonly called slash or backslash commands. </p>
      <p>The format of a <codeph>psql</codeph> command is the backslash, followed immediately by a
        command verb, then any arguments. The arguments are separated from the command verb and each
        other by any number of whitespace characters.</p>
      <p>To include whitespace into an argument you may quote it with single quotes. To include a
        single quote into such an argument, write two single quotes within single-quoted text.
        Anything contained in single quotes is furthermore subject to C-like substitutions for
          <codeph>\n</codeph> (new line), <codeph>\t</codeph> (tab), <codeph>\b</codeph>
        (backspace), <codeph>\r</codeph> (carriage return), <codeph>\f</codeph> (form feed),
          <codeph>\digits</codeph> (octal), and <codeph>\xdigits</codeph> (hexadecimal). A backslash
        preceding any other character within single-quoted text quotes that single character,
        whatever it is.</p>
      <p>Within an argument, text that is enclosed in backquotes (<codeph>`</codeph>) is taken as a
        command line that is passed to the shell. The output of the command (with any trailing
        newline removed) replaces the backquoted text.</p>
      <p>If an unquoted colon (<codeph>:</codeph>) followed by a <codeph>psql</codeph> variable name
        appears within an argument, it is replaced by the variable's value, as described in <xref
          href="#topic1/section14" format="dita">SQL Interpolation</xref>. </p>
      <p>Some commands take an SQL identifier (such as a table name) as argument. These arguments
        follow the syntax rules of SQL: Unquoted letters are forced to lowercase, while double
        quotes (<codeph>"</codeph>) protect letters from case conversion and allow incorporation of
        whitespace into the identifier. Within double quotes, paired double quotes reduce to a
        single double quote in the resulting name. For example, <codeph>FOO"BAR"BAZ</codeph> is
        interpreted as <codeph>fooBARbaz</codeph>, and <codeph>"A weird"" name"</codeph> becomes
          <codeph>A weird" name</codeph>. </p>
      <p>Parsing for arguments stops when another unquoted backslash occurs. This is taken as the
        beginning of a new meta-command. The special sequence <codeph>\\</codeph> (two backslashes)
        marks the end of arguments and continues parsing SQL commands, if any. That way SQL and
          <codeph>psql</codeph> commands can be freely mixed on a line. But in any case, the
        arguments of a meta-command cannot continue beyond the end of the line.</p>
      <p>The following meta-commands are defined:</p>
      <parml>
        <plentry>
          <pt>\a</pt>
          <pd>If the current table output format is unaligned, it is switched to aligned. If it is
            not unaligned, it is set to unaligned. This command is kept for backwards compatibility.
            See <codeph>\pset</codeph> for a more general solution. </pd>
        </plentry>
        <plentry>
          <pt>\c | \connect [<varname>dbname</varname> [<varname>username</varname>]
              [<varname>host</varname>] [<varname>port</varname>]] |
            <varname>conninfo</varname></pt>
          <pd>Establishes a new Greenplum Database connection. The connection parameters to use can
            be specified either using a positional syntax, or using <codeph>conninfo</codeph>
            connection strings as detailed in <xref
              href="https://www.postgresql.org/docs/9.4/libpq-connect.html#LIBPQ-CONNSTRING"
              scope="external" format="html">libpq Connection Strings</xref>. </pd>
          <pd>Where the command omits database name, user, host, or port, the new connection can
            reuse values from the previous connection. By default, values from the previous
            connection are reused except when processing a <codeph>conninfo</codeph> string. Passing
            a first argument of <codeph>-reuse-previous=on</codeph> or
              <codeph>-reuse-previous=off</codeph> overrides that default. When the command neither
            specifies nor reuses a particular parameter, the <codeph>libpq</codeph> default is used.
            Specifying any of <varname>dbname</varname>, <varname>username</varname>,
              <varname>host</varname> or <varname>port</varname> as <codeph>-</codeph> is equivalent
            to omitting that parameter. </pd>
          <pd> If the new connection is successfully made, the previous connection is closed. 
            If the connection attempt failed, the previous connection
            will only be kept if <codeph>psql</codeph> is in interactive mode. When executing a
            non-interactive script, processing will immediately stop with an error. This distinction
            was chosen as a user convenience against typos, and a safety mechanism that scripts are
            not accidentally acting on the wrong database.</pd>
          <pd>Examples:<codeblock>=&gt; \c mydb myuser host.dom 6432
=&gt; \c service=foo
=&gt; \c "host=localhost port=5432 dbname=mydb connect_timeout=10 sslmode=disable"
=&gt; \c postgresql://tom@localhost/mydb?application_name=myapp</codeblock></pd>
        </plentry>
        <plentry>
          <pt>\C [<varname>title</varname>]</pt>
          <pd>Sets the title of any tables being printed as the result of a query or unset any such
            title. This command is equivalent to <codeph>\pset title</codeph>.</pd>
        </plentry>
        <plentry>
          <pt>\cd [<varname>directory</varname>]</pt>
          <pd>Changes the current working directory. Without argument, changes to the current user's
            home directory. To print your current working directory, use <codeph>\!pwd</codeph>.
          </pd>
        </plentry>
        <plentry>
          <pt>\conninfo</pt>
          <pd>Displays information about the current connection including the database name, the
            user name, the type of connection (UNIX domain socket, <codeph>TCP/IP</codeph>, etc.),
            the host, and the port.</pd>
        </plentry>
        <plentry>
          <pt>\copy {<varname>table</varname> [(<varname>column_list</varname>)] |
              (<varname>query</varname>)} {from | to} {'<varname>filename</varname>' | program
              '<varname>command</varname>' | stdin | stdout | pstdin | pstdout} [with]
              (<varname>option</varname> [, ...]) ]</pt>
          <pd>Performs a frontend (client) copy. This is an operation that runs an SQL <codeph><xref
                href="../../ref_guide/sql_commands/COPY.xml#topic1"/></codeph> command, but instead
            of the server reading or writing the specified file, <codeph>psql</codeph> reads or
            writes the file and routes the data between the server and the local file system. This
            means that file accessibility and privileges are those of the local user, not the
            server, and no SQL superuser privileges are required.</pd>
          <pd>When <codeph>program</codeph> is specified, <varname>command</varname> is executed by
              <codeph>psql</codeph> and the data from or to <varname>command</varname> is routed
            between the server and the client. This means that the execution privileges are those of
            the local user, not the server, and no SQL superuser privileges are required.</pd>
          <pd><codeph>\copy ... from stdin | to stdout</codeph> reads/writes based on the command
            input and output respectively. All rows are read from the same source that issued the
            command, continuing until <codeph>\.</codeph> is read or the stream reaches
              <codeph>EOF</codeph>. Output is sent to the same place as command output. To
            read/write from <codeph>psql</codeph>'s standard input or output, use
              <codeph>pstdin</codeph> or <codeph>pstdout</codeph>. This option is useful for
            populating tables in-line within a SQL script file.</pd>
          <pd>The syntax of the command is similar to that of the SQL <codeph><xref
                href="../../ref_guide/sql_commands/COPY.xml#topic1"/></codeph> command, and
              <varname>option</varname> must indicate one of the options of the SQL
              <codeph>COPY</codeph> command. Note that, because of this, special parsing rules apply
            to the <codeph>\copy</codeph> command. In particular, the variable substitution rules
            and backslash escapes do not apply. </pd>
          <pd>This operation is not as efficient as the SQL <codeph>COPY</codeph> command because
            all data must pass through the client/server connection.</pd>
        </plentry>
        <plentry>
          <pt>\copyright</pt>
          <pd>Shows the copyright and distribution terms of PostgreSQL on which Greenplum Database
            is based. </pd>
        </plentry>
        <plentry>
          <pt>\d [<varname>relation_pattern</varname>]  | \d+ [<varname>relation_pattern</varname>]
            | \dS [<varname>relation_pattern</varname>]</pt>
          <pd>For each relation (table, external table, view, index, sequence, or foreign table) or
            composite type matching the relation pattern, show all columns, their types, the
            tablespace (if not the default) and any special attributes such as <codeph>NOT
              NULL</codeph> or defaults. Associated indexes, constraints, rules, and triggers are
            also shown. For foreign tables, the associated foreign server is shown as well.<ul
              id="ul_qda_zxh_no">
              <li>For some types of relation, <codeph>\d</codeph> shows additional information for
                each column: column values for sequences, indexed expressions for indexes, and
                foreign data wrapper options for foreign tables.</li>
              <li id="kb143931">The command form <codeph>\d+</codeph> is identical, except that more
                information is displayed: any comments associated with the columns of the table are
                shown, as is the presence of OIDs in the table, the view definition if the relation
                is a view.<p>For partitioned tables, the command <codeph>\d</codeph> or
                    <codeph>\d+</codeph> specified with the root partition table or child partition
                  table displays information about the table including partition keys on the current
                  level of the partition table. The command <codeph>\d+</codeph> also displays the
                  immediate child partitions of the table and whether the child partition is an
                  external table or regular table. </p><p>For append-optimized tables and
                  column-oriented tables, <codeph>\d+</codeph> displays the storage options for a
                  table. For append-optimized tables, the options are displayed for the table. For
                  column-oriented tables, storage options are displayed for each column. </p></li>
              <li id="kb151095">By default, only user-created objects are shown; supply a pattern or
                the <codeph>S</codeph> modifier to include system objects. <note>If
                    <codeph>\d</codeph> is used without a pattern argument, it is equivalent to
                    <codeph>\dtvsE</codeph> which will show a list of all visible tables, views,
                  sequences, and foreign tables.</note></li>
            </ul></pd>
        </plentry>
        <plentry>
          <pt>\da[S] [<varname>aggregate_pattern</varname>]</pt>
          <pd>Lists aggregate functions, together with the data types they operate on. If a pattern
            is specified, only aggregates whose names match the pattern are shown. By default, only
            user-created objects are shown; supply a pattern or the <codeph>S</codeph> modifier to
            include system objects. </pd>
        </plentry>
        <plentry>
          <pt>\db[+] [<varname>tablespace_pattern</varname>]</pt>
          <pd>Lists all available tablespaces and their corresponding paths. If pattern is
            specified, only tablespaces whose names match the pattern are shown. If + is appended to
            the command name, each object is listed with its associated permissions. </pd>
        </plentry>
        <plentry>
          <pt>\dc[S+] [<varname>conversion_pattern</varname>]</pt>
          <pd>Lists conversions between character-set encodings. If a pattern is specified, only
            conversions whose names match the pattern are listed. By default, only user-created
            objects are shown; supply a pattern or the <codeph>S</codeph> modifier to include system
            objects. If <codeph>+</codeph> is appended to the command name, each object is listed
            with its associated description.</pd>
        </plentry>
        <plentry>
          <pt>\dC[+] [<varname>pattern</varname>]</pt>
          <pd>Lists type casts. If a pattern is specified, only casts whose source or target types
            match the pattern are listed. If <codeph>+</codeph> is appended to the command name,
            each object is listed with its associated description.</pd>
        </plentry>
        <plentry>
          <pt>\dd[S] [<varname>pattern</varname>]</pt>
          <pd>Shows the descriptions of objects of type <codeph>constraint</codeph>,
              <codeph>operator class</codeph>, <codeph>operator family</codeph>,
              <codeph>rule</codeph>, and <codeph>trigger</codeph>. All other comments may be viewed
            by the respective backslash commands for those object types. </pd>
          <pd><codeph>\dd</codeph> displays descriptions for objects matching the pattern, or of
            visible objects of the appropriate type if no argument is given. But in either case,
            only objects that have a description are listed. By default, only user-created objects
            are shown; supply a pattern or the <codeph>S</codeph> modifier to include system
            objects. </pd>
          <pd>Descriptions for objects can be created with the <codeph>COMMENT</codeph> SQL
            command.</pd>
        </plentry>
        <plentry>
          <pt>\ddp [<varname>pattern</varname>]</pt>
          <pd> Lists default access privilege settings. An entry is shown for each role (and schema,
            if applicable) for which the default privilege settings have been changed from the
            built-in defaults. If <varname>pattern</varname> is specified, only entries whose role
            name or schema name matches the pattern are listed. </pd>
          <pd>The <xref href="../../ref_guide/sql_commands/ALTER_DEFAULT_PRIVILEGES.xml#topic1"
              >ALTER DEFAULT PRIVILEGES</xref> command is used to set default access privileges. The
            meaning of the privilege display is explained under <xref
              href="../../ref_guide/sql_commands/GRANT.xml#topic1">GRANT</xref>. </pd>
        </plentry>
        <plentry>
          <pt>\dD[S+] [<varname>domain_pattern</varname>]</pt>
          <pd>Lists domains. If a pattern is specified, only domains whose names match the pattern
            are shown. By default, only user-created objects are shown; supply a pattern or the
              <codeph>S</codeph> modifier to include system objects. If <codeph>+</codeph> is
            appended to the command name, each object is listed with its associated permissions and
            description.</pd>
        </plentry>
        <plentry>
          <pt>\dEistPv[S+] [<varname>external_table | index | sequence | table | parent table |
              view</varname>] </pt>
          <pd>This is not the actual command name: the letters <codeph>E</codeph>,
              <codeph>i</codeph>, <codeph>s</codeph>, <codeph>t</codeph>, <codeph>P</codeph>, and
              <codeph>v</codeph> stand for external table, index, sequence, table, parent table, and
            view, respectively. You can specify any or all of these letters, in any order, to obtain
            a listing of objects of these types. For example, <codeph>\dit</codeph> lists indexes
            and tables. If <codeph>+</codeph> is appended to the command name, each object is listed
            with its physical size on disk and its associated description, if any. If a pattern is
            specified, only objects whose names match the pattern are listed. By default, only
            user-created objects are shown; supply a pattern or the <codeph>S</codeph> modifier to
            include system objects.</pd>
        </plentry>
        <plentry>
          <pt>\des[+] [<varname>foreign_server_pattern</varname>] </pt>
          <pd>Lists foreign servers. If a pattern is specified, only those servers whose name
            matches the pattern are listed. If the form <codeph>\des+</codeph> is used, a full
            description of each server is shown, including the server's ACL, type, version, options,
            and description.</pd>
        </plentry>
        <plentry>
          <pt>\det[+] [<varname>foreign_table_pattern</varname>] </pt>
          <pd>Lists all foreign tables. If a pattern is specified, only entries whose table name or
            schema name matches the pattern are listed. If the form <codeph>\det+</codeph> is used,
            generic options and the foreign table description are also displayed.</pd>
        </plentry>
        <plentry>
          <pt>\deu[+] [<varname>user_mapping_pattern</varname>] </pt>
          <pd>Lists user mappings. If a pattern is specified, only those mappings whose user names
            match the pattern are listed. If the form <codeph>\deu+</codeph> is used, additional
            information about each mapping is shown.<note type="warning">
              <codeph>\deu+</codeph> might also display the user name and password of the remote
              user, so care should be taken not to disclose them.</note></pd>
        </plentry>
        <plentry>
          <pt>\dew[+] [<varname>foreign_data_wrapper_pattern</varname>] </pt>
          <pd>Lists foreign-data wrappers. If a pattern is specified, only those foriegn-data
            wrappers whose name matches the pattern are listed. If the form <codeph>\dew+</codeph>
            is used, the ACL, options, and description of the foreign-data wrapper are also
            shown.</pd>
        </plentry>
        <plentry>
          <pt>\df[antwS+] [<varname>function_pattern</varname>]</pt>
          <pd>Lists functions, together with their arguments, return types, and function types,
            which are classified as "agg" (aggregate), "normal", "trigger", or "window". To display
            only functions of a specific type(s), add the corresponding letters <codeph>a</codeph>,
              <codeph>n</codeph>, <codeph>t</codeph>, or <codeph>w</codeph>, to the command. If a
            pattern is specified, only functions whose names match the pattern are shown. If the
            form <codeph>\df+</codeph> is used, additional information about each function,
            including security, volatility, language, source code, and description, is shown. By
            default, only user-created objects are shown; supply a pattern or the <codeph>S</codeph>
            modifier to include system objects.</pd>
        </plentry>
        <plentry>
          <pt>\dF[+] [<varname>pattern</varname>] </pt>
          <pd>Lists text search configurations. If a pattern is specified, only configurations whose
            names match the pattern are shown. If the form <codeph>\dF+</codeph> is used, a full
            description of each configuration is shown, including the underlying text search parser
            and the dictionary list for each parser token type.</pd>
        </plentry>
        <plentry>
          <pt>\dFd[+] [<varname>pattern</varname>] </pt>
          <pd>Lists text search dictionaries. If a pattern is specified, only dictionaries whose
            names match the pattern are shown. If the form <codeph>\dFd+</codeph> is used,
            additional information is shown about each selected dictionary, including the underlying
            text search template and the option values.</pd>
        </plentry>
        <plentry>
          <pt>\dFp[+] [<varname>pattern</varname>] </pt>
          <pd>Lists text search parsers. If a pattern is specified, only parsers whose names match
            the pattern are shown. If the form <codeph>\dFp+</codeph> is used, a full description of
            each parser is shown, including the underlying functions and the list of recognized
            token types.</pd>
        </plentry>
        <plentry>
          <pt>\dFt[+] [<varname>pattern</varname>] </pt>
          <pd>Lists text search templates. If a pattern is specified, only templates whose names
            match the pattern are shown. If the form <codeph>\dFt+</codeph> is used, additional
            information is shown about each template, including the underlying function names.</pd>
        </plentry>
        <plentry>
          <pt>\dg[+] [<varname>role_pattern</varname>]</pt>
          <pd>Lists database roles. (Since the concepts of "users" and "groups" have been unified
            into "roles", this command is now equivalent to <codeph>\du</codeph>.) If a pattern is
            specified, only those roles whose names match the pattern are listed. If the form
              <codeph>\dg+</codeph> is used, additional information is shown about each role;
            currently this adds the comment for each role. </pd>
        </plentry>
        <plentry>
          <pt>\dl</pt>
          <pd>This is an alias for <codeph>\lo_list</codeph>, which shows a list of large
            objects.</pd>
          <pd>
            <note>Greenplum Database does not support the PostgreSQL <xref
                href="https://www.postgresql.org/docs/9.4/largeobjects.html" format="html"
                scope="external">large object facility</xref> for streaming user data that is stored
              in large-object structures.</note>
          </pd>
        </plentry>
        <plentry>
          <pt>\dL[S+] [<varname>pattern</varname>]</pt>
          <pd>Lists procedural languages. If a pattern is specified, only languages whose names
            match the pattern are listed. By default, only user-created languages are shown; supply
            the <codeph>S</codeph> modifier to include system objects. If <codeph>+</codeph> is
            appended to the command name, each language is listed with its call handler, validator,
            access privileges, and whether it is a system object.</pd>
        </plentry>
        <plentry>
          <pt>\dn[S+] [<varname>schema_pattern</varname>]</pt>
          <pd>Lists all available schemas (namespaces). If a pattern is specified, only schemas
            whose names match the pattern are listed. By default, only user- create objects are
            show; supply a pattern or the <codeph>S</codeph> modifier to include system objects. If
              <codeph>+</codeph> is appended to the command name, each object is listed with its
            associated permissions and description, if any.</pd>
        </plentry>
        <plentry>
          <pt>\do[S] [<varname>operator_pattern</varname>]</pt>
          <pd>Lists available operators with their operand and return types. If a pattern is
            specified, only operators whose names match the pattern are listed. By default, only
            user-created objects are shown; supply a pattern or the <codeph>S</codeph> modifier to
            include system objects.</pd>
        </plentry>
        <plentry>
          <pt>\dO[S+] [<varname>pattern</varname>]</pt>
          <pd>Lists collations. If a pattern is specified, only collations whose names match the
            pattern are listed. By default, only user-created objects are shown; supply a pattern or
            the <codeph>S</codeph> modifier to include system objects. If <codeph>+</codeph> is
            appended to the command name, each collation is listed with its associated description,
            if any. Note that only collations usable with the current database's encoding are shown,
            so the results may vary in different databases of the same installation.</pd>
        </plentry>
        <plentry>
          <pt>\dp [<varname>relation_pattern_to_show_privileges</varname>]</pt>
          <pd>Lists tables, views, and sequences with their associated access privileges. If a
            pattern is specified, only tables, views, and sequences whose names match the pattern
            are listed. The <codeph><xref href="../../ref_guide/sql_commands/GRANT.xml#topic1"
              /></codeph> and <codeph><xref href="../../ref_guide/sql_commands/REVOKE.xml#topic1"
              /></codeph> commands are used to set access privileges. The meaning of the privilege
            display is explained under <codeph><xref
                href="../../ref_guide/sql_commands/GRANT.xml#topic1"/></codeph>.</pd>
        </plentry>
        <plentry>
          <pt>\drds [<varname>role-pattern</varname> [database-pattern]]</pt>
          <pd>Lists defined configuration settings. These settings can be role-specific,
            database-specific, or both. <varname>role-pattern</varname> and
              <varname>database-pattern</varname> are used to select specific roles and database to
            list, respectively. If omitted, or if <codeph>*</codeph> is specified, all settings are
            listed, including those not role-specific or database-specific, respectively. </pd>
          <pd>The <xref format="dita" href="../../ref_guide/sql_commands/ALTER_ROLE.xml">ALTER
              ROLE</xref> and <xref format="dita"
              href="../../ref_guide/sql_commands/ALTER_DATABASE.xml">ALTER DATABASE</xref> commands
            are used to define per-role and per-database role configuration settings. </pd>
        </plentry>
        <plentry>
          <pt>\dT[S+] [<varname>datatype_pattern</varname>]</pt>
          <pd>Lists data types. If a pattern is specified, only types whose names match the pattern
            are listed. If <codeph>+</codeph> is appended to the command name, each type is listed
            with its internal name and size, its allowed values if it is an <codeph>enum</codeph>
            type, and its associated permissions. By default, only user-created objects are shown;
            supply a pattern or the <codeph>S</codeph> modifier to include system objects.</pd>
        </plentry>
        <plentry>
          <pt>\du[+] [<varname>role_pattern</varname>]</pt>
          <pd>Lists database roles. (Since the concepts of "users" and "groups" have been unified
            into "roles", this command is now equivalent to <codeph>\dg</codeph>.) If a pattern is
            specified, only those roles whose names match the pattern are listed. If the form
              <codeph>\du+</codeph> is used, additional information is shown about each role;
            currently this adds the comment for each role.</pd>
        </plentry>
        <plentry>
          <pt>\dx[+] [<varname>extension_pattern</varname>]</pt>
          <pd>Lists installed extensions. If a pattern is specified, only those extensions whose
            names match the pattern are listed. If the form <codeph>\dx+</codeph> is used, all of
            the objects belonging to each matching extension are listed. </pd>
        </plentry>
        <plentry>
          <pt>\dy[+] [<varname>pattern</varname>]</pt>
          <pd>Lists event triggers. If a pattern is specified, only those triggers whose names match
            the pattern are listed. If <codeph>+</codeph> is appended to the command name, each
            object is listed with its associated description.</pd>
        </plentry>
        <plentry>
          <pt>\dy[+] [<varname>pattern</varname>]</pt>
          <pd>Lists event triggers. If a pattern is specified, only those triggers
            whose names match the pattern are listed. If <codeph>+</codeph> is appended
            to the command name, each object is listed with its associated description.
            <note>Greenplum Database does not support user-defined triggers.</note></pd>
        </plentry>
        <plentry>
          <pt>\e | \edit [<varname>filename</varname>] [<varname>line_number</varname>]</pt>
          <pd>If <varname>filename</varname> is specified, the file is edited; after the editor
            exits, its content is copied back to the query buffer. If no <varname>filename</varname>
            is given, the current query buffer is copied to a temporary file which is then edited in
            the same fashion. </pd>
          <pd>The new query buffer is then re-parsed according to the normal rules of
              <codeph>psql</codeph>, where the whole buffer is treated as a single line. (Thus you
            cannot make scripts this way. Use <codeph>\i</codeph> for that.) This means also that if
            the query ends with (or rather contains) a semicolon, it is immediately executed. In
            other cases it will merely wait in the query buffer; type semicolon or
              <codeph>\g</codeph> to send it, or <codeph>\r</codeph> to cancel. </pd>
          <pd>If a line number is specified, <codeph>psql</codeph> will position the cursor on the
            specified line of the file or query buffer. Note that if a single all-digits argument is
            given, <codeph>psql</codeph> assumes it is a line number, not a file name.</pd>
          <pd>See <xref href="#topic1/section17" format="dita"/> for information about configuring
            and customizing your editor.</pd>
        </plentry>
        <plentry>
          <pt>\echo <varname>text</varname> [ ... ]</pt>
          <pd>Prints the arguments to the standard output, separated by one space and followed by a
            newline. This can be useful to intersperse information in the output of scripts. If the
            first argument is an unquoted <codeph>-n</codeph>, the trailing newline is not
              written.<note>If you use the <codeph>\o</codeph> command to redirect your query output
              you might wish to use <codeph>\qecho</codeph> instead of this command.</note></pd>
        </plentry>
        <plentry>
          <pt>\ef [<varname>function_description</varname> [<varname>line_number</varname>]]</pt>
          <pd>This command fetches and edits the definition of the named function, in the form of a
              <codeph>CREATE OR REPLACE FUNCTION</codeph> command. Editing is done in the same way
            as for <codeph>\edit</codeph>. After the editor exits, the updated command waits in the
            query buffer; type semicolon or <codeph>\g</codeph> to send it, or <codeph>\r</codeph>
            to cancel.</pd>
          <pd>The target function can be specified by name alone, or by name and arguments, for
            example <codeph>foo(integer, text)</codeph>. The argument types must be given if there
            is more than one function with the same name.</pd>
          <pd>If no function is specified, a blank <codeph>CREATE FUNCTION</codeph> template is
            presented for editing.</pd>
          <pd>If a line number is specified, <codeph>psql</codeph> will position the cursor on the
            specified line of the function body. (Note that the function body typically does not
            begin on the first line of the file.)</pd>
          <pd>See <xref href="#topic1/section17" format="dita"/> for information about configuring
            and customizing your editor.</pd>
        </plentry>
        <plentry>
          <pt>\encoding [<varname>encoding</varname>]</pt>
          <pd>Sets the client character set encoding. Without an argument, this command shows the
            current encoding. </pd>
        </plentry>
        <plentry>
          <pt>\f [<varname>field_separator_string</varname>]</pt>
          <pd>Sets the field separator for unaligned query output. The default is the vertical bar
              (<codeph>|</codeph>). See also <codeph>\pset</codeph> for a generic way of setting
            output options. </pd>
        </plentry>
        <plentry>
          <pt>\g [<varname>filename</varname>] </pt>
          <pt>\g [ <codeph>|</codeph>
            <varname>command</varname> ]</pt>
          <pd>Sends the current query input buffer to the server, and optionally stores the query's
            output in <varname>filename</varname> or pipes the output to the shell command
              <varname>command</varname>. The file or command is written to only if the query
            successfully returns zero or more tuples, not if the query fails or is a
            non-data-returning SQL command.</pd>
          <pd>A bare <codeph>\g</codeph> is essentially equivalent to a semi-colon. A
              <codeph>\g</codeph> with argument is a one-shot alternative to the <codeph>\o</codeph>
            command.</pd>
        </plentry>
        <plentry>
          <pt>\gset [<varname>prefix</varname>]</pt>
          <pd>Sends the current query input buffer to the server and stores the query's output into
              <codeph>psql</codeph> variables. The query to be executed must return exactly one row.
            Each column of the row is stored into a separate variable, named the same as the column.
            For
            example:<codeblock>=&gt; SELECT 'hello' AS var1, 10 AS var2;
-&gt; \gset
=&gt; \echo :var1 :var2
hello 10
</codeblock></pd>
          <pd>If you specify a <varname>prefix</varname>, that string is prepended to the query's
            column names to create the variable names to
            use:<codeblock>=&gt; SELECT 'hello' AS var1, 10 AS var2;
-&gt; \gset result_
=&gt; \echo :result_var1 :result_var2
hello 10</codeblock></pd>
          <pd>If a column result is NULL, the corresponding variable is unset rather than being
            set.</pd>
          <pd>If the query fails or does not return one row, no variables are changed.</pd>
        </plentry>
        <plentry>
          <pt>\h | \help [<varname>sql_command</varname>]</pt>
          <pd>Gives syntax help on the specified SQL command. If a command is not specified, then
              <codeph>psql</codeph> will list all the commands for which syntax help is available.
            If <varname>command</varname> is an asterisk (<codeph>*</codeph>) then syntax help on
            all SQL commands is shown. To simplify typing, commands that consist of several words do
            not have to be quoted.</pd>
        </plentry>
        <plentry>
          <pt>\H | \html</pt>
          <pd>Turns on HTML query output format. If the HTML format is already on, it is switched
            back to the default aligned text format. This command is for compatibility and
            convenience, but see <codeph>\pset</codeph> about setting other output options.</pd>
        </plentry>
        <plentry>
          <pt>\i | \include <varname>filename</varname></pt>
          <pd>Reads input from the file <varname>filename</varname> and executes it as though it had
            been typed on the keyboard.</pd>
          <pd> If <varname>filename</varname> is <codeph>-</codeph> (hyphen), then standard input is
            read until an EOF indication or <codeph>\q</codeph> meta-command. This can be used to
            intersperse interactive input with input from files. Note that Readline behavior will be
            used only if it is active at the outermost level.</pd>
          <pd>If you want to see the lines on the screen as they are read you must set the variable
              <codeph>ECHO</codeph> to <codeph>all</codeph>. </pd>
        </plentry>
        <plentry>
          <pt>\ir | \include_relative <varname>filename</varname></pt>
          <pd>The <codeph>\ir</codeph> command is similar to <codeph>\i</codeph>, but resolves
            relative file names differently. When executing in interactive mode, the two commands
            behave identically. However, when invoked from a script, <codeph>\ir</codeph> interprets
            file names relative to the directory in which the script is located, rather than the
            current working directory.</pd>
        </plentry>
        <plentry>
          <pt>\l[+] | \list[+] [<varname>pattern</varname>]</pt>
          <pd>List the databases in the server and show their names, owners, character set
            encodings, and access privileges. If a pattern is specified, only databases whose names
            match the pattern are listed. If <codeph>+</codeph> is appended to the command name,
            database sizes, default tablespaces, and descriptions are also displayed. (Size
            information is only available for databases that the current user can connect to.)</pd>
        </plentry>
        <plentry>
          <pt>\lo_export <varname>loid</varname>
            <varname>filename</varname></pt>
          <pd>Reads the large object with OID <varname>loid</varname> from the database and writes
            it to <varname>filename</varname>. Note that this is subtly different from the server
            function <codeph>lo_export</codeph>, which acts with the permissions of the user that
            the database server runs as and on the server's file system. Use
              <codeph>\lo_list</codeph> to find out the large object's OID. <note>Greenplum Database
              does not support the PostgreSQL <xref
                href="https://www.postgresql.org/docs/9.4/largeobjects.html" format="html"
                scope="external">large object facility</xref> for streaming user data that is stored
              in large-object structures.</note></pd>
        </plentry>
        <plentry>
          <pt>\lo_import <varname>large_object_filename</varname> [<varname>comment</varname>]</pt>
          <pd>Stores the file into a large object. Optionally, it associates the given comment with
            the object. Example:</pd>
          <pd>
            <codeblock>mydb=&gt; \lo_import '/home/gpadmin/pictures/photo.xcf' 'a 
picture of me'
lo_import 152801</codeblock>
          </pd>
          <pd>The response indicates that the large object received object ID 152801 which one ought
            to remember if one wants to access the object ever again. For that reason it is
            recommended to always associate a human-readable comment with every object. Those can
            then be seen with the <codeph>\lo_list</codeph> command. Note that this command is
            subtly different from the server-side <codeph>lo_import</codeph> because it acts as the
            local user on the local file system, rather than the server's user and file system.
              <note>Greenplum Database does not support the PostgreSQL <xref
                href="https://www.postgresql.org/docs/9.4/largeobjects.html" format="html"
                scope="external">large object facility</xref> for streaming user data that is stored
              in large-object structures.</note></pd>
        </plentry>
        <plentry>
          <pt>\lo_list</pt>
          <pd>Shows a list of all large objects currently stored in the database, along with any
            comments provided for them. <note>Greenplum Database does not support the PostgreSQL
                <xref href="https://www.postgresql.org/docs/9.4/largeobjects.html" format="html"
                scope="external">large object facility</xref> for streaming user data that is stored
              in large-object structures.</note></pd>
        </plentry>
        <plentry>
          <pt>\lo_unlink <varname>largeobject_oid</varname></pt>
          <pd>Deletes the large object of the specified OID from the database. Use
              <codeph>\lo_list</codeph> to find out the large object's OID. <note>Greenplum Database
              does not support the PostgreSQL <xref
                href="https://www.postgresql.org/docs/9.4/largeobjects.html" format="html"
                scope="external">large object facility</xref> for streaming user data that is stored
              in large-object structures.</note></pd>
        </plentry>
        <plentry>
          <pt>\o | \out [ <varname>filename</varname>  ]</pt>
          <pt>\o | \out [ <codeph>|</codeph>
            <varname>command</varname> ]</pt>
          <pd>Saves future query results to the file <varname>filename</varname> or pipes future
            results to the shell command <varname>command</varname>. If no argument is specified,
            the query output is reset to the standard output. Query results include all tables,
            command responses, and notices obtained from the database server, as well as output of
            various backslash commands that query the database (such as <codeph>\d</codeph>), but
            not error messages. To intersperse text output in between query results, use
              <codeph>\qecho</codeph>.</pd>
        </plentry>
        <plentry>
          <pt>\p</pt>
          <pd>Print the current query buffer to the standard output.</pd>
        </plentry>
        <plentry>
          <pt>\password [<varname>username</varname>]</pt>
          <pd>Changes the password of the specified user (by default, the current user). This
            command prompts for the new password, encrypts it, and sends it to the server as an
              <codeph>ALTER ROLE</codeph> command. This makes sure that the new password does not
            appear in cleartext in the command history, the server log, or elsewhere.</pd>
        </plentry>
        <plentry>
          <pt>\prompt [ <varname>text</varname> ] <varname>name</varname></pt>
          <pd>Prompts the user to supply text, which is assigned to the variable
              <varname>name</varname>. An optional prompt string, <varname>text</varname>, can be
            specified. (For multiword prompts, surround the text with single quotes.) </pd>
          <pd>By default, <codeph>\prompt</codeph> uses the terminal for input and output. However,
            if the <codeph>-f</codeph> command line switch was used, <codeph>\prompt</codeph> uses
            standard input and standard output. </pd>
        </plentry>
        <plentry>
          <pt>\pset [<varname>print_option</varname> [<varname>value</varname>]]</pt>
          <pd>This command sets options affecting the output of query result tables.
              <varname>print_option</varname> describes which option is to be set. The semantics of
              <varname>value</varname> vary depending on the selected option. For some options,
            omitting <varname>value</varname> causes the option to be toggled or unset, as described
            under the particular option. If no such behavior is mentioned, then omitting
              <varname>value</varname> just results in the current setting being displayed.</pd>
          <pd><codeph>\pset</codeph> without any arguments displays the current status
            of all printing options.</pd>
          <pd>Adjustable printing options are: <ul id="ul_f3k_1vl_44">
              <li id="kb144087"><b><codeph>border</codeph></b> – The <varname>value</varname> must
                be a number. In general, the higher the number the more borders and lines the tables
                will have, but this depends on the particular format. In HTML format, this will
                translate directly into the <codeph>border=...</codeph> attribute; in the other
                formats only values <codeph>0</codeph> (no border), <codeph>1</codeph> (internal
                dividing lines), and <codeph>2</codeph> (table frame) make sense.
                  <codeph>latex</codeph> and <codeph>latex-longtable</codeph> also support a
                  <codeph>border</codeph> value of 3 which adds a dividing line between each
                row.</li>
              <li id="kb151382"><b><codeph>columns</codeph></b> – Sets the target width for the
                  <codeph>wrapped</codeph> format, and also the width limit for determining whether
                output is wide enough to require the pager or switch to the vertical display in
                expanded auto mode. The default is <varname>zero</varname>. Zero causes the target
                width to be controlled by the environment variable <codeph>COLUMNS</codeph>, or the
                detected screen width if <codeph>COLUMNS</codeph> is not set. In addition, if
                  <codeph>columns</codeph> is zero then the wrapped format affects screen output
                only. If columns is nonzero then file and pipe output is wrapped to that width as
                well. <p>After setting the target width, use the command <codeph>\pset format
                    wrapped</codeph> to enable the wrapped format.</p></li>
              <li id="kb144090"><b><codeph>expanded</codeph></b> | <b><codeph>x</codeph></b> – If
                  <varname>value</varname> is specified it must be either <codeph>on</codeph> or
                  <codeph>off</codeph>, which will enable or disable expanded mode, or
                  <codeph>auto</codeph>. If <varname>value</varname> is omitted the command toggles
                between the <codeph>on</codeph> and <codeph>off</codeph> settings. When expanded
                mode is enabled, query results are displayed in two columns, with the column name on
                the left and the data on the right. This mode is useful if the data wouldn't fit on
                the screen in the normal "horizontal" mode. In the <codeph>auto</codeph> setting,
                the expanded mode is used whenever the query output is wider than the screen,
                otherwise the regular mode is used. The <codeph>auto</codeph> setting is only
                effective in the aligned and wrapped formats. In other formats, it always behaves as
                if the expanded mode is <codeph>off</codeph>.</li>
              <li id="kb147007"><b><codeph>fieldsep</codeph></b> – Specifies the field separator to
                be used in unaligned output mode. That way one can create, for example, tab- or
                comma-separated output, which other programs might prefer. To set a tab as field
                separator, type <codeph>\pset fieldsep '\t'</codeph>. The default field separator is
                  <codeph>'|'</codeph> (a vertical bar). </li>
              <li><b><codeph>fieldsep_zero</codeph></b> - Sets the field separator to use in
                unaligned output format to a zero byte.</li>
              <li id="kb147023"><b><codeph>footer</codeph></b> – If <varname>value</varname> is
                specified it must be either <codeph>on</codeph> or <codeph>off</codeph> which will
                enable or disable display of the table footer (the (<varname>n</varname> rows)
                count). If <varname>value</varname> is omitted the command toggles footer display on
                or off. </li>
              <li id="kb144082"><b><codeph>format</codeph></b> – Sets the output format to one of
                  <codeph>unaligned</codeph>, <codeph>aligned</codeph>, <codeph>html</codeph>,
                  <codeph>latex</codeph> (uses <codeph>tabular</codeph>),
                  <codeph>latex-longtable</codeph>, <codeph>troff-ms</codeph>, or
                  <codeph>wrapped</codeph>. Unique abbreviations are allowed.
                      <p><b><codeph>unaligned</codeph></b> format writes all columns of a row on one
                  line, separated by the currently active field separator. This is useful for
                  creating output that might be intended to be read in by other programs (for
                  example, tab-separated or comma-separated
                      format).</p><p><b><codeph>aligned</codeph></b> format is the standard,
                  human-readable, nicely formatted text output; this is the default.</p><p>The
                      <b><codeph>html</codeph></b>, <b><codeph>latex</codeph></b>,
                      <b><codeph>latex-longtable</codeph></b>, and <b><codeph>troff-ms</codeph></b>
                  formats put out tables that are intended to be included in documents using the
                  respective mark-up language. They are not complete documents! (This might not be
                  so dramatic in HTML, but in LaTeX you must have a complete document wrapper.
                    <codeph>latex-longtable</codeph> also requires the LaTeX
                    <codeph>longtable</codeph> and <codeph>booktabs</codeph> packages.)</p><p>The
                      <b><codeph>wrapped</codeph></b> format is like <codeph>aligned</codeph>, but
                  wraps wide data values across lines to make the output fit in the target column
                  width. The target width is determined as described under the
                    <codeph>columns</codeph> option. Note that <codeph>psql</codeph> does not
                  attempt to wrap column header titles; the <codeph>wrapped</codeph> format behaves
                  the same as <codeph>aligned</codeph> if the total width needed for column headers
                  exceeds the target.</p></li>
              <li id="kb151434"><b><codeph>linestyle</codeph></b> [<b><codeph>unicode</codeph></b> |
                    <b><codeph>ascii</codeph></b> | <b><codeph>old-ascii</codeph></b>] – Sets the
                border line drawing style to one of unicode, ascii, or old-ascii. Unique
                abbreviations, including one letter, are allowed for the three styles. The default
                setting is <codeph>ascii</codeph>. This option only affects the
                  <codeph>aligned</codeph> and <codeph>wrapped</codeph> output formats.
                      <p><b><codeph>ascii</codeph></b> – uses plain ASCII characters. Newlines in
                  data are shown using a <codeph>+</codeph> symbol in the right-hand margin. When
                  the wrapped format wraps data from one line to the next without a newline
                  character, a dot (<codeph>.</codeph>) is shown in the right-hand margin of the
                  first line, and again in the left-hand margin of the following line.
                      </p><p><b><codeph>old-ascii</codeph></b> – style uses plain ASCII characters,
                  using the formatting style used in PostgreSQL 8.4 and earlier. Newlines in data
                  are shown using a <codeph>:</codeph> symbol in place of the left-hand column
                  separator. When the data is wrapped from one line to the next without a newline
                  character, a <codeph>;</codeph> symbol is used in place of the left-hand column
                  separator. </p><p><b><codeph>unicode</codeph></b> – style uses Unicode box-drawing
                  characters. Newlines in data are shown using a carriage return symbol in the
                  right-hand margin. When the data is wrapped from one line to the next without a
                  newline character, an ellipsis symbol is shown in the right-hand margin of the
                  first line, and again in the left-hand margin of the following line. </p><p>When
                  the <codeph>border</codeph> setting is greater than zero, this option also
                  determines the characters with which the border lines are drawn. Plain ASCII
                  characters work everywhere, but Unicode characters look nicer on displays that
                  recognize them. </p></li>
              <li id="kb144095"><b><codeph>null 'string'</codeph></b> – The second argument is a
                string to print whenever a column is null. The default is to print nothing, which
                can easily be mistaken for an empty string. For example, one might prefer
                  <codeph>\pset null '(null)'</codeph>.</li>
              <li id="kb147036"><b><codeph>numericlocale</codeph></b> – If <varname>value</varname>
                is specified it must be either <codeph>on</codeph> or <codeph>off</codeph> which
                will enable or disable display of a locale-specific character to separate groups of
                digits to the left of the decimal marker. If <varname>value</varname> is omitted the
                command toggles between regular and locale-specific numberic output. </li>
              <li id="kb147128"><b><codeph>pager</codeph></b> – Controls the use of a pager for
                query and <codeph>psql</codeph> help output. If the environment variable
                  <codeph>PAGER</codeph> is set, the output is piped to the specified program.
                Otherwise a platform-dependent default (such as <codeph>more</codeph>) is used. When
                  <codeph>off</codeph>, the pager program is not used. When <codeph>on</codeph>, the
                pager is used only when appropriate, i.e. when the output is to a terminal and will
                not fit on the screen. Pager can also be set to <codeph>always</codeph>, which
                causes the pager to be used for all terminal output regardless of whether it fits on
                the screen. <codeph>\pset pager</codeph> without a <varname>value</varname> toggles
                pager use on and off.</li>
              <li id="kb147046"><b><codeph>recordsep</codeph></b> – Specifies the record (line)
                separator to use in unaligned output mode. The default is a newline character. </li>
              <li><b><codeph>recordsep_zero</codeph></b> - Sets the record separator to use in
                unaligned output format to a zero byte.</li>
              <li id="kb147082"><b><codeph>tableattr</codeph></b> | <b><codeph>T</codeph></b>
                  [<varname>text</varname>] – In HTML format, this specifies attributes to be placed
                inside the HTML <codeph>table</codeph> tag. This could for example be
                  <codeph>cellpadding</codeph> or <codeph>bgcolor</codeph>. Note that you probably
                don't want to specify <codeph>border</codeph> here, as that is already taken care of
                by <codeph>\pset border</codeph>. If no <varname>value</varname> is given, the table
                attributes are unset. <p>In <codeph>latex-longtable</codeph> format, this controls
                  the proportional width of each column containing a left-aligned data type. It is
                  specified as a whitespace-separated list of values, e.g. <codeph>'0.2 0.2
                    0.6'</codeph>. Unspecified output columns use the last specified value.</p></li>
              <li id="kb147069"><b><codeph>title</codeph></b> [<varname>text</varname>] – Sets the
                table title for any subsequently printed tables. This can be used to give your
                output descriptive tags. If no <varname>value</varname> is given, the title is
                unset.</li>
              <li id="kb151808"><b><codeph>tuples_only</codeph></b> | <b><codeph>t </codeph></b>
                  [<varname>novalue</varname> | <varname>on</varname> | <varname>off</varname>] – If
                  <varname>value</varname> is specified, it must be either <codeph>on</codeph> or
                  <codeph>off</codeph> which will enable or disable tuples-only mode. If
                  <varname>value</varname> is omitted the command toggles between regular and
                tuples-only output. Regular output includes extra information such as column
                headers, titles, and various footers. In tuples-only mode, only actual table data is
                shown. The <codeph>\t</codeph> command is equivalent to
                  <codeph>\pset</codeph><codeph>tuples_only</codeph> and is provided for
                convenience.</li>
          </ul><note type="tip"/>There are various shortcut commands for <codeph>\pset</codeph>. See
            <codeph>\a</codeph>, <codeph>\C</codeph>, <codeph>\f</codeph>,
            <codeph>\H</codeph>, <codeph>\t</codeph>, <codeph>\T</codeph>,
            and <codeph>\x</codeph>.</pd>
        </plentry>
        <plentry>
          <pt>\q | \quit</pt>
          <pd>Quits the <codeph>psql</codeph> program. In a script file, only execution of that
            script is terminated.</pd>
        </plentry>
        <plentry>
          <pt>\qecho <varname>text</varname> [ ... ] </pt>
          <pd>This command is identical to <codeph>\echo</codeph> except that the output will be
            written to the query output channel, as set by <codeph>\o</codeph>.</pd>
        </plentry>
        <plentry>
          <pt>\r | \reset</pt>
          <pd>Resets (clears) the query buffer.</pd>
        </plentry>
        <plentry>
          <pt>\s [<varname>filename</varname>]</pt>
          <pd>Print <codeph>psql</codeph>'s command line history
            to <codeph>filename</codeph>.
            If <codeph>filename</codeph> is omitted,
            the history is written to the standard output (using the pager if
            appropriate). This command is not available
            if <codeph>psql</codeph> was built
            without <codeph>Readline</codeph> support.
          </pd>
        </plentry>
        <plentry>
          <pt>\set [<varname>name</varname> [<varname>value</varname> [ ... ]]]</pt>
          <pd>Sets the <codeph>psql</codeph> variable <varname>name</varname> to
              <varname>value</varname>, or if more than one value is given, to the concatenation of
            all of them. If only one argument is given, the variable is just set with an empty
            value. To unset a variable, use the <codeph>\unset</codeph> command. </pd>
          <pd><codeph>\set</codeph> without any arguments displays the names and values of all
            currently-set <codeph>psql</codeph> variables. </pd>
          <pd>Valid variable names can contain characters, digits, and underscores. See "Variables"
            in <xref href="#topic1/section12" format="dita"/>. Variable names are case-sensitive. </pd>
          <pd>Although you are welcome to set any variable to anything you want,
              <codeph>psql</codeph> treats several variables as special. They are documented in the
            topic about variables.</pd>
          <pd>This command is unrelated to the SQL command <codeph><xref
                href="../../ref_guide/sql_commands/SET.xml#topic1"/></codeph>.</pd>
        </plentry>
        <plentry>
          <pt>\setenv <varname>name</varname> [ <varname>value</varname> ]</pt>
          <pd>Sets the environment variable <varname>name</varname> to <varname>value</varname>, or
            if the <varname>value</varname> is not supplied, unsets the environment variable.
            Example:
            <codeblock>testdb=> \setenv PAGER less
testdb=> \setenv LESS -imx4F</codeblock></pd>
        </plentry>
        <plentry>
          <pt>\sf[+] <varname>function_description</varname></pt>
          <pd>This command fetches and shows the definition of the named function, in the form of a
              <codeph>CREATE OR REPLACE FUNCTION</codeph> command. The definition is printed to the
            current query output channel, as set by <codeph>\o</codeph>.</pd>
          <pd>The target function can be specified by name alone, or by name and arguments, for
            example <codeph>foo(integer, text)</codeph>. The argument types must be given if there
            is more than one function of the same name.</pd>
          <pd>If <codeph>+</codeph> is appended to the command name, then the output lines are
            numbered, with the first line of the function body being line 1.</pd>
        </plentry>
        <plentry>
          <pt>\t [novalue | on | off]</pt>
          <pd>The <codeph>\t</codeph> command by itself toggles a display of output column name
            headings and row count footer. The values <codeph>on</codeph> and <codeph>off</codeph>
            set the tuples display, regardless of the current setting. This command is equivalent to
              <codeph>\pset tuples_only</codeph> and is provided for convenience. </pd>
        </plentry>
        <plentry>
          <pt>\T <varname>table_options</varname></pt>
          <pd>Specifies attributes to be placed within the <codeph>table</codeph> tag in HTML output
            format. This command is equivalent to <codeph>\pset tableattr
                <varname>table_options</varname></codeph></pd>
        </plentry>
        <plentry>
          <pt>\timing [novalue | on | off]</pt>
          <pd>Without a parameter, toggles a display of how long each SQL statement takes, in
            milliseconds. The values <codeph>on</codeph> and <codeph>off</codeph> set the time
            display, regardless of the current setting. </pd>
        </plentry>
        <plentry>
          <pt>\unset <varname>name</varname></pt>
          <pd>Unsets (deletes) the <codeph>psql</codeph> variable <varname>name</varname>. </pd>
        </plentry>
        <plentry>
          <pt>\w | \write <varname>filename</varname></pt>
          <pt>\w | \write <codeph>|</codeph> <varname>command</varname></pt>
          <pd>Outputs the current query buffer to the file <varname>filename</varname> or pipes it
            to the shell command <varname>command</varname>.</pd>
        </plentry>
        <plentry>
          <pt>\watch [<varname>seconds</varname>]</pt>
          <pd>Repeatedly execute the current query buffer (like <codeph>\g</codeph>) until
            interrupted or the query fails. Wait the specified number of seconds (default 2) between
            executions.</pd>
        </plentry>
        <plentry>
          <pt>\x [ on | off | auto ]</pt>
          <pd>Sets or toggles expanded table formatting mode. As such it is equivalent to
              <codeph>\pset expanded</codeph>.</pd>
        </plentry>
        <plentry>
          <pt>\z [<varname>pattern</varname>]</pt>
          <pd>Lists tables, views, and sequences with their associated access privileges. If a
            pattern is specified, only tables, views and sequences whose names match the pattern are
            listed. This is an alias for <codeph>\dp</codeph>.</pd>
        </plentry>
        <plentry>
          <pt>\! [<varname>command</varname>]</pt>
          <pd>Escapes to a separate shell or executes the shell command <varname>command</varname>.
            The arguments are not further interpreted; the shell will see them as-is. In particular,
            the variable substitution rules and backslash escapes do not apply.</pd>
        </plentry>
        <plentry>
          <pt>\?</pt>
          <pd>Shows help information about the <codeph>psql</codeph> backslash commands.</pd>
        </plentry>
      </parml>
    </section>
    <section id="section11">
      <title>Patterns</title>
      <p>The various <codeph>\d</codeph> commands accept a pattern parameter to specify the object
        name(s) to be displayed. In the simplest case, a pattern is just the exact name of the
        object. The characters within a pattern are normally folded to lower case, just as in SQL
        names; for example, <codeph>\dt FOO</codeph> will display the table named
          <codeph>foo</codeph>. As in SQL names, placing double quotes around a pattern stops
        folding to lower case. Should you need to include an actual double quote character in a
        pattern, write it as a pair of double quotes within a double-quote sequence; again this is
        in accord with the rules for SQL quoted identifiers. For example, <codeph>\dt
          "FOO""BAR"</codeph> will display the table named <codeph>FOO"BAR</codeph> (not
          <codeph>foo"bar</codeph>). Unlike the normal rules for SQL names, you can put double
        quotes around just part of a pattern, for instance <codeph>\dt FOO"FOO"BAR</codeph> will
        display the table named <codeph>fooFOObar</codeph>. </p>
      <p>Within a pattern, <codeph>*</codeph> matches any sequence of characters (including no
        characters) and <codeph>?</codeph> matches any single character. (This notation is
        comparable to UNIX shell file name patterns.) For example, <codeph>\dt int*</codeph>
        displays all tables whose names begin with <codeph>int</codeph>. But within double quotes,
          <codeph>*</codeph> and <codeph>?</codeph> lose these special meanings and are just matched
        literally.</p>
      <p>A pattern that contains a dot (<codeph>.</codeph>) is interpreted as a schema name pattern
        followed by an object name pattern. For example, <codeph>\dt foo*.bar*</codeph> displays all
        tables whose table name starts with <codeph>bar</codeph> that are in schemas whose schema
        name starts with <codeph>foo</codeph>. When no dot appears, then the pattern matches only
        objects that are visible in the current schema search path. Again, a dot within double
        quotes loses its special meaning and is matched literally.</p>
      <p>Advanced users can use regular-expression notations. All regular expression special
        characters work as specified in the <xref
          href="https://www.postgresql.org/docs/9.4/functions-matching.html#FUNCTIONS-POSIX-REGEXP"
          scope="external" format="html">PostgreSQL documentation on regular expressions</xref>,
        except for <codeph>.</codeph> which is taken as a separator as mentioned above,
          <codeph>*</codeph> which is translated to the regular-expression notation
          <codeph>.*</codeph>, and <codeph>?</codeph> which is translated to <codeph>..</codeph> You
        can emulate these pattern characters at need by writing <codeph>?</codeph> for
          <codeph>.,</codeph><codeph>(R+|)</codeph> for <codeph>R*</codeph>, or
          <codeph>(R|)</codeph> for <codeph>R?</codeph>. Remember that the pattern must match the
        whole name, unlike the usual interpretation of regular expressions; write <codeph>*</codeph>
        at the beginning and/or end if you don't wish the pattern to be anchored. Note that within
        double quotes, all regular expression special characters lose their special meanings and are
        matched literally. Also, the regular expression special characters are matched literally in
        operator name patterns (such as the argument of <codeph>\do</codeph>).</p>
      <p>Whenever the pattern parameter is omitted completely, the <codeph>\d</codeph> commands
        display all objects that are visible in the current schema search path – this is equivalent
        to using the pattern <codeph>*.</codeph> To see all objects in the database, use the pattern
          <codeph>*.*.</codeph></p>
    </section>
    <section id="section12">
      <title>Advanced Features</title>
      <sectiondiv id="section13">
        <b>Variables</b>
        <p><codeph>psql</codeph> provides variable substitution features similar to common UNIX
          command shells. Variables are simply name/value pairs, where the value can be any string
          of any length. The name must consist of letters (including non-Latin letters), digits, and
          underscores.</p><p>To set a variable, use the psql meta-command <codeph>\set</codeph>. For
          example,</p>
        <codeblock>testdb=&gt; \set foo bar</codeblock>
        <p>sets the variable <codeph>foo</codeph> to the value <codeph>bar</codeph>. To retrieve the
          content of the variable, precede the name with a colon, for example:</p>
        <codeblock>testdb=&gt; \echo :foo
bar</codeblock>
        <p>This works in both regular SQL commands and meta-commands; there is more detail in <xref
            href="#topic1/section14" format="dita">SQL Interpolation</xref>.</p><p>If you call
            <codeph>\set</codeph> without a second argument, the variable is set, with an empty
          string as <varname>value</varname>. To unset (i.e., delete) a variable, use the command
            <codeph>\unset</codeph>. To show the values of all variables, call <codeph>\set</codeph>
          without any argument.</p><note>The arguments of <codeph>\set</codeph> are subject to the
          same substitution rules as with other commands. Thus you can construct interesting
          references such as <codeph>\set :foo 'something'</codeph> and get 'soft links' or
          'variable variables' of Perl or PHP fame, respectively. Unfortunately, there is no way to
          do anything useful with these constructs. On the other hand, <codeph>\set bar
            :foo</codeph> is a perfectly valid way to copy a variable.</note>
        <p>A number of these variables are treated specially by <codeph>psql</codeph>. They
          represent certain option settings that can be changed at run time by altering the value of
          the variable, or in some cases represent changeable state of <codeph>psql</codeph>.
          Although you can use these variables for other purposes, this is not recommended, as the
          program behavior might grow really strange really quickly. By convention, all specially
          treated variables' names consist of all upper-case ASCII letters (and possibly digits and
          underscores). To ensure maximum compatibility in the future, avoid using such variable
          names for your own purposes. A list of all specially treated variables follows.</p>
        <parml>
          <plentry>
            <pt>AUTOCOMMIT</pt>
            <pd>When on (the default), each SQL command is automatically committed upon successful
              completion. To postpone commit in this mode, you must enter a <codeph>BEGIN</codeph>
              or <codeph>START TRANSACTION</codeph> SQL command. When off or unset, SQL commands are
              not committed until you explicitly issue <codeph>COMMIT</codeph> or
                <codeph>END</codeph>. The autocommit-on mode works by issuing an implicit
                <codeph>BEGIN</codeph> for you, just before any command that is not already in a
              transaction block and is not itself a <codeph>BEGIN</codeph> or other
              transaction-control command, nor a command that cannot be executed inside a
              transaction block (such as <codeph>VACUUM</codeph>). </pd>
            <pd>In autocommit-off mode, you must explicitly abandon any failed transaction by
              entering <codeph>ABORT</codeph> or <codeph>ROLLBACK</codeph>. Also keep in mind that
              if you exit the session without committing, your work will be lost.</pd>
            <pd>The autocommit-on mode is PostgreSQL's traditional behavior, but autocommit-off is
              closer to the SQL spec. If you prefer autocommit-off, you may wish to set it in your
                <codeph>~/.psqlrc</codeph> file.</pd>
          </plentry>
          <plentry>
            <pt>COMP_KEYWORD_CASE</pt>
            <pd>Determines which letter case to use when completing an SQL key word. If set to
                <codeph>lower</codeph> or <codeph>upper</codeph>, the completed word will be in
              lower or upper case, respectively. If set to <codeph>preserve-lower</codeph> or
                <codeph>preserve-upper</codeph> (the default), the completed word will be in the
              case of the word already entered, but words being completed without anything entered
              will be in lower or upper case, respectively.</pd>
          </plentry>
          <plentry>
            <pt>DBNAME</pt>
            <pd>The name of the database you are currently connected to. This is set every time you
              connect to a database (including program start-up), but can be unset.</pd>
          </plentry>
          <plentry>
            <pt>ECHO</pt>
            <pd>If set to <codeph>all</codeph>, all nonempty input lines are printed to standard
              output as they are read. (This does not apply to lines read interactively.) To select
              this behavior on program start-up, use the switch <codeph>-a</codeph>. If set to
              queries, <codeph>psql</codeph> prints each query to standard output as it is sent to
              the server. The switch for this is <codeph>-e</codeph>. </pd>
          </plentry>
          <plentry>
            <pt>ECHO_HIDDEN</pt>
            <pd>When this variable is set to <codeph>on</codeph> and a backslash command
              queries the database, the query is first shown.
              This feature helps you to study
              Greenplum Database internals and provide
              similar functionality in your own programs. (To select this behavior on program
              start-up, use the switch <codeph>-E</codeph>.) If you set the variable to the value
                <codeph>noexec</codeph>, the queries are just shown but are not actually sent to the
              server and executed.</pd>
          </plentry>
          <plentry>
            <pt>ENCODING</pt>
            <pd>The current client character set encoding.</pd>
          </plentry>
          <plentry>
            <pt>FETCH_COUNT</pt>
            <pd>If this variable is set to an integer value &gt; 0, the results of
                <codeph>SELECT</codeph> queries are fetched and displayed in groups of that many
              rows, rather than the default behavior of collecting the entire result set before
              display. Therefore only a limited amount of memory is used, regardless of the size of
              the result set. Settings of 100 to 1000 are commonly used when enabling this feature.
              Keep in mind that when using this feature, a query may fail after having already
              displayed some rows.</pd>
            <pd>Although you can use any output format with this feature, the default aligned format
              tends to look bad because each group of <codeph>FETCH_COUNT</codeph> rows will be
              formatted separately, leading to varying column widths across the row groups. The
              other output formats work better.</pd>
          </plentry>
          <plentry>
            <pt>HISTCONTROL</pt>
            <pd>If this variable is set to <codeph>ignorespace</codeph>, lines which begin with a
              space are not entered into the history list. If set to a value of
                <codeph>ignoredups</codeph>, lines matching the previous history line are not
              entered. A value of <codeph>ignoreboth</codeph> combines the two options. If unset, or
              if set to any other value than those above, all lines read in interactive mode are
              saved on the history list. </pd>
          </plentry>
          <plentry>
            <pt>HISTFILE</pt>
            <pd>The file name that will be used to store the history list. The default value is
                <codeph>~/.psql_history</codeph>. For example,
              putting<codeblock>\set HISTFILE ~/.psql_history- :DBNAME</codeblock></pd>
            <pd>in <codeph>~/.psqlrc</codeph> will cause <codeph>psql</codeph> to maintain a
              separate history for each database.</pd>
          </plentry>
          <plentry>
            <pt>HISTSIZE</pt>
            <pd>The number of commands to store in the command history. The default value is 500.
            </pd>
          </plentry>
          <plentry>
            <pt>HOST</pt>
            <pd>The database server host you are currently connected to. This is set every time you
              connect to a database (including program start-up), but can be unset.</pd>
          </plentry>
          <plentry>
            <pt>IGNOREEOF</pt>
            <pd>If unset, sending an <codeph>EOF</codeph> character (usually
              <codeph>CTRL+D</codeph>) to an interactive session of <codeph>psql</codeph> will
              terminate the application. If set to a numeric value, that many <codeph>EOF</codeph>
              characters are ignored before the application terminates. If the variable is set but
              has no numeric value, the default is <codeph>10</codeph>. </pd>
          </plentry>
          <plentry>
            <pt>LASTOID</pt>
            <pd>The value of the last affected OID, as returned from an <codeph>INSERT</codeph> or
                <codeph>lo_import</codeph> command. This variable is only guaranteed to be valid
              until after the result of the next SQL command has been displayed. </pd>
          </plentry>
          <plentry>
            <pt>ON_ERROR_ROLLBACK</pt>
            <pd>When set to <codeph>on</codeph>, if a statement in a transaction block generates an error, the error is
              ignored and the transaction continues. When set to <codeph>interactive</codeph>, such errors are only ignored
              in interactive sessions, and not when reading script files. When unset or set to <codeph>off</codeph>, a
              statement in a transaction block that generates an error aborts the entire
              transaction. The error rollback mode works by issuing an implicit
                <codeph>SAVEPOINT</codeph> for you, just before each command that is in a
              transaction block, and rolls back to the savepoint on error.</pd>
          </plentry>
          <plentry>
            <pt>ON_ERROR_STOP</pt>
            <pd>By default, command processing continues after an error. When this variable is set
              to <codeph>on</codeph>, processing will instead stop immediately. In interactive mode,
                <codeph>psql</codeph> will return to the command prompt; otherwise,
                <codeph>psql</codeph> will exit, returning error code 3 to distinguish this case
              from fatal error conditions, which are reported using error code 1. In either case,
              any currently running scripts (the top-level script, if any, and any other scripts
              which it may have in invoked) will be terminated immediately. If the top-level command
              string contained multiple SQL commands, processing will stop with the current
              command.</pd>
          </plentry>
          <plentry>
            <pt>PORT</pt>
            <pd>The database server port to which you are currently connected. This is set every
              time you connect to a database (including program start-up), but can be unset.</pd>
          </plentry>
          <plentry>
            <pt>PROMPT1</pt>
            <pt>PROMPT2</pt>
            <pt>PROMPT3</pt>
            <pd>These specify what the prompts <codeph>psql</codeph> issues should look like. See
              "Prompting".</pd>
          </plentry>
          <plentry>
            <pt>QUIET</pt>
            <pd>Setting this variable to <codeph>on</codeph> is equivalent to the command line
              option <codeph>-q</codeph>. It is not very useful in interactive mode.</pd>
          </plentry>
          <plentry>
            <pt>SINGLELINE</pt>
            <pd>This variable is equivalent to the command line option <codeph>-S</codeph>.</pd>
          </plentry>
          <plentry>
            <pt>SINGLESTEP</pt>
            <pd>Setting this variable to <codeph>on</codeph> is equivalent to the command line option <codeph>-s</codeph>.</pd>
          </plentry>
          <plentry>
            <pt>USER</pt>
            <pd>The database user you are currently connected as. This is set every time you connect
              to a database (including program start-up), but can be unset.</pd>
          </plentry>
          <plentry>
            <pt>VERBOSITY</pt>
            <pd>This variable can be set to the values <codeph>default</codeph>,
                <codeph>verbose</codeph>, or <codeph>terse</codeph> to control the verbosity of
              error reports.</pd>
          </plentry>
        </parml>
      </sectiondiv>
      <sectiondiv id="section14"><b>SQL Interpolation</b>
        <p>A key feature of <codeph>psql</codeph> variables is that you can substitute
          ("interpolate") them into regular SQL statements, as well as the arguments of
          meta-commands. Furthermore, <codeph>psql</codeph> provides facilities for ensuring that
          variable values used as SQL literals and identifiers are properly quoted. The syntax for
          interpolating a value without any quoting is to prepend the variable name with a colon
            (<codeph>:</codeph>). For example,</p>
        <codeblock>testdb=&gt; \set foo 'my_table'
testdb=&gt; SELECT * FROM :foo;</codeblock>
        <p>would query the table <codeph>my_table</codeph>. Note that this may be unsafe: the value
          of the variable is copied literally, so it can contain unbalanced quotes, or even
          backslash commands. You must make sure that it makes sense where you put it.</p>
        <p>When a value is to be used as an SQL literal or identifier, it is safest to arrange for
          it to be quoted. To quote the value of a variable as an SQL literal, write a colon
          followed by the variable name in single quotes. To quote the value as an SQL identifier,
          write a colon followed by the variable name in double quotes. These constructs deal
          correctly with quotes and other special characters embedded within the variable value. The
          previous example would be more safely written this
          way:<codeblock>testdb=> \set foo 'my_table'
testdb=> SELECT * FROM :"foo";</codeblock></p>
        <p>Variable interpolation will not be performed within quoted SQL literals and identifiers.
          Therefore, a construction such as <codeph>':foo'</codeph> doesn't work to produce a quoted
          literal from a variable's value (and it would be unsafe if it did work, since it wouldn't
          correctly handle quotes embedded in the value).</p><p>One example use of this mechanism is
          to copy the contents of a file into a table column. First load the file into a variable
          and then interpolate the variable's value as a quoted string:</p><codeblock>testdb=> \set content `cat my_file.txt`
testdb=> INSERT INTO my_table VALUES (:'content');</codeblock>
        <p>(Note that this still won't work if <codeph>my_file.txt</codeph> contains
            <codeph>NUL</codeph> bytes. <codeph>psql</codeph> does not support embedded
            <codeph>NUL</codeph> bytes in variable values.)</p><p>Since colons can legally appear in
          SQL commands, an apparent attempt at interpolation (that is, <codeph>:name</codeph>,
            <codeph>:'name'</codeph>, or <codeph>:"name"</codeph>) is not replaced unless the named
          variable is currently set. In any case, you can escape a colon with a backslash to protect
          it from substitution.</p><p>The colon syntax for variables is standard SQL for embedded
          query languages, such as ECPG. The colon syntaxes for array slices and type casts are
          Greenplum Database extensions, which can sometimes conflict with the standard usage. The
          colon-quote syntax for escaping a variable's value as an SQL literal or identifier is a
            <codeph>psql</codeph> extension.</p>
      </sectiondiv>
      <sectiondiv id="section15">
        <b>Prompting</b>
        <p>The prompts <codeph>psql</codeph> issues can be customized to your preference. The three
          variables <codeph>PROMPT1</codeph>, <codeph>PROMPT2</codeph>, and <codeph>PROMPT3</codeph>
          contain strings and special escape sequences that describe the appearance of the prompt.
          Prompt 1 is the normal prompt that is issued when <codeph>psql</codeph> requests a new
          command. Prompt 2 is issued when more input is expected during command entry, for example
          because the command was not terminated with a semicolon or a quote was not closed. Prompt
          3 is issued when you are running an SQL <codeph>COPY FROM STDIN</codeph> command and you
          need to type in a row value on the terminal. </p>
        <p>The value of the selected prompt variable is printed literally, except where a percent
          sign (<codeph>%</codeph>) is encountered. Depending on the next character, certain other
          text is substituted instead. Defined substitutions are:</p>
        <parml>
          <plentry>
            <pt>%M</pt>
            <pd>The full host name (with domain name) of the database server, or
                <codeph>[local]</codeph> if the connection is over a UNIX domain socket, or
                <codeph>[local:/dir/name]</codeph>, if the UNIX domain socket is not at the compiled
              in default location.</pd>
          </plentry>
          <plentry>
            <pt>%m</pt>
            <pd>The host name of the database server, truncated at the first dot, or
                <codeph>[local]</codeph> if the connection is over a UNIX domain socket. </pd>
          </plentry>
          <plentry>
            <pt>%&gt;</pt>
            <pd>The port number at which the database server is listening.</pd>
          </plentry>
          <plentry>
            <pt>%n</pt>
            <pd>The database session user name. (The expansion of this value might change during a
              database session as the result of the command <codeph>SET SESSION
                AUTHORIZATION</codeph>.) </pd>
          </plentry>
          <plentry>
            <pt>%/</pt>
            <pd>The name of the current database.</pd>
          </plentry>
          <plentry>
            <pt>%~</pt>
            <pd>Like <codeph>%/</codeph>, but the output is <codeph>~</codeph> (tilde) if the
              database is your default database.</pd>
          </plentry>
          <plentry>
            <pt>%#</pt>
            <pd>If the session user is a database superuser, then a <b>#</b>, otherwise a
                <b>&gt;</b>. (The expansion of this value might change during a database session as
              the result of the command <codeph>SET SESSION AUTHORIZATION</codeph>.)</pd>
          </plentry>
          <plentry>
            <pt>%R</pt>
            <pd>In prompt 1 normally <codeph>=</codeph>,
              but <codeph>^</codeph> if in single-line mode,
              or <codeph>!</codeph> if the session is disconnected from the
              database (which can happen if <codeph>\connect</codeph> fails).
              In prompt 2 <codeph>%R</codeph> is replaced by a character that
              depends on why <codeph>psql</codeph> expects more input:
              <codeph>-</codeph> if the command simply wasn't terminated yet,
              but <codeph>*</codeph> if there is an unfinished
              <codeph>/* ... */</codeph> comment,
              a single quote if there is an unfinished quoted string,
              a double quote if there is an unfinished quoted identifier,
              a dollar sign if there is an unfinished dollar-quoted string,
              or <codeph>(</codeph> if there is an unmatched left parenthesis.
              In prompt 3 <codeph>%R</codeph> doesn't produce anything.</pd>
          </plentry>
          <plentry>
            <pt>%x</pt>
            <pd>Transaction status: an empty string when not in a transaction block, or <b>*</b>
              when in a transaction block, or <b>!</b> when in a failed transaction block, or
                <b>?</b> when the transaction state is indeterminate (for example, because there is
              no connection).</pd>
          </plentry>
          <plentry>
            <pt>%digits</pt>
            <pd>The character with the indicated octal code is substituted.</pd>
          </plentry>
          <plentry>
            <pt>%:name:</pt>
            <pd>The value of the <codeph>psql</codeph> variable name. See "Variables" in <xref
                href="#topic1/section12" format="dita"/> for details.</pd>
          </plentry>
          <plentry>
            <pt>%`command`</pt>
            <pd>The output of command, similar to ordinary back-tick substitution.</pd>
          </plentry>
          <plentry>
            <pt>%[ ... %]</pt>
            <pd>Prompts may contain terminal control characters which, for example, change the
              color, background, or style of the prompt text, or change the title of the terminal
              window. In order for line editing to work properly, these non-printing control
              characters must be designated as invisible by surrounding them with
                <codeph>%[</codeph> and <codeph>%]</codeph>. Multiple pairs of these may occur
              within the prompt. For
              example,<codeblock>testdb=&gt; \set PROMPT1 '%[%033[1;33;40m%]%n@%/%R%[%033[0m%]%#'</codeblock></pd>
            <pd>results in a boldfaced (<codeph>1;</codeph>) yellow-on-black
              (<codeph>33;40</codeph>) prompt on VT100-compatible, color-capable terminals. To
              insert a percent sign into your prompt, write <codeph>%%</codeph>. The default prompts
              are <codeph>'%/%R%# '</codeph> for prompts 1 and 2, and <codeph>'&gt;&gt; '</codeph>
              for prompt 3.</pd>
          </plentry>
        </parml>
      </sectiondiv>
      <sectiondiv id="section16">
        <b>Command-Line Editing</b>
        <p><codeph>psql</codeph> uses the <codeph>readline</codeph> library for convenient line editing and
          retrieval. The command history is automatically saved when <codeph>psql</codeph> exits and
          is reloaded when <codeph>psql</codeph> starts up. Tab-completion is also supported,
          although the completion logic makes no claim to be an SQL parser. The queries generated by
          tab-completion can also interfere with other SQL commands, e.g. <codeph>SET TRANSACTION
            ISOLATION LEVEL</codeph>. If for some reason you do not like the tab completion, you can
          turn it off by putting this in a file named <codeph>.inputrc</codeph> in your home
          directory:</p>
        <codeblock>$if psql
set disable-completion on
$endif</codeblock>
      </sectiondiv>
    </section>
    <section id="section17">
      <title>Environment</title>
      <parml>
        <plentry>
          <pt>COLUMNS</pt>
          <pd>If <codeph>\pset columns</codeph> is zero, controls the width for the wrapped format
            and width for determining if wide output requires the pager or should be switched to the
            vertical format in expanded auto mode.</pd>
        </plentry>
        <plentry>
          <pt>PAGER</pt>
          <pd>If the query results do not fit on the screen, they are piped through this command.
            Typical values are <codeph>more</codeph> or <codeph>less</codeph>. The default is
            platform-dependent. The use of the pager can be disabled by setting
              <varname>PAGER</varname> to empty, or by using pager-related options of the
              <codeph>\pset</codeph> command. </pd>
        </plentry>
        <plentry>
          <pt>PGDATABASE</pt>
          <pt>PGHOST</pt>
          <pt>PGPORT</pt>
          <pt>PGUSER</pt>
          <pd>Default connection parameters.</pd>
        </plentry>
        <plentry>
          <pt>PSQL_EDITOR</pt>
          <pt>EDITOR</pt>
          <pt>VISUAL</pt>
          <pd>Editor used by the <codeph>\e</codeph> and <codeph>\ef</codeph> commands. The
            variables are examined in the order listed; the first that is set is used.</pd>
          <pd>The built-in default editors are <codeph>vi</codeph> on Unix systems and
              <codeph>notepad.exe</codeph> on Windows systems.</pd>
        </plentry>
        <plentry>
          <pt>PSQL_EDITOR_LINENUMBER_ARG</pt>
          <pd>When <codeph>\e</codeph> or <codeph>\ef</codeph> is used with a line number argument,
            this variable specifies the command-line argument used to pass the starting line number
            to the user's editor. For editors such as Emacs or <codeph>vi</codeph>, this is a plus
            sign. Include a trailing space in the value of the variable if there needs to be space
            between the option name and the line number.
            Examples:<codeblock>PSQL_EDITOR_LINENUMBER_ARG='+'
PSQL_EDITOR_LINENUMBER_ARG='--line '</codeblock></pd>
          <pd>The default is <codeph>+</codeph> on Unix systems (corresponding to the default editor
              <codeph>vi</codeph>, and useful for many other common editors); but there is no
            default on Windows systems.</pd>
        </plentry>
        <plentry>
          <pt>PSQL_HISTORY</pt>
          <pd>Alternative location for the command history file. Tilde (<codeph>~</codeph>)
            expansion is performed.</pd>
        </plentry>
        <plentry>
          <pt>PSQLRC</pt>
          <pd>Alternative location of the user's <codeph>.psqlrc</codeph> file. Tilde
              (<codeph>~</codeph>) expansion is performed.</pd>
        </plentry>
        <plentry>
          <pt>SHELL</pt>
          <pd>Command executed by the <codeph>\!</codeph> command.</pd>
        </plentry>
        <plentry>
          <pt>TMPDIR</pt>
          <pd>Directory for storing temporary files. The default is <codeph>/tmp</codeph>.</pd>
        </plentry>
      </parml>
    </section>
    <section id="section18">
      <title>Files</title>
      <parml>
        <plentry>
          <pt>psqlrc and ~/.psqlrc</pt>
          <pd>Unless it is passed an <codeph>-X</codeph> or <codeph>-c</codeph> option,
              <codeph>psql</codeph> attempts to read and execute commands from the system-wide
            startup file (<codeph>psqlrc</codeph>) and then the user's personal startup file
              (<codeph>~/.psqlrc</codeph>), after connecting to the database but before accepting
            normal commands. These files can be used to set up the client and/or the server to
            taste, typically with <codeph>\set</codeph> and <codeph>SET</codeph> commands. </pd>
          <pd>The system-wide startup file is named <codeph>psqlrc</codeph> and is sought in the
            installation's "system configuration" directory, which is most reliably identified by
            running <codeph>pg_config --sysconfdir</codeph>. By default this directory will
              be<codeph> ../etc/</codeph> relative to the directory containing the Greenplum
            Database executables. The name of this directory can be set explicitly via the
              <codeph>PGSYSCONFDIR</codeph> environment variable. </pd>
          <pd>The user's personal startup file is named <codeph>.psqlrc</codeph> and is sought in
            the invoking user's home directory. On Windows, which lacks such a concept, the personal
            startup file is named <codeph>%APPDATA%\postgresql\psqlrc.conf</codeph>. The location of
            the user's startup file can be set explicitly via the <codeph>PSQLRC</codeph>
            environment variable. </pd>
          <pd>Both the system-wide startup file and the user's personal startup file can be made
            psql-version-specific by appending a dash and the underlying PostgreSQL major or minor
            release number to the file name, for example <codeph>~/.psqlrc-9.4</codeph>. The most
            specific version-matching file will be read in preference to a non-version-specific
            file.</pd>
        </plentry>
        <plentry>
          <pt>.psql_history</pt>
          <pd>The command-line history is stored in the file <codeph>~/.psql_history</codeph>,
              or<codeph> %APPDATA%\postgresql\psql_history</codeph> on Windows. </pd>
          <pd>The location of the history file can be set explicitly via the
              <codeph>PSQL_HISTORY</codeph> environment variable.</pd>
        </plentry>
      </parml>
    </section>
    <section id="section19">
      <title>Notes</title>
      <p><codeph>psql</codeph> works best with servers of the same or an older major version.
        Backslash commands are particularly likely to fail if the server is of a newer version than
          <codeph>psql</codeph> itself. However, backslash commands of the <codeph>\d</codeph>
        family should work with older server versions, though not necessarily with servers newer
        than <codeph>psql</codeph> itself. The general functionality of running SQL commands and
        displaying query results should also work with servers of a newer major version, but this
        cannot be guaranteed in all cases.</p>
      <p>If you want to use <codeph>psql</codeph> to connect to several servers of different major
        versions, it is recommended that you use the newest version of <codeph>psql</codeph>.
        Alternatively, you can keep a copy of <codeph>psql</codeph> from each major version around
        and be sure to use the version that matches the respective server. But in practice, this
        additional complication should not be necessary.</p>
    </section>
    <section id="section20">
      <title>Notes for Windows Users</title>
      <p><codeph>psql</codeph> is built as a console application. Since the Windows console windows
        use a different encoding than the rest of the system, you must take special care when using
        8-bit characters within <codeph>psql</codeph>. If <codeph>psql</codeph> detects a
        problematic console code page, it will warn you at startup. To change the console code page,
        two things are necessary: </p>
      <p>Set the code page by
          entering:<codeblock>cmd.exe /c chcp 1252</codeblock><codeph>1252</codeph> is a character
        encoding of the Latin alphabet, used by Microsoft Windows for English and some other Western
        languages. If you are using Cygwin, you can put this command in
          <codeph>/etc/profile</codeph>. </p>
      <p>Set the console font to Lucida Console, because the raster font does not work with the ANSI
        code page.</p>
    </section>
    <section id="section21">
      <title>Examples</title>
      <p>Start <codeph>psql</codeph> in interactive mode:</p>
      <codeblock>psql -p 54321 -U sally mydatabase</codeblock>
      <p>In <codeph>psql</codeph> interactive mode, spread a command over several lines of input.
        Notice the changing prompt:</p>
      <codeblock>testdb=&gt; CREATE TABLE my_table (
testdb(&gt;  first integer not null default 0,
testdb(&gt;  second text)
testdb-&gt; ;
CREATE TABLE</codeblock>
      <p>Look at the table definition:</p>
      <codeblock>testdb=&gt; \d my_table
             Table "my_table"
 Attribute |  Type   |      Modifier
-----------+---------+--------------------
 first     | integer | not null default 0
 second    | text    |</codeblock>
      <p>Run <codeph>psql</codeph> in non-interactive mode by passing in a file containing SQL
        commands:</p>
      <codeblock>psql -f /home/gpadmin/test/myscript.sql</codeblock>
    </section>
  </body>
</topic>
