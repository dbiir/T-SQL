<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1">
  <title id="os137116">pg_dump</title>
  <body>
    <p id="client_util_desc">Extracts a database into a single script file or other archive
      file.</p>
    <section id="section2">
      <title>Synopsis</title>
      <codeblock id="client_util_synopsis"><b>pg_dump</b> [<varname>connection-option</varname> ...] [<varname>dump_option</varname> ...] [<varname>dbname</varname>]

<b>pg_dump</b> <b>-? | --help</b>

<b>pg_dump</b> <b>-V | --version</b></codeblock>
    </section>
    <section id="section3">
      <title>Description</title>
      <p><codeph>pg_dump</codeph> is a standard PostgreSQL utility for backing up a database, and is
        also supported in Greenplum Database. It creates a single (non-parallel) dump file. For
        routine backups of Greenplum Database, it is better to use the Greenplum Database backup
        utility, <codeph><xref href="gpbackup.xml#topic1"/></codeph>, for the
        best performance.</p>
      <p>Use <codeph>pg_dump</codeph> if you are migrating your data to another database vendor's
        system, or to another Greenplum Database system with a different segment configuration (for
        example, if the system you are migrating to has greater or fewer segment instances). To
        restore, you must use the corresponding <xref href="./pg_restore.xml#topic1" type="topic"
          format="dita"/> utility (if the dump file is in archive format), or you can use a client
        program such as <codeph><xref href="psql.xml#topic1" type="topic" format="dita"/></codeph>
        (if the dump file is in plain text format). </p>
      <p>Since <codeph>pg_dump</codeph> is compatible with regular PostgreSQL, it can be used to
        migrate data into Greenplum Database. The <codeph>pg_dump</codeph> utility in Greenplum
        Database is very similar to the PostgreSQL <codeph>pg_dump</codeph> utility, with the
        following exceptions and limitations:</p>
      <ul>
        <li id="os142186">If using <codeph>pg_dump</codeph> to backup a Greenplum Database database,
          keep in mind that the dump operation can take a long time (several hours) for very large
          databases. Also, you must make sure you have sufficient disk space to create the dump
          file.</li>
        <li id="os142181">If you are migrating data from one Greenplum Database system to another,
          use the <codeph>--gp-syntax</codeph> command-line option to include the
            <codeph>DISTRIBUTED BY</codeph> clause in <codeph>CREATE TABLE</codeph> statements. This
          ensures that Greenplum Database table data is distributed with the correct distribution
          key columns upon restore.</li>
      </ul>
      <p><codeph>pg_dump</codeph> makes consistent backups even if the database is being used
        concurrently. <codeph>pg_dump</codeph> does not block other users accessing the database
        (readers or writers). </p>
      <p>When used with one of the archive file formats and combined with
          <codeph>pg_restore</codeph>, <codeph>pg_dump</codeph> provides a flexible archival and
        transfer mechanism. <codeph>pg_dump</codeph> can be used to backup an entire database, then
          <codeph>pg_restore </codeph>can be used to examine the archive and/or select which parts
        of the database are to be restored. The most flexible output file formats are the
        <varname>custom</varname> format (<codeph>-Fc</codeph>) and the
        <varname>directory</varname> format (<codeph>-Fd</codeph>). They allow for selection and
        reordering of all archived items, support parallel restoration, and are compressed by
        default. The <varname>directory</varname> format is the only format that supports parallel
        dumps.</p>
    </section>
    <section id="section4">
      <title>Options</title>
      <parml>
        <plentry>
          <pt>dbname</pt>
          <pd>Specifies the name of the database to be dumped. If this is not specified, the
            environment variable <codeph>PGDATABASE</codeph> is used. If that is not set, the user
            name specified for the connection is used.</pd>
        </plentry>
      </parml>
      <sectiondiv id="section5">
        <b>Dump Options</b>
        <parml>
          <plentry>
            <pt>-a | --data-only</pt>
            <pd>Dump only the data, not the schema (data definitions). Table data and sequence
              values are dumped. </pd>
            <pd>This option is similar to, but for historical reasons not identical to, specifying
                <codeph>--section=data</codeph>.</pd>
          </plentry>
          <plentry>
            <pt>-b | --blobs</pt>
            <pd>Include large objects in the dump. This is the default behavior except when
                <codeph>--schema</codeph>, <codeph>--table</codeph>, or
                <codeph>--schema-only</codeph> is specified. The <codeph>-b</codeph> switch is
              only useful add large objects to dumps
              where a specific schema or table has been requested. Note that
              blobs are considered data and therefore will be included when
              <codeph>--data-only</codeph> is used, but not when <codeph>--schema-only</codeph> is.
              <note>Greenplum Database does not
                support the PostgreSQL <xref
                  href="https://www.postgresql.org/docs/9.4/largeobjects.html" format="html"
                  scope="external">large object facility</xref> for streaming user data that is
                stored in large-object structures.</note>
            </pd>
          </plentry>
          <plentry>
            <pt>-c | --clean</pt>
            <pd>Adds commands to the text output file to clean (drop) database objects prior to 
              outputting the commands for creating them. (Restore might generate some harmless
              error messages, if any objects were not present in the destination database.)
              Note that objects are not dropped before the dump
              operation begins, but <codeph>DROP</codeph> commands are added to the DDL dump output
              files so that when you use those files to do a restore, the <codeph>DROP</codeph>
              commands are run prior to the <codeph>CREATE</codeph> commands. This option is only
              meaningful for the plain-text format. For the archive formats, you may specify the
              option when you call <codeph><xref href="./pg_restore.xml#topic1" type="topic"
                  format="dita"/></codeph>. </pd>
          </plentry>
          <plentry>
            <pt>-C | --create</pt>
            <pd>Begin the output with a command to create the database itself and reconnect to the
              created database. (With a script of this form, it doesn't matter which database 
              in the destination installation you connect to before running the script.) If
              <codeph>--clean</codeph> is also specified, the script drops and recreates the
              target database before reconnecting to it. This option is only meaningful for the
              plain-text format. For the archive formats, you may specify the option when you call
                  <codeph><xref href="./pg_restore.xml#topic1" type="topic" format="dita"
              /></codeph>. </pd>
          </plentry>
          <plentry>
            <pt>-E <varname>encoding</varname> | --encoding=<varname>encoding</varname></pt>
            <pd>Create the dump in the specified character set encoding. By default, the dump is
              created in the database encoding. (Another way to get the same result is to set the
                <codeph>PGCLIENTENCODING</codeph> environment variable to the desired dump
              encoding.)</pd>
          </plentry>
          <plentry>
            <pt>-f <varname>file</varname> | --file=<varname>file</varname></pt>
            <pd>Send output to the specified file. This parameter can be omitted for
              file-based output formats, in which case the standard output is used.
              It must be given for the directory output format however, where it
              specifies the target directory instead of a file. In this case the
              directory is created by <codeph>pg_dump</codeph> and must not exist
              before.</pd>
          </plentry>
          <plentry>
            <pt>-F p|c|d|t | --format=plain|custom|directory|tar</pt>
            <pd>Selects the format of the output. format can be one of the following: </pd>
            <pd>p | plain — Output a plain-text SQL script file (the default). </pd>
            <pd>c | custom — Output a custom archive suitable for input into <codeph><xref
                  href="./pg_restore.xml#topic1" type="topic" format="dita"/></codeph>.
              Together with the directory output format, this is the most flexible
              output format in that it allows manual selection and reordering of
              archived items during restore. This format is compressed by default and
              also supports parallel dumps.</pd>
            <pd>d | directory — Output a directory-format archive suitable for input into
              <codeph>pg_restore</codeph>. This will create a directory with one file for
              each table and blob being dumped, plus a so-called Table of Contents file
              describing the dumped objects in a machine-readable format that 
              <codeph>pg_restore</codeph> can read. A directory format archive can be
              manipulated with standard Unix tools; for example, files in an uncompressed
              archive can be compressed with the <codeph>gzip</codeph> tool. This format
              is compressed by default.</pd>
            <pd>t | tar — Output a tar-format archive suitable for input into <codeph><xref
                  href="./pg_restore.xml#topic1" type="topic" format="dita"/></codeph>. The tar
              format is compatible with the directory format; extracting a tar-format archive
              produces a valid directory-format archive. However, the tar format does not support
              compression. Also, when using tar format the
              relative order of table data items cannot be changed during restore.</pd>
          </plentry>
          <plentry>
            <pt>-j <varname>njobs</varname> | --jobs=<varname>njobs</varname></pt>
            <pd>Run the dump in parallel by dumping <varname>njobs</varname> tables
              simultaneously. This option reduces the time of the dump but it also increases
              the load on the database server. You can only use this option with the directory
              output format because this is the only output format where multiple processes
              can write their data at the same time.</pd>
            <pd><note>Parallel dumps using <codeph>pg_dump</codeph> are parallelized only
              on the query dispatcher (master) node, not across the query executor
              (segment) nodes as is the case when you use <codeph>gpbackup</codeph>.
              </note></pd>
            <pd><codeph>pg_dump</codeph> will open <varname>njobs</varname> + 1 connections to
              the database, so make sure your <codeph><xref href="../../ref_guide/config_params/guc-list.xml#max_connections"
                type="dita">max_connections</xref></codeph> setting is high enough to
              accommodate all connections.</pd>
            <pd>Requesting exclusive locks on database objects while running a parallel dump
              could cause the dump to fail. The reason is that the <codeph>pg_dump</codeph>
              master process requests shared locks on the objects that the worker processes are
              going to dump later in order to make sure that nobody deletes them and makes them
              go away while the dump is running. If another client then requests an exclusive
              lock on a table, that lock will not be granted but will be queued waiting for the
              shared lock of the master process to be released. Consequently, any other access
              to the table will not be granted either and will queue after the exclusive lock
              request. This includes the worker process trying to dump the table. Without any
              precautions this would be a classic deadlock situation. To detect this conflict,
              the <codeph>pg_dump</codeph> worker process requests another shared lock using the
              <codeph>NOWAIT</codeph> option. If the worker process is not granted this shared
              lock, somebody else must have requested an exclusive lock in the meantime and
              there is no way to continue with the dump, so <codeph>pg_dump</codeph> has no
              choice but to abort the dump.</pd>
            <pd>For a consistent backup, the database server needs to support synchronized
              snapshots, a feature that was introduced in Greenplum Database 6.0. With this
              feature, database clients can ensure they see the same data set even though they
              use different connections. <codeph>pg_dump -j</codeph> uses multiple database
              connections; it connects to the database once with the master process and once
              again for each worker job. Without the synchronized snapshot feature, the
              different worker jobs wouldn't be guaranteed to see the same data in each
              connection, which could lead to an inconsistent backup.</pd>
            <pd>If you want to run a parallel dump of a pre-6.0 server, you need to make sure
              that the database content doesn't change from between the time the master connects
              to the database until the last worker job has connected to the database. The
              easiest way to do this is to halt any data modifying processes (DDL and DML)
              accessing the database before starting the backup. You also need to specify the
              <codeph>--no-synchronized-snapshots</codeph> parameter when running
              <codeph>pg_dump -j</codeph> against a pre-6.0 Greenplum Database server.</pd>
          </plentry>
          <plentry>
            <pt>-n <varname>schema</varname> | --schema=<varname>schema</varname></pt>
            <pd>Dump only schemas matching the schema pattern; this selects both the schema itself,
              and all its contained objects. When this option is not specified, all non-system
              schemas in the target database will be dumped. Multiple schemas can be selected by
              writing multiple <codeph>-n</codeph> switches. Also, the schema parameter is
              interpreted as a pattern according to the same rules used by
                <codeph>psql</codeph>'s<codeph> \d</codeph> commands, so multiple schemas can also
              be selected by writing wildcard characters in the pattern. When using wildcards, be
              careful to quote the pattern if needed to prevent the shell from expanding the
              wildcards.</pd>
            <pd>Note: When -n is specified, <codeph>pg_dump</codeph> makes no attempt to dump any
              other database objects that the selected schema(s) may depend upon. Therefore, there
              is no guarantee that the results of a specific-schema dump can be successfully
              restored by themselves into a clean database.<note>Non-schema objects such as blobs
                are not dumped when <codeph>-n</codeph> is specified. You can add blobs back to the
                dump with the <codeph>--blobs</codeph> switch.</note></pd>
          </plentry>
          <plentry>
            <pt>-N <varname>schema</varname> | --exclude-schema=<varname>schema</varname></pt>
            <pd>Do not dump any schemas matching the schema pattern. The pattern is interpreted
              according to the same rules as for <codeph>-n</codeph>. <codeph>-N</codeph> can be
              given more than once to exclude schemas matching any of several patterns. When both
                <codeph>-n</codeph> and <codeph>-N</codeph> are given, the behavior is to dump just
              the schemas that match at least one <codeph>-n</codeph> switch but no
                <codeph>-N</codeph> switches. If <codeph>-N</codeph> appears without
                <codeph>-n</codeph>, then schemas matching <codeph>-N</codeph> are excluded from
              what is otherwise a normal dump.</pd>
          </plentry>
          <plentry>
            <pt>-o | --oids</pt>
            <pd>Dump object identifiers (OIDs) as part of the data for every table. Use of this
              option is not recommended for files that are intended to be restored into Greenplum
              Database.</pd>
          </plentry>
          <plentry>
            <pt>-O | --no-owner</pt>
            <pd>Do not output commands to set ownership of objects to match the original database.
              By default, <codeph>pg_dump</codeph> issues <codeph>ALTER OWNER</codeph> or
                <codeph>SET SESSION AUTHORIZATION</codeph> statements to set ownership of created
              database objects. These statements will fail when the script is run unless it is
              started by a superuser (or the same user that owns all of the objects in the script).
              To make a script that can be restored by any user, but will give that user ownership
              of all the objects, specify <codeph>-O</codeph>. This option is only meaningful for
              the plain-text format. For the archive formats, you may specify the option when you
              call <codeph><xref href="./pg_restore.xml#topic1" type="topic" format="dita"
                /></codeph>.</pd>
          </plentry>
          <plentry>
            <pt>-s | --schema-only</pt>
            <pd>Dump only the object definitions (schema), not data.</pd>
            <pd>This option is the inverse of <codeph>--data-only</codeph>. It is similar to, but
              for historical reasons not identical to, specifying <codeph>--section=pre-data
                --section=post-data</codeph>.</pd>
            <pd> (Do not confuse this with the <codeph>--schema</codeph> option, which uses the word
              "schema" in a different meaning.) </pd>
            <pd> To exclude table data for only a subset of tables in the database, see
                <codeph>--exclude-table-data</codeph>.</pd>
          </plentry>
          <plentry>
            <pt>-S <varname>username</varname> | --superuser=<varname>username</varname></pt>
            <pd>Specify the superuser user name to use when disabling triggers. This is
              relevant only if <codeph>--disable-triggers</codeph> is used. It is better to leave this
              out, and instead start the resulting script as a superuser.<note>Greenplum Database
                does not support user-defined triggers.</note></pd>
          </plentry>
          <plentry>
            <pt>-t <varname>table</varname> | --table=<varname>table</varname></pt>
            <pd>Dump only tables (or views or sequences or foreign tables) matching the table pattern. Specify the
              table in the format <codeph>schema.table</codeph>.</pd>
            <pd>Multiple tables can be selected by writing multiple <codeph>-t</codeph> switches.
              Also, the table parameter is interpreted as a pattern according to the same rules used
              by <codeph>psql</codeph>'s <codeph>\d</codeph> commands, so multiple tables can also
              be selected by writing wildcard characters in the pattern. When using wildcards, be
              careful to quote the pattern if needed to prevent the shell from expanding the
              wildcards. The <codeph>-n</codeph> and <codeph>-N</codeph> switches have no effect
              when <codeph>-t</codeph> is used, because tables selected by <codeph>-t</codeph> will
              be dumped regardless of those switches, and non-table objects will not be
                dumped.<note>When <codeph>-t</codeph> is specified, <codeph>pg_dump</codeph> makes
                no attempt to dump any other database objects that the selected table(s) may depend
                upon. Therefore, there is no guarantee that the results of a specific-table dump can
                be successfully restored by themselves into a clean database.<p>Also,
                    <codeph>-t</codeph> cannot be used to specify a child table partition. To dump a
                  partitioned table, you must specify the parent table name.</p></note></pd>
          </plentry>
          <plentry>
            <pt>-T <varname>table</varname> | --exclude-table=<varname>table</varname></pt>
            <pd>Do not dump any tables matching the table pattern. The pattern is interpreted
              according to the same rules as for <codeph>-t</codeph>. <codeph>-T</codeph> can be
              given more than once to exclude tables matching any of several patterns. When both
                <codeph>-t</codeph> and <codeph>-T</codeph> are given, the behavior is to dump just
              the tables that match at least one <codeph>-t</codeph> switch but no
                <codeph>-T</codeph> switches. If <codeph>-T</codeph> appears without
                <codeph>-t</codeph>, then tables matching <codeph>-T</codeph> are excluded from what
              is otherwise a normal dump.</pd>
          </plentry>
          <plentry>
            <pt>-v | --verbose</pt>
            <pd>Specifies verbose mode. This will cause <codeph>pg_dump</codeph> to output detailed
              object comments and start/stop times to the dump file, and progress messages to
              standard error.</pd>
          </plentry>
          <plentry>
          <pt>-V | --version</pt>
          <pd>Print the <codeph>pg_dump</codeph> version and exit.</pd>
        </plentry>
          <plentry>
            <pt>-x | --no-privileges | --no-acl</pt>
            <pd>Prevent dumping of access privileges (<codeph>GRANT/REVOKE</codeph> commands).</pd>
          </plentry>
          <plentry>
            <pt>-Z 0..9 | --compress=0..9</pt>
            <pd>Specify the compression level to use. Zero means no compression. For the custom
              archive format, this specifies compression of individual table-data segments, and the
              default is to compress at a moderate level.</pd>
            <pd>For plain text output, setting a non-zero compression level causes the entire output
              file to be compressed, as though it had been fed through <codeph>gzip</codeph>; but
              the default is not to compress. The tar archive format currently does not support
              compression at all.</pd>
          </plentry>
          <plentry>
            <pt>--binary-upgrade</pt>
            <pd>This option is for use by in-place upgrade utilities. Its use for other purposes is
              not recommended or supported. The behavior of the option may change in future releases
              without notice.</pd>
          </plentry>
          <plentry>
            <pt>--column-inserts | --attribute-inserts</pt>
            <pd>Dump data as <codeph>INSERT</codeph> commands with explicit column names
                <codeph>(INSERT
                INTO</codeph><varname>table</varname><codeph>(</codeph><varname>column</varname><codeph>,
                ...) VALUES ...)</codeph>. This will make restoration very slow; it is mainly useful
              for making dumps that can be loaded into non-PostgreSQL-based databases. However, since
              this option generates a separate command for each row, an error in reloading a row
              causes only that row to be lost rather than the entire table contents.</pd>
          </plentry>
          <plentry>
            <pt>--disable-dollar-quoting</pt>
            <pd>This option disables the use of dollar quoting for function bodies, and forces them
              to be quoted using SQL standard string syntax.</pd>
          </plentry>
          <plentry>
            <pt>--disable-triggers</pt>
            <pd>This option is relevant only when creating a data-only dump. It instructs
                <codeph>pg_dump</codeph> to include commands to temporarily disable triggers on the
              target tables while the data is reloaded. Use this if you have triggers on the tables
              that you do not want to invoke during data reload. The commands emitted for
                <codeph>--disable-triggers</codeph> must be done as superuser. So, you should also
              specify a superuser name with <codeph>-S</codeph>, or preferably be careful to start
              the resulting script as a superuser. This option is only meaningful for the plain-text
              format. For the archive formats, you may specify the option when you call
                  <codeph><xref href="./pg_restore.xml#topic1" type="topic" format="dita"
                /></codeph>.<note>Greenplum Database does not support user-defined
              triggers.</note></pd>
          </plentry>
          <plentry>
            <pt><codeph>--exclude-table-data=<varname>table</varname></codeph></pt>
            <pd> Do not dump data for any tables matching the <varname>table</varname> pattern. The
              pattern is interpreted according to the same rules as for <codeph>-t</codeph>.
                <codeph>--exclude-table-data</codeph> can be given more than once to exclude tables
              matching any of several patterns. This option is useful when you need the definition
              of a particular table even though you do not need the data in it.</pd>
            <pd> To exclude data for all tables in the database, see <codeph>--schema-only</codeph>.
            </pd>
          </plentry>
          <plentry>
            <pt><codeph>--if-exists</codeph></pt>
            <pd> Use conditional commands (i.e. add an <codeph>IF EXISTS</codeph> clause) when
              cleaning database objects. This option is not valid unless <codeph>--clean</codeph> is
              also specified. </pd>
          </plentry>         
          <plentry>
            <pt>--inserts</pt>
            <pd>Dump data as <codeph>INSERT</codeph> commands (rather than <codeph>COPY</codeph>).
              This will make restoration very slow; it is mainly useful for making dumps that can be
              loaded into non-PostgreSQL-based databases. However, since this option generates a
              separate command for each row, an error in reloading a row causes only that row to be
              lost rather than the entire table contents. Note that the restore may fail altogether
              if you have rearranged column order. The <codeph>--column-inserts</codeph> option is
              safe against column order changes, though even slower. </pd>
          </plentry>
          <plentry>
            <pt>--lock-wait-timeout=<varname>timeout</varname></pt>
            <pd>Do not wait forever to acquire shared table locks at the beginning of the dump.
              Instead, fail if unable to lock a table within the specified
                <varname>timeout</varname>. Specify <varname>timeout</varname> as a number of
              milliseconds.</pd>
          </plentry>
          <plentry>
            <pt>--no-security-labels</pt>
            <pd>Do not dump security labels.</pd>
          </plentry>
          <plentry>
            <pt>--no-synchronized-snapshots</pt>
            <pd>This option allows running <codeph>pg_dump -j</codeph> against a pre-6.0 Greenplum
              Database server; see the documentation of the <codeph>-j</codeph> parameter for more
              details.</pd>
          </plentry>

          <plentry>
            <pt>--no-tablespaces</pt>
            <pd>Do not output commands to select tablespaces. With this option, all objects will be
              created in whichever tablespace is the default during restore.</pd>
            <pd>This option is only meaningful for the plain-text format. For the archive formats,
              you can specify the option when you call <codeph>pg_restore</codeph>.</pd>
          </plentry>
          <plentry>
            <pt>--no-unlogged-table-data</pt>
            <pd>Do not dump the contents of unlogged tables. This option has no effect
               on whether or not the table definitions (schema) are dumped; it only
               suppresses dumping the table data. Data in unlogged tables is always
               excluded when dumping from a standby server.</pd>
          </plentry>
          <plentry>
            <pt>--quote-all-identifiers</pt>
            <pd>Force quoting of all identifiers. This option is recommended when dumping
               a database from a server whose Greenplum Database major version is different
               from <codeph>pg_dump</codeph>'s, or when the output is intended to be loaded
               into a server of a different major version. By default,
               <codeph>pg_dump</codeph> quotes only identifiers that are reserved words in
               its own major version. This sometimes results in compatibility issues when
               dealing with servers of other versions that may have slightly different sets
               of reserved words. Using <codeph>--quote-all-identifiers</codeph> prevents
               such issues, at the price of a harder-to-read dump script.</pd>
          </plentry>
          <plentry>
            <pt>--section=<varname>sectionname</varname></pt>
            <pd>Only dump the named section. The section name can be <codeph>pre-data</codeph>,
              <codeph>data</codeph>, or <codeph>post-data</codeph>. This option can be specified
              more than once to select multiple sections. The default is to dump all sections.</pd>
            <pd>The <codeph>data</codeph> section contains actual table data and sequence values.
               <codeph>post-data</codeph> items include definitions of indexes, triggers, rules,
               and constraints other than validated check constraints. <codeph>pre-data</codeph>
               items include all other data definition items.</pd>
          </plentry>
          <plentry>
            <pt>--serializable-deferrable</pt>
            <pd>Use a serializable transaction for the dump, to ensure that the snapshot
              used is consistent with later database states; but do this by waiting for
              a point in the transaction stream at which no anomalies can be present, so
              that there isn't a risk of the dump failing or causing other transactions
              to roll back with a serialization_failure.</pd>
            <pd>This option is not beneficial for a dump which is intended only for
              disaster recovery. It could be useful for a dump used to load a copy of the
              database for reporting or other read-only load sharing while the original
              database continues to be updated. Without it the dump may reflect a state
              which is not consistent with any serial execution of the transactions
              eventually committed. For example, if batch processing techniques are used,
              a batch may show as closed in the dump without all of the items which are
              in the batch appearing.</pd>
            <pd>This option will make no difference if there are no read-write transactions
              active when <codeph>pg_dump</codeph> is started. If read-write transactions
              are active, the start of the dump may be delayed for an indeterminate length
              of time. Once running, performance with or without the switch is the same.</pd>
            <pd><note>Because Greenplum Database does not support serializable transactions,
              the <codeph>--serializable-deferrable</codeph> option has no effect in
              Greenplum Database.</note></pd>
          </plentry>
          <plentry>
            <pt>--use-set-session-authorization</pt>
            <pd>Output SQL-standard <codeph>SET SESSION AUTHORIZATION</codeph> commands instead of
                <codeph>ALTER OWNER</codeph> commands to determine object ownership. This makes the
              dump more standards-compatible, but depending on the history of the objects in the
              dump, may not restore properly. A dump using <codeph>SET SESSION
                AUTHORIZATION</codeph> will require superuser privileges to restore correctly,
              whereas <codeph>ALTER OWNER</codeph> requires lesser privileges.</pd>
          </plentry>
          <plentry>
            <pt>--gp-syntax | --no-gp-syntax </pt>
            <pd>Use <codeph>--gp-syntax</codeph> to dump Greenplum Database syntax in the
                <codeph>CREATE TABLE</codeph> statements. This allows the distribution policy
                (<codeph>DISTRIBUTED BY</codeph> or <codeph>DISTRIBUTED RANDOMLY</codeph> clauses)
              of a Greenplum Database table to be dumped, which is useful for restoring into other
              Greenplum Database systems. The default is to include Greenplum Database syntax when
              connected to a Greenplum Database system, and to exclude it when connected to a
              regular PostgreSQL system.</pd>
          </plentry>
          <plentry>
            <pt>--function-oids <varname>oids</varname></pt>
            <pd>Dump the function(s) specified in the <varname>oids</varname> list of object
              identifiers. <note>This option is provided solely for use by other administration
              utilities; its use for any other purpose is not recommended or supported. The
              behaviour of the option may change in future releases without notice.</note></pd>
          </plentry>
          <plentry>
            <pt>--relation-oids <varname>oids</varname></pt>
            <pd>Dump the relation(s) specified in the <varname>oids</varname> list of object
              identifiers. <note>This option is provided solely for use by other administration
              utilities; its use for any other purpose is not recommended or supported. The
              behaviour of the option may change in future releases without notice.</note></pd>
          </plentry>
          <plentry>
            <pt>-? | --help</pt>
            <pd>Show help about <codeph>pg_dump</codeph> command line arguments, and exit.</pd>
          </plentry>
        </parml>
      </sectiondiv>
      <sectiondiv id="section6">
        <b>Connection Options</b>
        <parml>
          <plentry>
            <pt>-d <varname>dbname</varname> | --dbname=<varname>dbname</varname></pt>
            <pd>Specifies the name of the database to connect to. This is equivalent to
              specifying <varname>dbname</varname> as the first non-option argument on the
              command line.</pd>
            <pd>If this parameter contains an <codeph>=</codeph> sign or starts with a valid
              URI prefix (<codeph>postgresql://</codeph> or <codeph>postgres://</codeph>), it
              is treated as a <varname>conninfo</varname> string. See <xref
              href="https://www.postgresql.org/docs/9.4/libpq-connect.html#LIBPQ-CONNSTRING"
              format="html" scope="external">Connection Strings</xref> in the PostgreSQL
              documentation for more information.</pd>
          </plentry>
          <plentry>
            <pt>-h <varname>host</varname> | --host=<varname>host</varname></pt>
            <pd>The host name of the machine on which the Greenplum Database master database server
              is running. If not specified, reads from the environment variable
                <codeph>PGHOST</codeph> or defaults to localhost.</pd>
          </plentry>
          <plentry>
            <pt>-p <varname>port</varname> | --port=<varname>port</varname></pt>
            <pd>The TCP port on which the Greenplum Database master database server is listening for
              connections. If not specified, reads from the environment variable
                <codeph>PGPORT</codeph> or defaults to 5432.</pd>
          </plentry>
          <plentry>
            <pt>-U <varname>username</varname> | --username=<varname>username</varname></pt>
            <pd>The database role name to connect as. If not specified, reads from the environment
              variable <codeph>PGUSER</codeph> or defaults to the current system role name.</pd>
          </plentry>
          <plentry>
            <pt>-W | --password</pt>
            <pd>Force a password prompt.</pd>
          </plentry>
          <plentry>
            <pt>-w | --no-password</pt>
            <pd>Never issue a password prompt. If the server requires password authentication and a
              password is not available by other means such as a <codeph>.pgpass</codeph> file the
              connection attempt will fail. This option can be useful in batch jobs and scripts
              where no user is present to enter a password.</pd>
          </plentry>
          <plentry>
            <pt>--role=<varname>rolename</varname></pt>
            <pd>Specifies a role name to be used to create the dump. This option causes
                <codeph>pg_dump</codeph> to issue a <codeph>SET ROLE
                <varname>rolename</varname></codeph> command after connecting to the database. It is
              useful when the authenticated user (specified by <codeph>-U</codeph>) lacks privileges
              needed by <codeph>pg_dump</codeph>, but can switch to a role with the required rights.
              Some installations have a policy against logging in directly as a superuser, and use
              of this option allows dumps to be made without violating the policy.</pd>
          </plentry>
        </parml>
      </sectiondiv>
    </section>
    <section id="section7">
      <title>Notes</title>
      <p>When a data-only dump is chosen and the option <codeph>--disable-triggers</codeph> is used,
          <codeph>pg_dump</codeph> emits commands to disable triggers on user tables before
        inserting the data and commands to re-enable them after the data has been inserted. If the
        restore is stopped in the middle, the system catalogs may be left in the wrong state.</p>
      <p>The dump file produced by <codeph>pg_dump</codeph> does not contain the statistics used by
        the optimizer to make query planning decisions. Therefore, it is wise to run
          <codeph>ANALYZE</codeph> after restoring from a dump file to ensure optimal
        performance.</p>
      <p>The database activity of <codeph>pg_dump</codeph> is normally collected by the statistics
        collector. If this is undesirable, you can set parameter <codeph>track_counts</codeph> to
        false via <codeph>PGOPTIONS</codeph> or the <codeph>ALTER USER</codeph> command.</p>
      <p>Because <codeph>pg_dump</codeph> may be used to transfer data to newer versions of
        Greenplum Database, the output of <codeph>pg_dump</codeph> can be expected to load into
        Greenplum Database versions newer than <codeph>pg_dump</codeph>'s version.
          <codeph>pg_dump</codeph> can also dump from Greenplum Database versions older than its own
        version. However, <codeph>pg_dump</codeph> cannot dump from Greenplum Database versions
        newer than its own major version; it will refuse to even try, rather than risk making an
        invalid dump. Also, it is not guaranteed that <codeph>pg_dump</codeph>'s output can be
        loaded into a server of an older major version — not even if the dump was taken from a
        server of that version. Loading a dump file into an older server may require manual editing
        of the dump file to remove syntax not understood by the older server. Use of the
          <codeph>--quote-all-identifiers</codeph> option is recommended in cross-version cases, as
        it can prevent problems arising from varying reserved-word lists in different Greenplum
        Database versions.</p>
    </section>
    <section id="section8">
      <title>Examples</title>
      <p>Dump a database called <codeph>mydb</codeph> into a SQL-script file:</p>
      <codeblock>pg_dump mydb &gt; db.sql</codeblock>
      <p>To reload such a script into a (freshly created) database named <codeph>newdb</codeph>: </p>
      <codeblock>psql -d newdb -f db.sql</codeblock>
      <p>Dump a Greenplum Database in tar file format and include distribution policy
        information:</p>
      <codeblock>pg_dump -Ft --gp-syntax mydb &gt; db.tar</codeblock>
      <p>To dump a database into a custom-format archive file: </p>
      <codeblock>pg_dump -Fc mydb &gt; db.dump</codeblock>
      <p>To dump a database into a directory-format archive: </p>
      <codeblock>pg_dump -Fd mydb -f dumpdir</codeblock>
      <p>To dump a database into a directory-format archive in parallel with 5 worker jobs: </p>
      <codeblock>pg_dump -Fd mydb -j 5 -f dumpdir</codeblock>
      <p>To reload an archive file into a (freshly created) database named <codeph>newdb</codeph>: </p>
      <codeblock>pg_restore -d newdb db.dump</codeblock>
      <p>To dump a single table named <codeph>mytab</codeph>: </p>
      <codeblock>pg_dump -t mytab mydb &gt; db.sql</codeblock>
      <p>To specify an upper-case or mixed-case name in <codeph>-t</codeph> and related switches,
        you need to double-quote the name; else it will be folded to lower case. But double quotes
        are special to the shell, so in turn they must be quoted. Thus, to dump a single table with
        a mixed-case name, you need something like:</p>
      <codeblock>pg_dump -t '"MixedCaseName"' mydb &gt; mytab.sql</codeblock>
    </section>
    <section id="section9">
      <title>See Also</title>
      <p><codeph><xref href="./pg_dumpall.xml#topic1" type="topic" format="dita"/></codeph>,
            <codeph><xref href="pg_restore.xml#topic1" type="topic" format="dita"/></codeph>,
            <codeph><xref href="psql.xml#topic1" type="topic" format="dita"/></codeph></p>
    </section>
  </body>
</topic>
