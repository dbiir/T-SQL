<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE dita PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<dita>
  <topic id="topic_xmh_44c_qfb">
    <title>Text Search Data Types</title>
    <body>
      <p>Greenplum Database provides two data types that are designed to support full text search,
        which is the activity of searching through a collection of natural-language <i>documents</i>
        to locate those that best match a <i>query</i>. The <codeph>tsvector</codeph> type
        represents a document in a form optimized for text search; the <codeph>tsquery</codeph> type
        similarly represents a text query. <xref
          href="../admin_guide/textsearch/full-text-search.xml"/> provides a detailed explanation of
        this facility, and <xref href="function-summary.xml#topic_vpj_ss1_lfb"/> summarizes the
        related functions and operators.</p>
      <p>The <codeph>tsvector</codeph> and <codeph>tsquery</codeph> types cannot be part of the
        distribution key of a Greenplum Database table.</p>
    </body>
    <topic id="topic_mzv_44c_qfb">
      <title>tsvector</title>
      <body>
        <p>A <codeph>tsvector</codeph> value is a sorted list of distinct <i>lexemes</i>, which are
          words that have been <i>normalized</i> to merge different variants of the same word (see
            <xref href="../admin_guide/textsearch/full-text-search.xml"/> for details). Sorting and
          duplicate-elimination are done automatically during input, as shown in this example:</p>
        <codeblock>SELECT 'a fat cat sat on a mat and ate a fat rat'::tsvector;
                      tsvector
----------------------------------------------------
 'a' 'and' 'ate' 'cat' 'fat' 'mat' 'on' 'rat' 'sat'</codeblock>
        <p>To represent lexemes containing whitespace or punctuation, surround them with quotes:</p>
        <codeblock>SELECT $$the lexeme '    ' contains spaces$$::tsvector;
                 tsvector                  
-------------------------------------------
 '    ' 'contains' 'lexeme' 'spaces' 'the'</codeblock>
        <p>(We use dollar-quoted string literals in this example and the next one to avoid the
          confusion of having to double quote marks within the literals.) Embedded quotes and
          backslashes must be doubled:</p>
        <codeblock>SELECT $$the lexeme 'Joe''s' contains a quote$$::tsvector;
                    tsvector                    
------------------------------------------------
 'Joe''s' 'a' 'contains' 'lexeme' 'quote' 'the'</codeblock>
        <p>Optionally, integer <i>positions</i> can be attached to lexemes:</p>
        <codeblock>SELECT 'a:1 fat:2 cat:3 sat:4 on:5 a:6 mat:7 and:8 ate:9 a:10 fat:11 rat:12'::tsvector;
                                  tsvector
-------------------------------------------------------------------------------
 'a':1,6,10 'and':8 'ate':9 'cat':3 'fat':2,11 'mat':7 'on':5 'rat':12 'sat':4</codeblock>
        <p>A position normally indicates the source word's location in the document. Positional
          information can be used for <i>proximity ranking</i>. Position values can range from 1 to
          16383; larger numbers are silently set to 16383. Duplicate positions for the same lexeme
          are discarded.</p>
        <p>Lexemes that have positions can further be labeled with a <i>weight</i>, which can be
            <codeph>A</codeph>, <codeph>B</codeph>, <codeph>C</codeph>, or <codeph>D</codeph>.
            <codeph>D</codeph> is the default and hence is not shown on output:</p>
        <codeblock>SELECT 'a:1A fat:2B,4C cat:5D'::tsvector;
          tsvector          
----------------------------
 'a':1A 'cat':5 'fat':2B,4C</codeblock>
        <p>Weights are typically used to reflect document structure, for example by marking title
          words differently from body words. Text search ranking functions can assign different
          priorities to the different weight markers.</p>
        <p>It is important to understand that the <codeph>tsvector</codeph> type itself does not
          perform any normalization; it assumes the words it is given are normalized appropriately
          for the application. For example,</p>
        <codeblock>select 'The Fat Rats'::tsvector;
      tsvector      
--------------------
 'Fat' 'Rats' 'The'</codeblock>
        <p>For most English-text-searching applications the above words would be considered
          non-normalized, but tsvector doesn't care. Raw document text should usually be passed
          through <codeph>to_tsvector</codeph> to normalize the words appropriately for
          searching:</p>
        <codeblock>SELECT to_tsvector('english', 'The Fat Rats');
   to_tsvector   
-----------------
 'fat':2 'rat':3</codeblock>
      </body>
    </topic>
    <topic id="topic_w2h_p4c_qfb">
      <title>tsquery</title>
      <body>
        <p>A <codeph>tsquery</codeph> value stores lexemes that are to be searched for, and combines
          them honoring the Boolean operators <codeph>&amp;</codeph> (AND), <codeph>|</codeph> (OR),
          and <codeph>!</codeph> (NOT). Parentheses can be used to enforce grouping of the
          operators:</p>
        <codeblock>SELECT 'fat &amp; rat'::tsquery;
    tsquery    
---------------
 'fat' &amp; 'rat'

SELECT 'fat &amp; (rat | cat)'::tsquery;
          tsquery          
---------------------------
 'fat' &amp; ( 'rat' | 'cat' )

SELECT 'fat &amp; rat &amp; ! cat'::tsquery;
        tsquery         
------------------------
 'fat' &amp; 'rat' &amp; !'cat'</codeblock>
        <p>In the absence of parentheses, <codeph>!</codeph> (NOT) binds most tightly, and
            <codeph>&amp;</codeph> (AND) binds more tightly than <codeph>|</codeph> (OR).</p>
        <p>Optionally, lexemes in a <codeph>tsquery</codeph> can be labeled with one or more weight
          letters, which restricts them to match only <codeph>tsvector</codeph> lexemes with
          matching weights:</p>
        <codeblock>SELECT 'fat:ab &amp; cat'::tsquery;
    tsquery
------------------
 'fat':AB &amp; 'cat'</codeblock>
        <p>Also, lexemes in a <codeph>tsquery</codeph> can be labeled with * to specify prefix
          matching:</p>
        <codeblock>SELECT 'super:*'::tsquery;
  tsquery  
-----------
 'super':*</codeblock>
        <p>This query will match any word in a <codeph>tsvector</codeph> that begins with "super".
          Note that prefixes are first processed by text search configurations, which means this
          comparison returns true:</p>
        <codeblock>SELECT to_tsvector( 'postgraduate' ) @@ to_tsquery( 'postgres:*' );
 ?column? 
----------
 t
(1 row)</codeblock>
        <p>because <codeph>postgres</codeph> gets stemmed to <codeph>postgr</codeph>:</p>
        <codeblock>SELECT to_tsquery('postgres:*');
 to_tsquery 
------------
 'postgr':*
(1 row)</codeblock>
        <p>which then matches <codeph>postgraduate</codeph>.</p>
        <p>Quoting rules for lexemes are the same as described previously for lexemes in
            <codeph>tsvector</codeph>; and, as with <codeph>tsvector</codeph>, any required
          normalization of words must be done before converting to the <codeph>tsquery</codeph>
          type. The <codeph>to_tsquery</codeph> function is convenient for performing such
          normalization:</p>
        <codeblock>SELECT to_tsquery('Fat:ab &amp; Cats');
    to_tsquery    
------------------
 'fat':AB &amp; 'cat'</codeblock>
      </body>
    </topic>
  </topic>
</dita>
