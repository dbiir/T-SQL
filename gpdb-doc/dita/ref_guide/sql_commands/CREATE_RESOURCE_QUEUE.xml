<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1">
  <title id="by20941">CREATE RESOURCE QUEUE</title>
  <body>
    <p id="sql_command_desc">Defines a new resource queue.</p>
    <section id="section2">
      <title>Synopsis</title>
      <codeblock id="sql_command_synopsis">CREATE RESOURCE QUEUE <varname>name</varname> WITH (<varname>queue_attribute</varname>=<varname>value</varname> [, ... ])</codeblock>
      <p>where <varname>queue_attribute</varname> is:</p>
      <codeblock>    ACTIVE_STATEMENTS=<varname>integer</varname>
        [ MAX_COST=<varname>float </varname>[COST_OVERCOMMIT={TRUE|FALSE}] ]
        [ MIN_COST=<varname>float </varname>]
        [ PRIORITY={MIN|LOW|MEDIUM|HIGH|MAX} ]
        [ MEMORY_LIMIT='<varname>memory_units</varname>' ]

 | MAX_COST=float [ COST_OVERCOMMIT={TRUE|FALSE} ]
        [ ACTIVE_STATEMENTS=<varname>integer </varname>]
        [ MIN_COST=<varname>float </varname>]
        [ PRIORITY={MIN|LOW|MEDIUM|HIGH|MAX} ]
        [ MEMORY_LIMIT='<varname>memory_units</varname>' ]</codeblock>
    </section>
    <section id="section3">
      <title>Description</title>
      <p>Creates a new resource queue for Greenplum Database resource management. A resource queue
        must have either an <codeph>ACTIVE_STATEMENTS</codeph> or a <codeph>MAX_COST</codeph> value
        (or it can have both). Only a superuser can create a resource queue.</p>
      <p>Resource queues with an <codeph>ACTIVE_STATEMENTS</codeph> threshold set a maximum limit on
        the number of queries that can be executed by roles assigned to that queue. It controls the
        number of active queries that are allowed to run at the same time. The value for
          <codeph>ACTIVE_STATEMENTS</codeph> should be an integer greater than 0. </p>
      <p>Resource queues with a <codeph>MAX_COST</codeph> threshold set a maximum limit on the total
        cost of queries that can be executed by roles assigned to that queue. Cost is measured in
        the <i>estimated total cost</i> for the query as determined by the query planner (as shown
        in the <codeph>EXPLAIN</codeph> output for a query). Therefore, an administrator must be
        familiar with the queries typically executed on the system in order to set an appropriate
        cost threshold for a queue. Cost is measured in units of disk page fetches; 1.0 equals one
        sequential disk page read. The value for <codeph>MAX_COST</codeph> is specified as a
        floating point number (for example 100.0) or can also be specified as an exponent (for
        example 1e+2). If a resource queue is limited based on a cost threshold, then the
        administrator can allow <codeph>COST_OVERCOMMIT=TRUE</codeph> (the default). This means that
        a query that exceeds the allowed cost threshold will be allowed to run but only when the
        system is idle. If <codeph>COST_OVERCOMMIT=FALSE</codeph> is specified, queries that exceed
        the cost limit will always be rejected and never allowed to run. Specifying a value for
          <codeph>MIN_COST</codeph> allows the administrator to define a cost for small queries that
        will be exempt from resource queueing.</p>
      <note>GPORCA and the Postgres Planner utilize different
              query costing models and may compute different costs for the same query.
              The Greenplum Database resource queue resource management scheme neither
              differentiates nor aligns costs between GPORCA and the Postgres Planner; it
              uses the literal cost value returned from the optimizer to throttle
              queries.<p> When resource queue-based resource management is active, use the
              <codeph>MEMORY_LIMIT</codeph> and <codeph>ACTIVE_STATEMENTS</codeph> limits for
              resource queues rather than configuring cost-based limits. Even when using GPORCA,
              Greenplum Database may fall back to using the Postgres Planner for certain
              queries, so using cost-based limits can lead to unexpected results.</p></note>
      <p>If a value is not defined for <codeph>ACTIVE_STATEMENTS</codeph> or
          <codeph>MAX_COST</codeph>, it is set to <codeph>-1</codeph> by default (meaning no limit).
        After defining a resource queue, you must assign roles to the queue using the <codeph><xref
            href="ALTER_ROLE.xml#topic1" type="topic" format="dita"/></codeph> or <codeph><xref
            href="./CREATE_ROLE.xml#topic1" type="topic" format="dita"/></codeph> command.</p>
      <p>You can optionally assign a <codeph>PRIORITY</codeph> to a resource queue to control the
        relative share of available CPU resources used by queries associated with the queue in
        relation to other resource queues. If a value is not defined for <codeph>PRIORITY</codeph>,
        queries associated with the queue have a default priority of <codeph>MEDIUM</codeph>.</p>
      <p>Resource queues with an optional <codeph>MEMORY_LIMIT</codeph> threshold set a maximum
        limit on the amount of memory that all queries submitted through a resource queue can
        consume on a segment host. This determines the total amount of memory that all worker
        processes of a query can consume on a segment host during query execution. Greenplum
        recommends that <codeph>MEMORY_LIMIT</codeph> be used in conjunction with
          <codeph>ACTIVE_STATEMENTS</codeph> rather than with <codeph>MAX_COST</codeph>. The default
        amount of memory allotted per query on statement-based queues is: <codeph>MEMORY_LIMIT /
          ACTIVE_STATEMENTS</codeph>. The default amount of memory allotted per query on cost-based
        queues is: <codeph>MEMORY_LIMIT * (query_cost / MAX_COST)</codeph>.</p>
      <p>The default memory allotment can be overridden on a per-query basis using the
          <codeph>statement_mem</codeph> server configuration parameter, provided that
          <codeph>MEMORY_LIMIT</codeph> or <codeph>max_statement_mem</codeph> is not exceeded. For
        example, to allocate more memory to a particular query:</p>
      <codeblock>=&gt; SET statement_mem='2GB';
=&gt; SELECT * FROM my_big_table WHERE column='value' ORDER BY id;
=&gt; RESET statement_mem;</codeblock>
      <p>The <codeph>MEMORY_LIMIT</codeph> value for all of your resource queues should not exceed
        the amount of physical memory of a segment host. If workloads are staggered over multiple
        queues, memory allocations can be oversubscribed. However, queries can be cancelled during
        execution if the segment host memory limit specified in
          <codeph>gp_vmem_protect_limit</codeph> is exceeded.</p>
      <p>For information about <codeph>statement_mem</codeph>, <codeph>max_statement</codeph>, and
          <codeph>gp_vmem_protect_limit</codeph>, see <xref href="../config_params/guc_config.xml"
          type="topic" format="dita"/>.</p>
    </section>
    <section id="section4">
      <title>Parameters</title>
      <parml>
        <plentry>
          <pt>
            <varname>name</varname>
          </pt>
          <pd>The name of the resource queue.</pd>
        </plentry>
        <plentry>
          <pt>ACTIVE_STATEMENTS <varname>integer</varname></pt>
          <pd>Resource queues with an <codeph>ACTIVE_STATEMENTS</codeph> threshold limit the number
            of queries that can be executed by roles assigned to that queue. It controls the number
            of active queries that are allowed to run at the same time. The value for
              <codeph>ACTIVE_STATEMENTS</codeph> should be an integer greater than 0.</pd>
        </plentry>
        <plentry>
          <pt>MEMORY_LIMIT <varname>'memory_units'</varname></pt>
          <pd>Sets the total memory quota for all statements submitted from users in this resource
            queue. Memory units can be specified in kB, MB or GB. The minimum memory quota for a
            resource queue is 10MB. There is no maximum, however the upper boundary at query
            execution time is limited by the physical memory of a segment host. The default is no
            limit (<codeph>-1</codeph>).</pd>
        </plentry>
        <plentry>
          <pt>MAX_COST <varname>float</varname></pt>
          <pd>Resource queues with a <codeph>MAX_COST</codeph> threshold set a maximum limit on the
            total cost of queries that can be executed by roles assigned to that queue. Cost is
            measured in the <i>estimated total cost</i> for the query as determined by the Greenplum
            Database query optimizer (as shown in the <codeph>EXPLAIN</codeph> output for a query).
            Therefore, an administrator must be familiar with the queries typically executed on the
            system in order to set an appropriate cost threshold for a queue. Cost is measured in
            units of disk page fetches; 1.0 equals one sequential disk page read. The value for
              <codeph>MAX_COST</codeph> is specified as a floating point number (for example 100.0)
            or can also be specified as an exponent (for example 1e+2).</pd>
        </plentry>
        <plentry>
          <pt>COST_OVERCOMMIT <varname>boolean</varname></pt>
          <pd>If a resource queue is limited based on <codeph>MAX_COST</codeph>, then the
            administrator can allow <codeph>COST_OVERCOMMIT</codeph> (the default). This means that
            a query that exceeds the allowed cost threshold will be allowed to run but only when the
            system is idle. If <codeph>COST_OVERCOMMIT=FALSE </codeph>is specified, queries that
            exceed the cost limit will always be rejected and never allowed to run.</pd>
        </plentry>
        <plentry>
          <pt>MIN_COST <varname>float</varname></pt>
          <pd>The minimum query cost limit of what is considered a small query. Queries with a cost
            under this limit will not be queued and run immediately. Cost is measured in the
              <i>estimated total cost</i> for the query as determined by the query planner (as shown
            in the <codeph>EXPLAIN</codeph> output for a query). Therefore, an administrator must be
            familiar with the queries typically executed on the system in order to set an
            appropriate cost for what is considered a small query. Cost is measured in units of disk
            page fetches; 1.0 equals one sequential disk page read. The value for <codeph>MIN_COST
            </codeph>is specified as a floating point number (for example 100.0) or can also be
            specified as an exponent (for example 1e+2).</pd>
        </plentry>
        <plentry>
          <pt>PRIORITY={MIN|LOW|MEDIUM|HIGH|MAX}</pt>
          <pd>Sets the priority of queries associated with a resource queue. Queries or statements
            in queues with higher priority levels will receive a larger share of available CPU
            resources in case of contention. Queries in low-priority queues may be delayed while
            higher priority queries are executed. If no priority is specified, queries associated
            with the queue have a priority of <codeph>MEDIUM</codeph>.</pd>
        </plentry>
      </parml>
    </section>
    <section id="section5"><title>Notes</title><p>Use the
          <codeph>gp_toolkit.gp_resqueue_status</codeph> system view to see the limit settings and
        current status of a resource
        queue:</p><codeblock>SELECT * from gp_toolkit.gp_resqueue_status WHERE 
  rsqname='queue_name';</codeblock><p>There
        is also another system view named <codeph>pg_stat_resqueues</codeph> which shows statistical
        metrics for a resource queue over time. To use this view, however, you must enable the
          <codeph>stats_queue_level</codeph> server configuration parameter. See "Managing Workload
        and Resources" in the <i>Greenplum Database Administrator Guide</i> for more information
        about using resource queues.</p><p><codeph>CREATE RESOURCE QUEUE</codeph> cannot be run
        within a transaction.</p>Also, an SQL statement that is run during the execution of an
        <codeph>EXPLAIN ANALYZE</codeph> command is excluded from resource queues.</section>
    <section id="section6">
      <title>Examples</title>
      <p>Create a resource queue with an active query limit of 20: </p>
      <codeblock>CREATE RESOURCE QUEUE myqueue WITH (ACTIVE_STATEMENTS=20);</codeblock>
      <p>Create a resource queue with an active query limit of 20 and a total memory limit of 2000MB
        (each query will be allocated 100MB of segment host memory at execution time): </p>
      <codeblock>CREATE RESOURCE QUEUE myqueue WITH (ACTIVE_STATEMENTS=20, 
  MEMORY_LIMIT='2000MB');</codeblock>
      <p>Create a resource queue with a query cost limit of 3000.0: </p>
      <codeblock>CREATE RESOURCE QUEUE myqueue WITH (MAX_COST=3000.0);</codeblock>
      <p>Create a resource queue with a query cost limit of 3<sup>10</sup> (or 30000000000.0) and do
        not allow overcommit. Allow small queries with a cost under 500 to run immediately:</p>
      <codeblock>CREATE RESOURCE QUEUE myqueue WITH (MAX_COST=3e+10, 
  COST_OVERCOMMIT=FALSE, MIN_COST=500.0);</codeblock>
      <p>Create a resource queue with both an active query limit and a query cost limit:</p>
      <codeblock>CREATE RESOURCE QUEUE myqueue WITH (ACTIVE_STATEMENTS=30, 
  MAX_COST=5000.00);</codeblock>
      <p>Create a resource queue with an active query limit of 5 and a maximum priority setting: </p>
      <codeblock>CREATE RESOURCE QUEUE myqueue WITH (ACTIVE_STATEMENTS=5, 
  PRIORITY=MAX);</codeblock>
    </section>
    <section id="section7">
      <title>Compatibility</title>
      <p><codeph>CREATE RESOURCE QUEUE</codeph> is a Greenplum Database extension. There is no
        provision for resource queues or resource management in the SQL standard.</p>
    </section>
    <section id="section8">
      <title>See Also</title>
      <p><codeph><xref href="ALTER_ROLE.xml#topic1" type="topic" format="dita"/></codeph>,
            <codeph><xref href="./CREATE_ROLE.xml#topic1" type="topic" format="dita"/></codeph>,
            <codeph><xref href="ALTER_RESOURCE_QUEUE.xml#topic1" type="topic" format="dita"
          /></codeph>, <codeph><xref href="./DROP_RESOURCE_QUEUE.xml#topic1" type="topic"
            format="dita"/></codeph></p>
    </section>
  </body>
</topic>
