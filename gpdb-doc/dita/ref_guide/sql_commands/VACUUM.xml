<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1">
  <title id="er20941">VACUUM</title>
  <body>
    <p id="sql_command_desc">Garbage-collects and optionally analyzes a database.</p>
    <section id="section2">
      <title>Synopsis</title>
      <codeblock id="sql_command_synopsis">VACUUM [({ FULL | FREEZE | VERBOSE | ANALYZE } [, ...])] [<varname>table</varname> [(<varname>column</varname> [, ...] )]]
        
VACUUM [FULL] [FREEZE] [VERBOSE] [<varname>table</varname>]

VACUUM [FULL] [FREEZE] [VERBOSE] ANALYZE
              [<varname>table</varname> [(<varname>column</varname> [, ...] )]]</codeblock>
    </section>
    <section id="section3">
      <title>Description</title>
      <p><codeph>VACUUM</codeph> reclaims storage occupied by deleted tuples. In normal Greenplum
        Database operation, tuples that are deleted or obsoleted by an update are not physically
        removed from their table; they remain present on disk until a <codeph>VACUUM</codeph> is
        done. Therefore it is necessary to do <codeph>VACUUM</codeph> periodically, especially on
        frequently-updated tables.</p>
      <p>With no parameter, <codeph>VACUUM</codeph> processes every table in the current database.
        With a parameter, <codeph>VACUUM</codeph> processes only that table.</p>
      <p><codeph>VACUUM ANALYZE</codeph> performs a <codeph>VACUUM</codeph> and then an
          <codeph>ANALYZE</codeph> for each selected table. This is a handy combination form for
        routine maintenance scripts. See <codeph><xref href="ANALYZE.xml#topic1"
          >ANALYZE</xref></codeph> for more details about its processing.</p>
      <p><codeph>VACUUM</codeph> (without <codeph>FULL</codeph>) marks deleted and obsoleted data in
        tables and indexes for future reuse and reclaims space for re-use only if the space is at
        the end of the table and an exclusive table lock can be easily obtained. Unused space at the
        start or middle of a table remains as is. With heap tables, this form of the command can
        operate in parallel with normal reading and writing of the table, as an exclusive lock is
        not obtained. However, extra space is not returned to the operating
        system (in most cases); it's just kept available for re-use within the
        same table. <codeph>VACUUM FULL</codeph> rewrites the entire contents
        of the table into a new disk file with no extra space, allowing unused
        space to be returned to the operating system. This form is much slower and
        requires an exclusive lock on each table while it is being processed.
      </p>
      <p>With append-optimized tables, <codeph>VACUUM</codeph> compacts a table by first vacuuming
        the indexes, then compacting each segment file in turn, and finally vacuuming auxiliary
        relations and updating statistics. On each segment, visible rows are copied from the current
        segment file to a new segment file, and then the current segment file is scheduled to be
        dropped and the new segment file is made available. Plain <codeph>VACUUM</codeph> of an
        append-optimized table allows scans, inserts, deletes, and updates of the table while a
        segment file is compacted. However, an Access Exclusive lock is taken briefly to drop the
        current segment file and activate the new segment file.</p>
      <p><codeph>VACUUM FULL</codeph> does more extensive processing, including moving of tuples
        across blocks to try to compact the table to the minimum number of disk blocks. This form is
        much slower and requires an Access Exclusive lock on each table while it is being processed.
        The Access Exclusive lock guarantees that the holder is the only transaction accessing the
        table in any way.
      </p>
      <p>When the option list is surrounded by parentheses, the options can be written in any order.
        Without parentheses, options must be specified in exactly the order shown above. The
        parenthesized syntax was added in Greenplum Database 6.0; the unparenthesized syntax is
        deprecated.</p>
      <note type="important">For information on the use of <codeph>VACUUM</codeph>, <codeph>VACUUM
          FULL</codeph>, and <codeph>VACUUM ANALYZE</codeph>, see <xref href="#topic1/section6"
          type="section" format="dita"/>.
      </note>
  
      <sectiondiv id="section4">
        <b>Outputs</b>
        <p>When <codeph>VERBOSE</codeph> is specified, <codeph>VACUUM</codeph> emits progress
          messages to indicate which table is currently being processed. Various statistics about
          the tables are printed as well.</p>
      </sectiondiv>
    </section>
    <section id="section5">
      <title>Parameters</title>
      <parml>
        <plentry>
          <pt>FULL</pt>
          <pd>Selects a full vacuum, which may reclaim more space, but takes much longer and
            exclusively locks the table. This method also requires extra disk space, since it writes a
            new copy of the table and doesn't release the old copy until
            the operation is complete. Usually this should only be used when a
            significant amount of space needs to be reclaimed from within the table.
          </pd>
        </plentry>
        <plentry>
          <pt>FREEZE</pt>
          <pd>Specifying <codeph>FREEZE</codeph> is equivalent to performing <codeph>VACUUM</codeph>
            with the <codeph>vacuum_freeze_min_age</codeph> server configuration parameter set to
            zero. See <xref href="../config_params/guc_config.xml" type="topic" format="dita"/> for
            information about <codeph>vacuum_freeze_min_age</codeph>. </pd>
        </plentry>
        <plentry>
          <pt>VERBOSE</pt>
          <pd>Prints a detailed vacuum activity report for each table.</pd>
        </plentry>
        <plentry>
          <pt>ANALYZE</pt>
          <pd>Updates statistics used by the planner to determine the most efficient way to execute
            a query.</pd>
        </plentry>
        <plentry>
          <pt>
            <varname>table</varname>
          </pt>
          <pd>The name (optionally schema-qualified) of a specific table to vacuum. Defaults to all
            tables in the current database.</pd>
        </plentry>
        <plentry>
          <pt>
            <varname>column</varname>
          </pt>
          <pd>The name of a specific column to analyze. Defaults to all columns. If a column list is 
            specified, <codeph>ANALYZE</codeph> is implied.</pd>
        </plentry>
      </parml>
    </section>
    <section id="section6">
      <title id="er144900">Notes</title>
      <p><codeph>VACUUM</codeph> cannot be executed inside a transaction block.</p>
      <p>Vacuum active databases frequently (at least nightly), in order to remove expired rows.
        After adding or deleting a large number of rows, running the <codeph>VACUUM ANALYZE</codeph>
        command for the affected table might be useful. This updates the system catalogs with the
        results of all recent changes, and allows the Greenplum Database query optimizer to make
        better choices in planning queries.</p>
      <note type="important">PostgreSQL has a separate optional server process called the
          <i>autovacuum daemon</i>, whose purpose is to automate the execution of
          <codeph>VACUUM</codeph> and <codeph>ANALYZE</codeph> commands. Greenplum Database enables
        the autovacuum daemon to perform <codeph>VACUUM</codeph> operations only on the Greenplum
        Database template database <codeph>template0</codeph>. Autovacuum is enabled for
          <codeph>template0</codeph> because connections are not allowed to
          <codeph>template0</codeph>. The autovacuum daemon performs <codeph>VACUUM</codeph>
        operations on <codeph>template0</codeph> to manage transaction IDs (XIDs) and help avoid
        transaction ID wraparound issues in <codeph>template0</codeph>. <p>Manual
            <codeph>VACUUM</codeph> operations must be performed in user-defined databases to manage
          transaction IDs (XIDs) in those databases.</p></note>
      <p><codeph>VACUUM</codeph> causes a substantial increase in I/O traffic, which can cause poor
        performance for other active sessions. Therefore, it is advisable to vacuum the database at
        low usage times.</p>
      <p><codeph>VACUUM</codeph> commands skip external and foreign tables.</p>
      <p><codeph>VACUUM FULL</codeph> reclaims all expired row space, however it requires an
        exclusive lock on each table being processed, is a very expensive operation, and might take
        a long time to complete on large, distributed Greenplum Database tables. Perform
          <codeph>VACUUM FULL</codeph> operations during database maintenance periods.</p>
      <p>The <codeph>FULL</codeph> option is not recommended for routine use,
        but might be useful in special cases. An example is when you have deleted
        or updated most of the rows in a table and would like the table to
        physically shrink to occupy less disk space and allow faster table
        scans. <codeph>VACUUM FULL</codeph> will usually shrink the table
        more than a plain <codeph>VACUUM</codeph> would.
      </p>
      <p>As an alternative to <codeph>VACUUM FULL</codeph>, you can re-create the table with a
          <codeph>CREATE TABLE AS</codeph> statement and drop the old table. </p>
      <p>For append-optimized tables, <codeph>VACUUM</codeph> requires enough available disk space
        to accommodate the new segment file during the <codeph>VACUUM</codeph> process. If the ratio
        of hidden rows to total rows in a segment file is less than a threshold value (10, by
        default), the segment file is not compacted. The threshold value can be configured with the
          <codeph>gp_appendonly_compaction_threshold</codeph> server configuration parameter.
          <codeph>VACUUM FULL</codeph> ignores the threshold and rewrites the segment file
        regardless of the ratio. <codeph>VACUUM</codeph> can be disabled for append-optimized tables
        using the <codeph>gp_appendonly_compaction</codeph> server configuration parameter. See
          <xref href="../config_params/guc_config.xml" type="topic" format="dita"/> for information
        about the server configuration parameters.</p>
      <p>If a concurrent serializable transaction is detected when an append-optimized table is
        being vacuumed, the current and subsequent segment files are not compacted. If a segment
        file has been compacted but a concurrent serializable transaction is detected in the
        transaction that drops the original segment file, the drop is skipped. This could leave one
        or two segment files in an "awaiting drop" state after the vacuum has completed.</p>
      <p>For more information about concurrency control in Greenplum Database, see "Routine System
        Maintenance Tasks" in <i>Greenplum Database Administrator Guide</i>.</p>
    </section>
    <section id="section7">
      <title>Examples</title>
      <p>To clean a single table <codeph>onek</codeph>, analyze it for the optimizer and print a
      detailed vacuum activity report:</p>
      <codeblock>VACUUM (VERBOSE, ANALYZE) onek;</codeblock>
      <p>Vacuum all tables in the current database:</p>
      <codeblock>VACUUM;</codeblock>
      <p>Vacuum a specific table only:</p>
      <codeblock>VACUUM (VERBOSE, ANALYZE) mytable;</codeblock>
      <p>Vacuum all tables in the current database and collect statistics for the query
        optimizer:</p>
      <codeblock>VACUUM ANALYZE;</codeblock>
    </section>
    <section id="section8">
      <title>Compatibility</title>
      <p>There is no <codeph>VACUUM</codeph> statement in the SQL standard.</p>
    </section>
    <section id="section9">
      <title>See Also</title>
      <p>
        <codeph>
          <xref href="ANALYZE.xml#topic1">ANALYZE</xref>
        </codeph>
      </p>
    </section>
  </body>
</topic>
