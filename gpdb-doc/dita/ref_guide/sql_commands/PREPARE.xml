<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1"><title id="dx20941">PREPARE</title><body><p id="sql_command_desc">Prepare a statement for execution.</p><section id="section2"><title>Synopsis</title><codeblock id="sql_command_synopsis">PREPARE <varname>name</varname> [ (<varname>datatype</varname> [, ...] ) ] AS <varname>statement</varname></codeblock></section><section id="section3"><title>Description</title>
  <p><codeph>PREPARE</codeph> creates a prepared statement. A prepared
  statement is a server-side object that can be used to optimize
  performance. When the <codeph>PREPARE</codeph> statement is
  executed, the specified statement is parsed, analyzed, and rewritten.
  When an <codeph>EXECUTE</codeph> command is subsequently
  issued, the prepared statement is planned and executed. This division
  of labor avoids repetitive parse analysis work, while allowing
  the execution plan to depend on the specific parameter values supplied.</p>
  <p>Prepared statements can take parameters: values that are substituted into the statement when it
        is executed. When creating the prepared statement, refer to parameters by position, using
          <codeph>$1</codeph>, <codeph>$2</codeph>, etc. A corresponding list of parameter data
        types can optionally be specified. When a parameter's data type is not specified or is
        declared as unknown, the type is inferred from the context in which the parameter is first
        used (if possible). When executing the statement, specify the actual values for these
        parameters in the <codeph>EXECUTE</codeph> statement.</p><p>Prepared statements only last for the duration of the current database session. When the session
        ends, the prepared statement is forgotten, so it must be recreated before being used again.
        This also means that a single prepared statement cannot be used by multiple simultaneous
        database clients; however, each client can create their own prepared statement to use. 
        Prepared statements can be manually cleaned up using the <codeph><xref
            href="DEALLOCATE.xml#topic1" type="topic" format="dita"/></codeph> command. </p><p>Prepared statements have the largest performance advantage when a
single session is being used to execute a large number of similar statements.
The performance difference will be particularly significant if the statements
are complex to plan or rewrite, for example, if the query involves a
join of many tables or requires the application of several rules. If
the statement is relatively simple to plan and rewrite but relatively
expensive to execute, the performance advantage of prepared statements
will be less noticeable.</p></section><section id="section4"><title>Parameters</title><parml><plentry><pt><varname>name</varname></pt><pd>An arbitrary name given to this particular prepared statement. It
must be unique within a single session and is subsequently used to execute
or deallocate a previously prepared statement.</pd></plentry><plentry><pt><varname>datatype</varname></pt><pd>The data type of a parameter to the prepared statement. If the data type of a particular
            parameter is unspecified or is specified as unknown, it will be inferred from the
            context in which the parameter is first used. To refer to the parameters in the prepared
            statement itself, use <codeph>$1</codeph>, <codeph>$2</codeph>, etc. </pd></plentry><plentry><pt><varname>statement</varname></pt><pd>Any <codeph>SELECT</codeph>, <codeph>INSERT</codeph>, <codeph>UPDATE</codeph>,
<codeph>DELETE</codeph>, or <codeph>VALUES</codeph> statement.</pd></plentry></parml></section><section id="section5"><title>Notes</title>
      <p>If a prepared statement is executed enough times, the server may eventually decide to save
        and re-use a generic plan rather than re-planning each time. This will occur immediately if
        the prepared statement has no parameters; otherwise it occurs only if the generic plan
        appears to be not much more expensive than a plan that depends on specific parameter values.
        Typically, a generic plan will be selected only if the query's performance is estimated to
        be fairly insensitive to the specific parameter values supplied.</p>
      <p>To examine the query plan Greenplum Database is using for a prepared statement, use <xref
          href="EXPLAIN.xml#topic1">EXPLAIN</xref>. If a generic plan is in use, it will contain
        parameter symbols <codeph>$<varname>n</varname></codeph>, while a custom plan will have the
        current actual parameter values substituted into it. </p>
  <p>For more information on query planning and the statistics collected by Greenplum Database for
        that purpose, see the <codeph>ANALYZE</codeph> documentation.</p>
  <p>Although the main point of a prepared statement is to avoid repeated parse analysis and
        planning of the statement, Greenplum will force re-analysis and re-planning of the statement
        before using it whenever database objects used in the statement have undergone definitional
        (DDL) changes since the previous use of the prepared statement. Also, if the value of
          <codeph>search_path</codeph> changes from one use to the next, the statement will be
        re-parsed using the new search_path. (This latter behavior is new as of Greenplum 6.) These
        rules make use of a prepared statement semantically almost equivalent to re-submitting the
        same query text over and over, but with a performance benefit if no object definitions are
        changed, especially if the best plan remains the same across uses. An example of a case
        where the semantic equivalence is not perfect is that if the statement refers to a table by
        an unqualified name, and then a new table of the same name is created in a schema appearing
        earlier in the <codeph>search_path</codeph>, no automatic re-parse will occur since no
        object used in the statement changed. However, if some other change forces a re-parse, the
        new table will be referenced in subsequent uses. </p><p>You can see all prepared statements available in the session by querying the
          <codeph>pg_prepared_statements</codeph> system view.</p></section><section id="section6"><title>Examples</title><p>Create a prepared statement for an <codeph>INSERT</codeph> statement,
and then execute it:</p><codeblock>PREPARE fooplan (int, text, bool, numeric) AS INSERT INTO 
foo VALUES($1, $2, $3, $4);
EXECUTE fooplan(1, 'Hunter Valley', 't', 200.00);</codeblock><p>Create a prepared statement for a <codeph>SELECT</codeph> statement, and
then execute it. Note that the data type of the second parameter is not
specified, so it is inferred from the context in which <codeph>$2</codeph>
is used:</p><codeblock>PREPARE usrrptplan (int) AS SELECT * FROM users u, logs l 
WHERE u.usrid=$1 AND u.usrid=l.usrid AND l.date = $2;
EXECUTE usrrptplan(1, current_date);</codeblock></section><section id="section7"><title>Compatibility</title><p>The SQL standard includes a <codeph>PREPARE</codeph> statement, but
it is only for use in embedded SQL. This version of the <codeph>PREPARE</codeph>
statement also uses a somewhat different syntax.</p></section><section id="section8"><title>See Also</title><p><codeph><xref href="EXECUTE.xml#topic1" type="topic" format="dita"/></codeph>, <codeph><xref
            href="DEALLOCATE.xml#topic1" type="topic" format="dita"/></codeph></p></section></body></topic>
