<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1" xml:lang="en">
  <title id="pw216155">PL/Python Language</title>
  <body>
    <p>This section contains an overview of the Greenplum Database PL/Python Language.</p>
    <ul>
      <li id="pw223311">
        <xref href="#topic2" type="topic" format="dita"/>
      </li>
      <li id="pw223326">
        <xref href="#topic4" type="topic" format="dita"/>
      </li>
      <li id="pw218889">
        <xref href="#topic7" type="topic" format="dita"/>
      </li>
      <li id="pw222281">
        <xref href="#topic10" type="topic" format="dita"/>
      </li>
      <li id="pw213672">
        <xref href="#topic11" type="topic" format="dita"/>
      </li>
      <li id="pw216139">
        <xref href="#topic12" type="topic" format="dita"/>
      </li>
    </ul>
  </body>
  <topic id="topic2" xml:lang="en">
    <title id="pw216140">About Greenplum PL/Python</title>
    <body>
      <p>PL/Python is a loadable procedural language. With the Greenplum Database PL/Python
        extension, you can write a Greenplum Database user-defined functions in Python that take
        advantage of Python features and modules to quickly build robust database applications. </p>
      <p>You can run PL/Python code blocks as anonymous code blocks. See the <codeph><xref
            href="../sql_commands/DO.xml#topic1">DO</xref></codeph> command in the <cite>Greenplum
          Database Reference Guide</cite>.</p>
      <p>The Greenplum Database PL/Python extension is installed by default with Greenplum Database.
        Greenplum Database installs a version of Python and PL/Python. This is location of the
        Python installation that Greenplum Database uses:</p>
      <codeblock>$GPHOME/ext/python/</codeblock>
    </body>
    <topic id="topic3" xml:lang="en">
      <title>Greenplum Database PL/Python Limitations</title>
      <body>
        <ul id="ul_qhg_33m_zt">
          <li>Greenplum Database does not support PL/Python triggers.</li>
          <li>PL/Python is available only as a Greenplum Database untrusted language.</li>
          <li>Updatable cursors (<codeph>UPDATE...WHERE CURRENT OF</codeph> and
              <codeph>DELETE...WHERE CURRENT OF</codeph>) are not supported.</li>
        </ul>
      </body>
    </topic>
  </topic>
  <topic id="topic4" xml:lang="en">
    <title id="pw217326">Enabling and Removing PL/Python support</title>
    <body>
      <p>The PL/Python language is installed with Greenplum Database. To create and run a PL/Python
        user-defined function (UDF) in a database, you must register the PL/Python language with the
        database. </p>
    </body>
    <topic id="topic5" xml:lang="en">
      <title>Enabling PL/Python Support</title>
      <body>
        <p>For each database that requires its use, register the PL/Python language with the SQL
          command <codeph>CREATE EXTENSION</codeph>. Because PL/Python is an untrusted language,
          only superusers can register PL/Python with a database. For example, running this command
          as the <codeph>gpadmin</codeph> user registers PL/Python with the database named
            <codeph>testdb</codeph>:</p>
        <codeblock>$ psql -d testdb -c 'CREATE EXTENSION plpythonu;'</codeblock>
        <p>PL/Python is registered as an untrusted language.</p>
        
        <note>Using the deprecated <codeph>createlang</codeph> command to enable PL/Python generates
          an error.</note> 
      </body>
    </topic>
    <topic id="topic6" xml:lang="en">
      <title>Removing PL/Python Support</title>
      <body>
        <p>For a database that no longer requires the PL/Python language, remove support for
          PL/Python with the SQL command <codeph>DROP EXTENSION</codeph>. Because PL/Python is an
          untrusted language, only superusers can remove support for the PL/Python language from a
          database. For example, running this command as the <codeph>gpadmin</codeph> user removes
          support for PL/Python from the database named <codeph>testdb</codeph>:</p>
        <codeblock>$ psql -d testdb -c 'DROP EXTENSION plpythonu;'</codeblock>
        <p> The default command fails if any existing objects (such as functions) depend on the
          language. Specify the <codeph>CASCADE</codeph> option to also drop all dependent objects,
          including functions that you created with PL/Python. </p>
        <note>Using the deprecated <codeph>droplang</codeph> command to remove support for PL/Python
          generates an error.</note>
      </body>
    </topic>
  </topic>
  <topic id="topic7" xml:lang="en">
    <title id="pw218204">Developing Functions with PL/Python</title>
    <body>
      <p>The body of a PL/Python user-defined function is a Python script. When the function is
        called, its arguments are passed as elements of the array <codeph>args[]</codeph>. Named
        arguments are also passed as ordinary variables to the Python script. The result is returned
        from the PL/Python function with <codeph>return</codeph> statement, or
          <codeph>yield</codeph> statement in case of a result-set statement. </p>
    </body>
    <topic id="topic1113" xml:lang="en">
      <title id="pw2137121113">Arrays and Lists</title>
      <body>
        <p>You pass SQL array values into PL/Python functions with a Python list. Similarly,
          PL/Python functions return SQL array values as a Python list. In the typical PL/Python
          usage pattern, you will specify an array with <codeph>[]</codeph>.</p>

        <p>The following example creates a PL/Python function that returns an array of integers:</p>
        <codeblock>CREATE FUNCTION return_py_int_array()
  RETURNS int[]
AS $$
  return [1, 11, 21, 31]
$$ LANGUAGE plpythonu;

SELECT return_py_int_array();
 return_py_int_array 
---------------------
 {1,11,21,31}
(1 row) </codeblock>

        <p>PL/Python treats multi-dimensional arrays as lists of lists. You pass a multi-dimensional
          array to a PL/Python function using nested Python lists. When a PL/Python function returns
          a multi-dimensional array, the inner lists at each level must all be of the same size. </p>

        <p>The following example creates a PL/Python function that takes a multi-dimensional array
          of integers as input. The function displays the type of the provided argument, and returns
          the multi-dimensional array:</p>
        <codeblock>CREATE FUNCTION return_multidim_py_array(x int4[]) 
  RETURNS int4[]
AS $$
  plpy.info(x, type(x))
  return x
$$ LANGUAGE plpythonu;

SELECT * FROM return_multidim_py_array(ARRAY[[1,2,3], [4,5,6]]);
INFO:  ([[1, 2, 3], [4, 5, 6]], &lt;type 'list'&gt;)
CONTEXT:  PL/Python function "return_multidim_py_type"
 return_multidim_py_array 
--------------------------
 {{1,2,3},{4,5,6}}
(1 row) </codeblock>

        <p>PL/Python also accepts other Python sequences, such as tuples, as function arguments for
          backwards compatibility with Greenplum versions where multi-dimensional arrays were not
          supported. In such cases, the Python sequences are always treated as one-dimensional
          arrays because they are ambiguous with composite types.</p>
      </body>
    </topic>
    <topic id="topic1117" xml:lang="en">
      <title id="pw2137121117">Composite Types</title>
      <body>
        <p>You pass composite-type arguments to a PL/Python function using Python mappings. The
          element names of the mapping are the attribute names of the composite types. If an
          attribute has the null value, its mapping value is <codeph>None</codeph>.</p>
        <p>You can return a composite type result as a sequence type (tuple or list). You must
          specify a composite type as a tuple, rather than a list, when it is used in a
          multi-dimensional array. You cannot return an array of composite types as a list because
          it would be ambiguous to determine whether the list represents a composite type or another
          array dimension. In the typical usage pattern, you will specify composite type tuples with
            <codeph>()</codeph>.</p>

        <p>In the following example, you create a composite type and a PL/Python function that
          returns an array of the composite type:</p>
        <codeblock>CREATE TYPE type_record AS (
  first text,
  second int4
);

CREATE FUNCTION composite_type_as_list()
  RETURNS type_record[]
AS $$              
  return [[('first', 1), ('second', 1)], [('first', 2), ('second', 2)], [('first', 3), ('second', 3)]];
$$ LANGUAGE plpythonu;

SELECT * FROM composite_type_as_list();
                               composite_type_as_list                           
------------------------------------------------------------------------------------
 {{"(first,1)","(second,1)"},{"(first,2)","(second,2)"},{"(first,3)","(second,3)"}}
(1 row) </codeblock>
        <p>Refer to the PostgreSQL <xref
          href="https://www.postgresql.org/docs/9.4/plpython-data.html#PLPYTHON-ARRAYS"
            scope="external" format="html">Arrays, Lists</xref> documentation for additional
          information on PL/Python handling of arrays and composite types.</p>
      </body>
    </topic>

    <topic id="topic8" xml:lang="en">
      <title>Executing and Preparing SQL Queries </title>
      <body>
        <p>The PL/Python <codeph>plpy</codeph> module provides two Python functions to execute an
          SQL query and prepare an execution plan for a query, <codeph>plpy.execute</codeph> and
            <codeph>plpy.prepare</codeph>. Preparing the execution plan for a query is useful if you
          run the query from multiple Python functions.</p>
        <p>PL/Python also supports the <codeph>plpy.subtransaction()</codeph> function to help
          manage <codeph>plpy.execute</codeph> calls in an explicit subtransaction. See <xref
            href="https://www.postgresql.org/docs/9.4/plpython-subtransaction.html"
            format="html" scope="external">Explicit Subtransactions</xref> in the PostgreSQL
          documentation for additional information about <codeph>plpy.subtransaction()</codeph>.</p>
      </body>
      <topic id="topic_jnf_45f_zt">
        <title>plpy.execute</title>
        <body>
          <p>Calling <codeph>plpy.execute</codeph> with a query string and an optional limit
            argument causes the query to be run and the result to be returned in a Python result
            object. The result object emulates a list or dictionary object. The rows returned in the
            result object can be accessed by row number and column name. The result set row
            numbering starts with 0 (zero). The result object can be modified. The result object has
            these additional methods: <ul id="ul_z5f_45f_zt">
              <li><codeph>nrows</codeph> that returns the number of rows returned by the query.</li>
              <li><codeph>status</codeph> which is the <codeph>SPI_execute()</codeph> return
                value.</li>
            </ul></p>
          <p>For example, this Python statement in a PL/Python user-defined function executes a
            query. </p>
          <codeblock>rv = plpy.execute("SELECT * FROM my_table", 5)</codeblock>
          <p>The <codeph>plpy.execute</codeph> function returns up to 5 rows from
              <codeph>my_table</codeph>. The result set is stored in the <codeph>rv</codeph> object.
            If <codeph>my_table</codeph> has a column <codeph>my_column</codeph>, it would be
            accessed as:</p>
          <codeblock>my_col_data = rv[i]["my_column"]</codeblock>
          <p>Since the function returns a maximum of 5 rows, the index <varname>i</varname> can be
            an integer between 0 and 4.</p>
        </body>
      </topic>
      <topic id="topic_jwf_p5f_zt">
        <title>plpy.prepare</title>
        <body>
          <p>The function <codeph>plpy.prepare</codeph> prepares the execution plan for a query. It
            is called with a query string and a list of parameter types, if you have parameter
            references in the query. For example, this statement can be in a PL/Python user-defined
            function:</p>
          <codeblock>plan = plpy.prepare("SELECT last_name FROM my_users WHERE 
  first_name = $1", [ "text" ])</codeblock>
          <p>The string <codeph>text</codeph> is the data type of the variable that is passed for
            the variable <varname>$1</varname>. After preparing a statement, you use the function
              <codeph>plpy.execute</codeph> to run it:</p>
          <codeblock>rv = plpy.execute(plan, [ "Fred" ], 5)</codeblock>
          <p>The third argument is the limit for the number of rows returned and is optional.</p>
          <p>When you prepare an execution plan using the PL/Python module the plan is automatically
            saved. See the Postgres Server Programming Interface (SPI) documentation for information
            about the execution plans <xref
              href="https://www.postgresql.org/docs/9.4/spi.html" scope="external"
              format="html">https://www.postgresql.org/docs/9.4/spi.html</xref>.</p>
          <p>To make effective use of saved plans across function calls you use one of the Python
            persistent storage dictionaries SD or GD. </p>
          <p>The global dictionary SD is available to store data between function calls. This
            variable is private static data. The global dictionary GD is public data, available to
            all Python functions within a session. Use GD with care.</p>
          <p>Each function gets its own execution environment in the Python interpreter, so that
            global data and function arguments from <codeph>myfunc</codeph> are not available to
              <codeph>myfunc2</codeph>. The exception is the data in the GD dictionary, as mentioned
            previously.</p>
          <p>This example uses the SD dictionary:</p>
          <codeblock>CREATE FUNCTION usesavedplan() RETURNS trigger AS $$
  if SD.has_key("plan"):
    plan = SD["plan"]
  else:
    plan = plpy.prepare("SELECT 1")
    SD["plan"] = plan

  # rest of function

$$ LANGUAGE plpythonu;</codeblock>
        </body>
      </topic>
    </topic>
    <topic id="topic_s3d_vc4_xt">
      <title>Handling Python Errors and Messages</title>
      <body>
        <p> The Python module <codeph>plpy</codeph> implements these functions to manage errors and
          messages:</p>
        <ul id="ul_fp4_jq5_xt">
          <li><codeph>plpy.debug</codeph></li>
          <li><codeph>plpy.log</codeph></li>
          <li><codeph>plpy.info</codeph></li>
          <li><codeph>plpy.notice</codeph></li>
          <li><codeph>plpy.warning</codeph></li>
          <li><codeph>plpy.error</codeph></li>
          <li><codeph>plpy.fatal</codeph></li>
          <li><codeph>plpy.debug</codeph></li>
        </ul>
        <p>The message functions <codeph>plpy.error</codeph> and <codeph>plpy.fatal</codeph> raise a
          Python exception which, if uncaught, propagates out to the calling query, causing the
          current transaction or subtransaction to be aborted. The functions <codeph>raise
            plpy.ERROR(msg)</codeph> and <codeph>raise plpy.FATAL(msg)</codeph> are equivalent to
          calling <codeph>plpy.error</codeph> and <codeph>plpy.fatal</codeph>, respectively. The
          other message functions only generate messages of different priority levels. </p>
        <p>Whether messages of a particular priority are reported to the client, written to the
          server log, or both is controlled by the Greenplum Database server configuration
          parameters <codeph>log_min_messages</codeph> and <codeph>client_min_messages</codeph>. For
          information about the parameters see the <cite>Greenplum Database Reference
          Guide</cite>.</p>
      </body>
    </topic>
    <topic id="topic9" xml:lang="en">
      <title>Using the dictionary GD To Improve PL/Python Performance</title>
      <body>
        <p>In terms of performance, importing a Python module is an expensive operation and can
          affect performance. If you are importing the same module frequently, you can use Python
          global variables to load the module on the first invocation and not require importing the
          module on subsequent calls. The following PL/Python function uses the GD persistent
          storage dictionary to avoid importing a module if it has already been imported and is in
          the GD. </p>
        <codeblock>psql=#
   CREATE FUNCTION pytest() returns text as $$ 
      if 'mymodule' not in GD:
        import mymodule
        GD['mymodule'] = mymodule
    return GD['mymodule'].sumd([1,2,3])
$$;</codeblock>
      </body>
    </topic>
  </topic>
  <topic id="topic10" xml:lang="en">
    <title id="pw221333">Installing Python Modules</title>
    <body>
      <p>When you install a Python module on Greenplum Database, the Greenplum Database Python
        environment must have the module added to it across all segment hosts and mirror hosts in
        the cluster. When expanding Greenplum Database, you must add the Python modules to the new
        segment hosts. You can use the Greenplum Database utilities <codeph>gpssh</codeph> and
          <codeph>gpscp</codeph> run commands on Greenplum Database hosts and copy files to the
        hosts. For information about the utilities, see the <cite>Greenplum Database Utility
          Guide</cite>.</p>
      <p>As part of the Greenplum Database installation, the <codeph>gpadmin</codeph> user
        environment is configured to use Python that is installed with Greenplum Database.</p>
      <p>To check the Python environment, you can use the <codeph>which</codeph> command:</p>
      <codeblock>which python</codeblock>
      <p>The command returns the location of the Python installation. The Python installed with
        Greenplum Database is in the Greenplum Database <codeph>ext/python</codeph> directory.</p>
      <codeblock>/<varname>path_to_greenplum-db</varname>/ext/python/bin/python</codeblock>
      <p>When running shell commands on remote hosts with <codeph>gpssh</codeph>, you can specify
        the <codeph>-s</codeph> option. When the option is specified, <codeph>gpssh</codeph> sources
        the <codeph>greenplum_path.sh</codeph> file before running commands on the remote hosts. For
        example, this command should display the Python installed with Greenplum Database on each
        host.<codeblock>gpssh -f gpdb_hosts which python</codeblock></p>
      <p>If it does not, you can add the <codeph>-s</codeph> to source
          <codeph>greenplum_path.sh</codeph> on the remote hosts before running the command.
        <codeblock>gpssh -s -f gpdb_hosts which python</codeblock></p>
      <p>To display the list of currently installed Python modules, run this command.</p>
      <codeblock>python -c "help('modules')"</codeblock>
      <p>Run <codeph>gpssh</codeph> in interactive mode to display Python modules on remote hosts.
        This example starts <codeph>gpssh</codeph> in interactive mode and lists the Python modules
        on the Greenplum Database host <codeph>sdw1</codeph>.
        <codeblock>$ gpssh -s -h sdw1
=> python -c "help('modules')"
. . . 
=> exit
$</codeblock></p>
      <!--pivotal only-->
      <p otherprops="pivotal">Greenplum Database provides a collection of data science-related
        Python libraries that can be used with the Greenplum Database PL/Python language. You can
        download these libraries in <codeph>.gppkg</codeph> format from <xref
          href="https://network.pivotal.io/products/pivotal-gpdb" format="html" scope="external"
          >Pivotal Network</xref>. For information about the libraries, see <xref scope="peer"
          type="topic" format="dita" href="../../install_guide/install_python_dsmod.xml#topic1"
          >Python Data Science Module Package</xref>.</p>
      <p>These sections describe installing and testing Python modules:<ul id="ul_ukh_4wr_wt">
          <li><xref href="#topic_yx3_yjq_rt" format="dita"/></li>
          <li><xref href="#topic_g4j_hmt_ycb" format="dita"/></li>
          <li><xref href="#topic_j53_5jq_rt" format="dita"/></li>
          <li><xref href="#topic_e4p_gcw_vt" format="dita"/></li>
        </ul></p>
    </body>
    <topic id="topic_yx3_yjq_rt">
      <title>Installing Python pip</title>
      <body>
        <p>The Python utility <codeph>pip</codeph> installs Python packages that contain Python
          modules and other resource files from versioned archive files. </p>
        <p>Run this command to install <codeph>pip</codeph>.</p>
        <codeblock>python -m ensurepip --default-pip</codeblock>
        <p>The command runs the <codeph>ensurepip</codeph> module to bootstrap (install and
          configure) the <codeph>pip</codeph> utility from the local Python installation.</p>
        <p>You can run this command to ensure the <codeph>pip</codeph>, <codeph>setuptools</codeph>
          and <codeph>wheel</codeph> projects are current. Current Python projects ensure that you
          can install Python packages from source distributions or pre-built distributions
          (wheels).</p>
        <codeblock>python -m pip install --upgrade pip setuptools wheel</codeblock>
        <p>You can use <codeph>gpssh</codeph> to run the commands on the Greenplum Database hosts.
          This example runs <codeph>gpssh</codeph> in interactive mode to install
            <codeph>pip</codeph> on the hosts listed in the file
          <codeph>gpdb_hosts</codeph>.<codeblock>$ gpssh -s -f gpdb_hosts
=> python -m ensurepip --default-pip
[centos6-mdw1] Ignoring indexes: https://pypi.python.org/simple
[centos6-mdw1] Collecting setuptools
[centos6-mdw1] Collecting pip
[centos6-mdw1] Installing collected packages: setuptools, pip
[centos6-mdw1] Successfully installed pip-8.1.1 setuptools-20.10.1
[centos6-sdw1] Ignoring indexes: https://pypi.python.org/simple
[centos6-sdw1] Collecting setuptools
[centos6-sdw1] Collecting pip
[centos6-sdw1] Installing collected packages: setuptools, pip
[centos6-sdw1] Successfully installed pip-8.1.1 setuptools-20.10.1
=> exit
$</codeblock></p>
        <p>The <codeph>=></codeph> is the inactive prompt for <codeph>gpssh</codeph>. The utility
          displays the output from each host. The <codeph>exit</codeph> command exits from
            <codeph>gpssh</codeph> interactive mode.</p>
        <p>This <codeph>gpssh</codeph> command runs a single command on all hosts listed in the file
            <codeph>gpdb_hosts</codeph>.<codeblock>gpssh -s -f gpdb_hosts python -m pip install --upgrade pip setuptools wheel</codeblock></p>
        <p>The utility displays the output from each host.</p>
        <p>For more information about installing Python packages, see <xref
            href="https://packaging.python.org/tutorials/installing-packages/" format="html"
            scope="external">https://packaging.python.org/tutorials/installing-packages/</xref>.</p>
      </body>
    </topic>
    <topic id="topic_g4j_hmt_ycb">
      <title>Installing Python Packages with pip</title>
      <body>
        <p>After installing <codeph>pip</codeph>, you can install Python packages. This command
          installs the <codeph>numpy</codeph> and <codeph>scipy</codeph> packages. </p>
        <codeblock>python -m pip install --user numpy scipy</codeblock>
        <p>The <codeph>--user</codeph> option attempts to avoid conflicts when installing Python
          packages. </p>
        <p>You can use <codeph>gpssh</codeph> to run the command on the Greenplum Database hosts. </p>
        <p>For information about these and other Python packages, see <xref href="#topic12"
            format="dita"/>.</p>
      </body>
    </topic>
    <topic id="topic_j53_5jq_rt">
      <title>Building and Installing Python Modules Locally</title>
      <body>
        <p>If you are building a Python module, you must ensure that the build creates the correct
          executable. For example on a Linux system, the build should create a 64-bit
          executable.</p>
        <p>Before building a Python module to be installed, ensure that the appropriate software to
          build the module is installed and properly configured. The build environment is required
          only on the host where you build the module. </p>
        <p>You can use the Greenplum Database utilities <codeph>gpssh</codeph> and
            <codeph>gpscp</codeph> to run commands on Greenplum Database hosts and to copy files to
          the hosts.</p>
      </body>
    </topic>
    <topic id="topic_e4p_gcw_vt">
      <title>Testing Installed Python Modules</title>
      <body>
        <p>You can create a simple PL/Python user-defined function (UDF) to validate that Python a
          module is available in the Greenplum Database. This example tests the NumPy module.</p>
        <p>This PL/Python UDF imports the NumPy module. The function returns
            <codeph>SUCCESS</codeph> if the module is imported, and <codeph>FAILURE</codeph> if an
          import error occurs.</p>
        <codeblock>CREATE OR REPLACE FUNCTION plpy_test(x int)
returns text
as $$
  try:
      from numpy import *
      return 'SUCCESS'
  except ImportError, e:
      return 'FAILURE'
$$ language plpythonu;</codeblock>
        <p>Create a table that contains data on each Greenplum Database segment instance. Depending
          on the size of your Greenplum Database installation, you might need to generate more data
          to ensure data is distributed to all segment instances.</p>
        <codeblock>CREATE TABLE DIST AS (SELECT x FROM generate_series(1,50) x ) DISTRIBUTED RANDOMLY ;</codeblock>
        <p>This <codeph>SELECT</codeph> command runs the UDF on the segment hosts where data is
          stored in the primary segment instances. </p>
        <codeblock>SELECT gp_segment_id, plpy_test(x) AS status
  FROM dist
  GROUP BY gp_segment_id, status
  ORDER BY gp_segment_id, status;</codeblock>
        <p>The <codeph>SELECT</codeph> command returns <codeph>SUCCESS</codeph> if the UDF imported
          the Python module on the Greenplum Database segment instance. If the
            <codeph>SELECT</codeph> command returns <codeph>FAILURE</codeph>, you can find the
          segment host of the segment instance host. The Greenplum Database system table
            <codeph>gp_segment_configuration</codeph> contains information about mirroring and
          segment configuration. This command returns the host name for a segment ID.</p>
        <codeblock>SELECT hostname, content AS seg_ID FROM gp_segment_configuration
  WHERE content = <varname>seg_id</varname> ;</codeblock>
        <p>If <codeph>FAILURE</codeph> is returned, these are some possible causes:</p>
        <ul id="ul_kx1_rwq_wt">
          <li>A problem accessing required libraries. For the NumPy example, a Greenplum Database
            might have a problem accessing the OpenBLAS libraries or the Python libraries on a
            segment host.<p>Make sure you get no errors when running command on the segment host as
              the <codeph>gpadmin</codeph> user. This <codeph>gpssh</codeph> command tests importing
              the numpy module on the segment host
              <codeph>mdw1</codeph>.<codeblock>gpssh -s -h mdw1 python -c "import numpy"</codeblock></p></li>
          <li>If the Python <codeph>import</codeph> command does not return an error, environment
            variables might not be configured in the Greenplum Database environment. For example,
            the Greenplum Database might not have been restarted after installing the Python Package
            on the host system.</li>
        </ul>
      </body>
    </topic>
  </topic>

  <topic id="topic11" xml:lang="en">
    <title id="pw213712">Examples</title>
    <body>
      <p>This PL/Python UDF returns the maximum of two integers:</p>
      <codeblock>CREATE FUNCTION pymax (a integer, b integer)
  RETURNS integer
AS $$
  if (a is None) or (b is None):
      return None
  if a > b:
     return a
  return b
$$ LANGUAGE plpythonu;</codeblock>
      <p>You can use the <codeph>STRICT</codeph> property to perform the null handling instead of
        using the two conditional statements.</p>
      <codeblock>CREATE FUNCTION pymax (a integer, b integer) 
  RETURNS integer AS $$ 
return max(a,b) 
$$ LANGUAGE plpythonu STRICT ;</codeblock>
      <p>You can run the user-defined function <codeph>pymax</codeph> with <codeph>SELECT</codeph>
        command. This example runs the UDF and shows the output.</p>
      <codeblock>SELECT ( pymax(123, 43));
column1
---------
     123
(1 row)</codeblock>
      <p>This example that returns data from an SQL query that is run against a table. These two
        commands create a simple table and add data to the table.</p>
      <codeblock>CREATE TABLE sales (id int, year int, qtr int, day int, region text)
  DISTRIBUTED BY (id) ;

INSERT INTO sales VALUES
 (1, 2014, 1,1, 'usa'),
 (2, 2002, 2,2, 'europe'),
 (3, 2014, 3,3, 'asia'),
 (4, 2014, 4,4, 'usa'),
 (5, 2014, 1,5, 'europe'),
 (6, 2014, 2,6, 'asia'),
 (7, 2002, 3,7, 'usa') ;</codeblock>
      <p>This PL/Python UDF executes a <codeph>SELECT</codeph> command that returns 5 rows from the
        table. The Python function returns the <codeph>REGION</codeph> value from the row specified
        by the input value. In the Python function, the row numbering starts from 0. Valid input for
        the function is an integer between 0 and 4. </p>
      <codeblock>CREATE OR REPLACE FUNCTION mypytest(a integer) 
  RETURNS setof text 
AS $$ 
  rv = plpy.execute("SELECT * FROM sales ORDER BY id", 5)
  region =[]
  region.append(rv[a]["region"])
  return region
$$ language plpythonu EXECUTE ON MASTER;</codeblock>
      <p>Running this <codeph>SELECT</codeph> statement returns the <codeph>REGION</codeph> column
        value from the third row of the result set.</p>
      <codeblock>SELECT mypytest(2) ;</codeblock>
      <p>This command deletes the UDF from the database.</p>
      <codeblock>DROP FUNCTION mypytest(integer) ;</codeblock>
      <p>This example executes the PL/Python function in the previous example as an anonymous block
        with the <codeph>DO</codeph> command. In the example, the anonymous block retrieves the
        input value from a temporary table.</p>
      <codeblock>CREATE TEMP TABLE mytemp AS VALUES (2) DISTRIBUTED RANDOMLY;

DO $$ 
  temprow = plpy.execute("SELECT * FROM mytemp", 1)
  myval = temprow[0]["column1"]
  rv = plpy.execute("SELECT * FROM sales ORDER BY id", 5)
  region = rv[myval]["region"]
  plpy.notice("region is %s" % region)
$$ language plpythonu;</codeblock>
    </body>
  </topic>
  <topic id="topic12" xml:lang="en">
    <title id="pw213965">References</title>
    <topic id="topic13" xml:lang="en">
      <title>Technical References</title>
      <body>
        <p>For information about the Python language, see <xref href="https://www.python.org/"
            scope="external" format="html">https://www.python.org/</xref>.</p>
        <p>For information about PL/Python see the PostgreSQL documentation at <xref
            href="https://www.postgresql.org/docs/9.4/plpython.html" scope="external"
            format="html">https://www.postgresql.org/docs/9.4/plpython.html</xref>. </p>
        <p>For information about Python Package Index (PyPI), see <xref
            href="https://pypi.python.org/pypi" format="html" scope="external"
            >https://pypi.python.org/pypi</xref>.</p>
        <p>These are some Python modules that can be installed:<ul id="ul_wl3_mnr_wt">
            <li>SciPy library provides user-friendly and efficient numerical routines such as
              routines for numerical integration and optimization. The SciPy site includes other
              similar Python libraries <xref href="http://www.scipy.org/index.html" format="html"
                scope="external">http://www.scipy.org/index.html</xref>. </li>
            <li>Natural Language Toolkit (nltk) is a platform for building Python programs to work
              with human language data. <xref href="http://www.nltk.org/" format="html"
                scope="external">http://www.nltk.org/</xref>. For information about installing the
              toolkit see <xref href="http://www.nltk.org/install.html" format="html"
                scope="external">http://www.nltk.org/install.html</xref>.</li>
          </ul></p>
      </body>
    </topic>
  </topic>
</topic>
