<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1" xml:lang="en">
  <title id="pt212122">PL/pgSQL Language</title>
  <body>
    <p>This section contains an overview of the Greenplum Database PL/pgSQL language.</p>
    <ul>
      <li id="pt222286">
        <xref href="#topic2" type="topic" format="dita"/>
      </li>
      <li id="pt222717">
        <xref href="#topic67" type="topic" format="dita"/>
      </li>
      <li id="pt222315">
        <xref href="#topic6" type="topic" format="dita"/>
      </li>
      <li id="pt222269">
        <xref href="#topic10" type="topic" format="dita"/>
      </li>
    </ul>
  </body>
  <topic id="topic2" xml:lang="en">
    <title id="pt218674">About Greenplum Database PL/pgSQL</title>
    <body>
      <p>Greenplum Database PL/pgSQL is a loadable procedural language that is installed and
        registered by default with Greenplum Database. You can create user-defined functions using
        SQL statements, functions, and operators.</p>
      <p>With PL/pgSQL you can group a block of computation and a series of SQL queries inside the
        database server, thus having the power of a procedural language and the ease of use of SQL.
        Also, with PL/pgSQL you can use all the data types, operators and functions of Greenplum
        Database SQL. </p>
      <p>The PL/pgSQL language is a subset of Oracle PL/SQL. Greenplum Database PL/pgSQL is based on
        Postgres PL/pgSQL. The Postgres PL/pgSQL documentation is at <xref
          href="https://www.postgresql.org/docs/9.4/plpgsql.html" scope="external"
          format="html">https://www.postgresql.org/docs/9.4/plpgsql.html</xref></p>
      <p>When using PL/pgSQL functions, function attributes affect how Greenplum Database creates
        query plans. You can specify the attribute <codeph>IMMUTABLE</codeph>,
          <codeph>STABLE</codeph>, or <codeph>VOLATILE</codeph> as part of the
          <codeph>LANGUAGE</codeph> clause to classify the type of function, For information about
        the creating functions and function attributes, see the <codeph><xref
            href="../sql_commands/CREATE_FUNCTION.xml#topic1"/></codeph> command in the
          <cite>Greenplum Database Reference Guide</cite>.</p>
      <p>You can run PL/SQL code blocks as anonymous code blocks. See the <codeph><xref
            href="../sql_commands/DO.xml#topic1"/></codeph> command in the <cite>Greenplum Database
          Reference Guide</cite>.</p>
    </body>
    <topic id="topic3" xml:lang="en">
      <title>Greenplum Database SQL Limitations</title>
      <body>
        <p>When using Greenplum Database PL/pgSQL, limitations include</p>
        <ul>
          <li id="pt219857">Triggers are not supported</li>
          <li id="pt222490">Cursors are forward moving only (not scrollable)</li>
          <li>Updatable cursors (<codeph>UPDATE...WHERE CURRENT OF</codeph> and
              <codeph>DELETE...WHERE CURRENT OF</codeph>) are not supported.</li>
        </ul>
        <p>For information about Greenplum Database SQL conformance, see <xref
            href="../feature_summary.xml#topic1"/> in the <cite>Greenplum Database Reference
            Guide</cite>.</p>
      </body>
    </topic>
    <topic id="topic4" xml:lang="en">
      <title>The PL/pgSQL Language</title>
      <body>
        <p>PL/pgSQL is a block-structured language. The complete text of a function definition must
          be a block. A block is defined as:</p>
        <codeblock>[ <varname>label</varname> ]
[ DECLARE
   declarations ]
BEGIN
   statements
END [ label ];</codeblock>
        <p>Each declaration and each statement within a block is terminated by a semicolon (;). A
          block that appears within another block must have a semicolon after <codeph>END</codeph>,
          as shown in the previous block. The <codeph>END</codeph> that concludes a function body
          does not require a semicolon.</p>
        <p>A <varname>label</varname> is required only if you want to identify
          the block for use in an <codeph>EXIT</codeph> statement, or to qualify
          the names of variables declared in the block. If you provide a label
          after <codeph>END</codeph>, it must match the label at the block's beginning.</p>
        <note type="important">Do not confuse the use of the <codeph>BEGIN</codeph> and
            <codeph>END</codeph> keywords for grouping statements in PL/pgSQL with the database
          commands for transaction control. The PL/pgSQL <codeph>BEGIN</codeph> and
            <codeph>END</codeph> keywords are only for grouping; they do not start or end a
          transaction. Functions are always executed within a transaction established by an outer
          query — they cannot start or commit that transaction, since there would be no context for
          them to execute in. However, a PL/pgSQL block that contains an <codeph>EXCEPTION</codeph>
          clause effectively forms a subtransaction that can be rolled back without affecting the
          outer transaction. For more about the <codeph>EXCEPTION</codeph> clause, see the
          PostgreSQL documentation on trapping errors at <xref
            href="https://www.postgresql.org/docs/9.4/plpgsql-control-structures.html#PLPGSQL-ERROR-TRAPPING"
            scope="external" format="html"
            >https://www.postgresql.org/docs/9.4/plpgsql-control-structures.html#PLPGSQL-ERROR-TRAPPING</xref>. </note>
        <p>Keywords are case-insensitive. Identifiers
          are implicitly converted to lowercase unless double-quoted, just as they
          are in ordinary SQL commands.</p>
        <p>Comments work the same way in PL/pgSQL code as in ordinary SQL:</p>
        <ul>
          <li id="pt219192">A double dash (--) starts a comment that extends to the end of the line. </li>
          <li id="pt219185">A /* starts a block comment that extends to the matching occurrence of */.
              <p>Block comments nest.</p></li>
        </ul>
        <p>Any statement in the statement section of a block can be a subblock. Subblocks can be
          used for logical grouping or to localize variables to a small group of statements.</p>
        <p>Variables declared in a subblock mask any similarly-named variables of
          outer blocks for the duration of the subblock. You can access the outer
           variables if you qualify their names with their block's label. For
           example this function declares a variable named <codeph>quantity</codeph>
           several times:</p>
        <codeblock>CREATE FUNCTION testfunc() RETURNS integer AS $$
&lt;&lt; outerblock >>
DECLARE
   quantity integer := 30;
BEGIN
   RAISE NOTICE 'Quantity here is %', quantity;  -- Prints 30
   quantity := 50;
   --
   -- Create a subblock
   --
   DECLARE
      quantity integer := 80;
   BEGIN
      RAISE NOTICE 'Quantity here is %', quantity;  -- Prints 80
      RAISE NOTICE 'Outer quantity here is %', outerblock.quantity;  -- Prints 50
   END;
   RAISE NOTICE 'Quantity here is %', quantity;  -- Prints 50
   RETURN quantity;
END;
$$ LANGUAGE plpgsql;</codeblock>
      </body>
      <topic id="topic5" xml:lang="en">
        <title>Executing SQL Commands</title>
        <body>
          <p>You can execute SQL commands with PL/pgSQL statements such as <codeph>EXECUTE</codeph>,
              <codeph>PERFORM</codeph>, and <codeph>SELECT ... INTO</codeph>. For information about
            the PL/pgSQL statements, see <xref
              href="https://www.postgresql.org/docs/9.4/plpgsql-statements.html"
              scope="external" format="html"
              >https://www.postgresql.org/docs/9.4/plpgsql-statements.html</xref>. </p>
          <note type="note">The PL/pgSQL statement <codeph>SELECT INTO</codeph> is not supported in
            the <codeph>EXECUTE</codeph> statement. </note>
        </body>
      </topic>
    </topic>
  </topic>
  <topic id="topic67" xml:lang="en">
    <title id="pt21749299">PL/pgSQL Plan Caching</title>
    <body>
        <p>A PL/pgSQL function’s volatility classification has implications on how Greenplum Database caches plans that reference the function.  Refer to <xref href="../../admin_guide/query/topics/functions-operators.xml#topic281">Function Volatility and Plan Caching</xref> in the <cite>Greenplum Database Administrator
              Guide</cite> for information on plan caching considerations for Greenplum Database function volatility categories.</p>
        <p>When a PL/pgSQL function executes for the first time in a database session, the PL/pgSQL interpreter parses the function’s SQL expressions and commands. The interpreter creates a prepared execution plan as each expression and SQL command is first executed in the function. The PL/pgSQL interpreter reuses the execution plan for a specific expression and SQL command for the life of the database connection. While this reuse substantially reduces the total amount of time required to parse and generate plans, errors in a specific expression or command cannot be detected until run time when that part of the function is executed.</p>
        <p>Greenplum Database will automatically re-plan a saved query plan if there is any schema change to any relation used in the query, or if any user-defined function used in the query is redefined. This makes the re-use of a prepared plan transparent in most cases.</p>
        <p>The SQL commands that you use in a PL/pgSQL function must refer to the same tables and columns on every execution. You cannot use a parameter as the name of a table or a column in an SQL command.</p>
        <p>PL/pgSQL caches a separate query plan for each combination of actual argument types in which you invoke a polymorphic function to ensure that data type differences do not cause unexpected failures.</p>
        <p>Refer to the PostgreSQL <xref href="https://www.postgresql.org/docs/9.4/plpgsql-implementation.html#PLPGSQL-PLAN-CACHING" scope="external" format="html">Plan Caching</xref> documentation for a detailed discussion of plan caching considerations in the PL/pgSQL language.</p>
    </body>
  </topic>
  <topic id="topic6" xml:lang="en">
    <title id="pt217492">PL/pgSQL Examples</title>
    <body>
      <p>The following are examples of PL/pgSQL user-defined functions.</p>
    </body>
    <topic id="topic7" xml:lang="en">
      <title>Example: Aliases for Function Parameters</title>
      <body>
        <p>Parameters passed to functions are named with identifiers such as <codeph>$1</codeph>,
            <codeph>$2</codeph>. Optionally, aliases can be declared for <codeph>$n</codeph>
          parameter names for increased readability. Either the alias or the numeric identifier can
          then be used to refer to the parameter value.</p>
        <p>There are two ways to create an alias. The preferred way is to give a name to the
          parameter in the <codeph>CREATE FUNCTION</codeph> command, for example:</p>
        <codeblock>CREATE FUNCTION sales_tax(subtotal real) RETURNS real AS $$
BEGIN
   RETURN subtotal * 0.06;
END;
$$ LANGUAGE plpgsql;</codeblock>
        <p>You can also explicitly declare an alias, using the declaration syntax:</p>
        <codeblock>name ALIAS FOR $n;</codeblock>
        <p>This example, creates the same function with the <codeph>DECLARE</codeph> syntax.</p>
        <codeblock>CREATE FUNCTION sales_tax(real) RETURNS real AS $$
DECLARE
    subtotal ALIAS FOR $1;
BEGIN
    RETURN subtotal * 0.06;
END;
$$ LANGUAGE plpgsql;</codeblock>
      </body>
    </topic>
    <topic id="topic8" xml:lang="en">
      <title>Example: Using the Data Type of a Table Column</title>
      <body>
        <p>When declaring a variable, you can use the <codeph>%TYPE</codeph> construct to specify the data type of
          a variable or table column. This is the syntax for declaring a variable whose type is the data type
          of a table column:</p>
        <codeblock>name table.column_name%TYPE;</codeblock>
        <p>You can use the <codeph>%TYPE</codeph> construct to declare variables that will hold database values. For example, suppose you
          have a column named <codeph>user_id</codeph> in your <codeph>users</codeph> table. To
          declare a variable named <codeph>my_userid</codeph> with the same data type as the
            <codeph>users.user_id</codeph> column:</p>
        <codeblock>my_userid users.user_id%TYPE;</codeblock>
        <p><codeph>%TYPE</codeph> is particularly valuable in polymorphic functions, since the data
          types needed for internal variables may change from one call to the next. Appropriate
          variables can be created by applying <codeph>%TYPE</codeph> to the function’s arguments or
          result placeholders.</p>
      </body>
    </topic>
    <topic id="topic9" xml:lang="en">
      <title>Example: Composite Type Based on a Table Row</title>
      <body>
        <p>A variable of a composite type is called a row variable. The following syntax declares a composite variable based on table row:</p>
        <codeblock>name table_name%ROWTYPE;</codeblock>
        <p>Such a row variable can hold a whole row of a <codeph>SELECT</codeph> or
            <codeph>FOR</codeph> query result, so long as that query's column set matches the declared
          type of the variable. The individual fields of the row value are accessed using the usual
          dot notation, for example <codeph>rowvar.column</codeph>.</p>
        <p>Parameters to a function can be composite types (complete table rows). In that case, the
          corresponding identifier <codeph>$n</codeph> will be a row variable, and fields can be
          selected from it, for <codeph>example $1.user_id</codeph>.</p>
        <p>Only the user-defined columns of a table row are accessible in a row-type variable, not
          the OID or other system columns. The fields of the row type inherit the table’s field size
          or precision for data types such as <codeph>char(n)</codeph>.</p>
        <p>The next example function uses a row variable composite type. Before creating the
          function, create the table that is used by the function with this
          command.<codeblock>CREATE TABLE table1 (
  f1 text,
  f2 numeric,
  f3 integer
) distributed by (f1);</codeblock></p>
        <p>This <codeph>INSERT</codeph> command adds data to the
          table.<codeblock>INSERT INTO table1 values 
 ('test1', 14.1, 3),
 ('test2', 52.5, 2),
 ('test3', 32.22, 6),
 ('test4', 12.1, 4) ;</codeblock></p>
        <p>This function uses a column <codeph>%TYPE</codeph> variable and <codeph>%ROWTYPE</codeph> composite variable based on
            <codeph>table1</codeph>. </p>
        <codeblock>CREATE OR REPLACE FUNCTION t1_calc( name text) RETURNS integer 
AS $$ 
DECLARE
    t1_row   table1%ROWTYPE;
    calc_int table1.f3%TYPE;
BEGIN
    SELECT * INTO t1_row FROM table1 WHERE table1.f1 = $1 ;
    calc_int = (t1_row.f2 * t1_row.f3)::integer ;
    RETURN calc_int ;
END;
$$ LANGUAGE plpgsql VOLATILE;</codeblock>
        <note>The previous function is classified as a <codeph>VOLATILE</codeph> function because
          function values could change within a single table scan.</note>
        <p>The following <codeph>SELECT</codeph> command uses the function.</p>
        <codeblock>select t1_calc( 'test1' );</codeblock>
        <note type="note">The example PL/pgSQL function uses <codeph>SELECT</codeph> with the
            <codeph>INTO</codeph> clause. It is different from the SQL command <codeph>SELECT
            INTO</codeph>. If you want to create a table from a <codeph>SELECT</codeph> result
          inside a PL/pgSQL function, use the SQL command <codeph>CREATE TABLE AS</codeph>.</note>
      </body>
    </topic>

    <topic xml:lang="en" id="topic_lsh_5n5_2z1717">
      <title>Example: Using a Variable Number of Arguments</title>
      <body>
        <p>You can declare a PL/pgSQL function to accept variable numbers of arguments, as long as
          all of the optional arguments are of the same data type. You must mark the last argument
          of the function as <codeph>VARIADIC</codeph> and declare the argument using an array type.
          You can refer to a function that includes <codeph>VARIADIC</codeph> arguments as a
          variadic function.
          </p>
        <p>For example, this variadic function returns the minimum value of a variable array
          of numerics:</p>
        <p>
          <codeblock>CREATE FUNCTION mleast (VARIADIC numeric[]) 
    RETURNS numeric AS $$
  DECLARE minval numeric;
  BEGIN
    SELECT min($1[i]) FROM generate_subscripts( $1, 1) g(i) INTO minval;
    RETURN minval;
END;
$$ LANGUAGE plpgsql;
CREATE FUNCTION

SELECT mleast(10, -1, 5, 4.4);
 mleast
--------
     -1
(1 row)
</codeblock>
        </p>
        <p>Effectively, all of the actual arguments at or beyond the <codeph>VARIADIC</codeph> 
          position are gathered up into a one-dimensional array.</p>
        <p>You can pass an already-constructed array into a variadic function. This is particularly
          useful when you want to pass arrays between variadic functions. Specify
          <codeph>VARIADIC</codeph> in the function call as follows:</p>
          <codeblock>SELECT mleast(VARIADIC ARRAY[10, -1, 5, 4.4]);</codeblock>
        <p>This prevents PL/pgSQL from expanding the function's variadic parameter into its element type.</p>
    </body>
  </topic>

    <topic xml:lang="en" id="topic_lsh_5n5_2z1313">
      <title>Example: Using Default Argument Values</title>
      <body>
        <p>You can declare PL/pgSQL functions with default values for some or all input arguments.
          The default values are inserted whenever the function is called with fewer than the 
          declared number of 
          arguments. Because arguments can only be omitted from the end of the actual argument
          list, you must provide default values for all arguments after an argument defined with
          a default value.</p>
        <p>For example:</p>
        <p>
          <codeblock>CREATE FUNCTION use_default_args(a int, b int DEFAULT 2, c int DEFAULT 3)
    RETURNS int AS $$
DECLARE
    sum int;
BEGIN
    sum := $1 + $2 + $3;
    RETURN sum;
END;
$$ LANGUAGE plpgsql;

SELECT use_default_args(10, 20, 30);
 use_default_args
------------------
               60
(1 row)

SELECT use_default_args(10, 20);
 use_default_args
------------------
               33
(1 row)

SELECT use_default_args(10);
 use_default_args
------------------
               15
(1 row)
</codeblock>
        </p>
        <p>You can also use the <codeph>=</codeph> sign in place of the keyword <codeph>DEFAULT</codeph>.</p>
    </body>
  </topic>


    <topic xml:lang="en" id="topic_lsh_5n5_2z">
      <title>Example: Using Polymorphic Data Types </title>
      <body>
        <p>PL/pgSQL supports the polymorphic <i>anyelement</i>, <i>anyarray</i>, <i>anyenum</i>, and
            <i>anynonarray</i> types. Using these types, you can create a single PL/pgSQL function
          that operates on multiple data types. Refer to <xref href="../data_types.xml#topic1"
            >Greenplum Database Data Types</xref> for additional information on polymorphic type
          support in Greenplum Database.</p>
        <p>A special parameter named <codeph>$0</codeph> is created when the return type of
          a PL/pgSQL function is declared as a polymorphic type. The data type of <codeph>$0</codeph>
          identifies the return type of the function as deduced from the actual input types.</p>
        <p>In this example, you create a polymorphic function that returns the sum of two
          values:</p>
        <p>
          <codeblock>CREATE FUNCTION add_two_values(v1 anyelement,v2 anyelement)
    RETURNS anyelement AS $$ 
DECLARE 
    sum ALIAS FOR $0;
BEGIN
    sum := v1 + v2;
    RETURN sum;
END;
$$ LANGUAGE plpgsql;</codeblock>
        </p>
        <p>Execute  <codeph>add_two_values()</codeph> providing integer input values:</p>
        <p>
          <codeblock>SELECT add_two_values(1, 2);
 add_two_values
----------------
              3
(1 row)</codeblock>
        </p>
        <p>The return type of <codeph>add_two_values()</codeph> is integer, the type of the input
          arguments. Now execute  <codeph>add_two_values()</codeph> providing float input
          values:</p>
        <codeblock>SELECT add_two_values (1.1, 2.2);
 add_two_values
----------------
            3.3
(1 row)</codeblock>
        <p>The return type of <codeph>add_two_values()</codeph> in this case is float.</p>
        <p>You can also specify <codeph>VARIADIC</codeph> arguments in polymorphic functions.</p>
    </body>
  </topic>
  <topic id="topic_isw_3sx_cz">
      <title>Example: Anonymous Block</title>
      <body>
        <p>This example executes the statements in the <codeph>t1_calc()</codeph> function from a previous example as an anonymous block using the
            <codeph>DO</codeph> command. In the example, the anonymous block retrieves the input
          value from a temporary
          table.<codeblock>CREATE TEMP TABLE list AS VALUES ('test1') DISTRIBUTED RANDOMLY;

DO $$ 
DECLARE
    t1_row   table1%ROWTYPE;
    calc_int table1.f3%TYPE;
BEGIN
    SELECT * INTO t1_row FROM table1, list WHERE table1.f1 = list.column1 ;
    calc_int = (t1_row.f2 * t1_row.f3)::integer ;
    RAISE NOTICE 'calculated value is %', calc_int ;
END $$ LANGUAGE plpgsql ;</codeblock></p>
      </body>
    </topic>
  </topic>
  <topic id="topic10" xml:lang="en">
    <title id="pt214450">References</title>
    <body>
      <p>The PostgreSQL documentation about PL/pgSQL is at <xref
          href="https://www.postgresql.org/docs/9.4/plpgsql.html" scope="external"
          format="html">https://www.postgresql.org/docs/9.4/plpgsql.html</xref></p>
      <p>Also, see the <codeph><xref href="../sql_commands/CREATE_FUNCTION.xml#topic1"/></codeph>
        command in the <cite>Greenplum Database Reference Guide</cite>.</p>
      <p>For a summary of built-in Greenplum Database functions, see <xref
          href="../function-summary.xml#topic1"/> in the <cite>Greenplum Database Reference
          Guide</cite>. For information about using Greenplum Database functions see "Querying Data"
        in the <cite>Greenplum Database Administrator Guide</cite></p>
      <p>For information about porting Oracle functions, see <xref
          href="https://www.postgresql.org/docs/9.4/plpgsql-porting.html" scope="external"
          format="html">https://www.postgresql.org/docs/9.4/plpgsql-porting.html</xref>. For
        information about installing and using the Oracle compatibility functions with Greenplum
        Database, see "Oracle Compatibility Functions" in the <cite>Greenplum Database Utility
          Guide</cite>.</p>
    </body>
  </topic>
</topic>
