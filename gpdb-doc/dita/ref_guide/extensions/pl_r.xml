<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1" xml:lang="en">
  <title id="py212122">PL/R Language</title>
  <body>
    <p>This chapter contains the following information:</p>
    <ul>
      <li id="py213657">
        <xref href="#topic2" type="topic" format="dita"/>
      </li>
      <li><xref href="#topic_irz_m3l_v3b" format="dita"/></li>
      <li id="py219391" otherprops="pivotal">
        <xref href="#topic3" type="topic" format="dita"/>
      </li>
      <li id="py214876" otherprops="pivotal">
        <xref href="#topic6" type="topic" format="dita"/>
      </li>
      <li>
        <xref href="#topic5" format="dita"/></li>
      <li id="py217384">
        <xref href="#topic9" type="topic" format="dita"/>
      </li>
      <li id="py213665">
        <xref href="#topic13" type="topic" format="dita"/>
      </li>
      <li id="py219064">
        <xref href="#topic14" type="topic" format="dita"/>
      </li>
      <li><xref href="#topic_g12_gwt_3gb" format="dita"/></li>
      <li id="py217165">
        <xref href="#topic15" type="topic" format="dita"/>
      </li>
    </ul>
  </body>
  <topic xml:lang="en" id="topic2">
    <title>About Greenplum Database PL/R</title>
    <body>
      <p>PL/R is a procedural language. With the Greenplum Database PL/R extension you can write
        database functions in the R programming language and use R packages that contain R functions
        and data sets. </p>
      <p>For information about supported PL/R versions, see the <cite>Greenplum Database Release
          Notes</cite>. </p>
    </body>
    <topic id="topic_irz_m3l_v3b">
      <title>Installing R</title>
      <body>
        <p>For RHEL and CentOS, installing the PL/R package installs R in
              <codeph>$GPHOME/ext/R-&lt;<varname>version</varname>></codeph> and updates
            <codeph>$GPHOME/greenplum_path.sh</codeph> for Greenplum Database to use R.</p>
        <p>To use PL/R on Ubuntu host systems, you must install and configure R on all Greenplum
          Database host systems before installing PL/R.</p>
        <note>You can use the <codeph><xref href="../../utility_guide/ref/gpssh.xml"
            /></codeph> utility to run bash shell commands on multiple remote hosts.</note>
        <ol id="ol_ypp_qnn_w3b">
          <li>To install R, run these <codeph>apt</codeph> commands on all host
              systems.<codeblock>$ sudo apt update &amp;&amp; sudo apt install r-base</codeblock><p>Installing
                <codeph>r-base</codeph> also installs dependent packages including
                <codeph>r-base-core</codeph>.</p></li>
          <li>To configure Greenplum Database to use R, add the <codeph>R_HOME</codeph> environment
            variable to <codeph>$GPHOME/greenplum_path.sh</codeph> on all hosts. This example
            command returns the R home directory.
              <codeblock>$ R RHOME
/usr/lib/R</codeblock><p>Using the previous R home directory as
              an example, add this line to the file on all
            hosts.</p><codeblock>export R_HOME=/usr/lib/R</codeblock></li>
          <li>Source <codeph>$GPHOME/greenplum_path.sh</codeph> and restart Greenplum Database. For
            example, run these commands on the Greenplum Database master
            host.<codeblock>$ source $GPHOME/greenplum_path.sh
$ gpstop -r</codeblock></li>
        </ol>
      </body>
    </topic>
    <topic id="topic3" xml:lang="en" otherprops="pivotal">
      <title id="py217167">Installing PL/R</title>
      <body>
        <p otherprops="pivotal">The PL/R extension is available as a package. Download the package
          from <xref href="https://network.pivotal.io/products/pivotal-gpdb" format="html"
            scope="external">Pivotal Network</xref> and install it with the Greenplum Package
          Manager (<codeph>gppkg</codeph>). </p>
        <p>The <xref href="../../utility_guide/ref/gppkg.xml"/> utility installs
          Greenplum Database extensions, along with any dependencies, on all hosts across a cluster.
          It also automatically installs extensions on new hosts in the case of system expansion and
          segment recovery.</p>
      </body>
      <topic id="topic4" xml:lang="en">
        <title>Installing the Extension Package</title>
        <body>
          <p>Before you install the PL/R extension, make sure that your Greenplum Database is
            running, you have sourced <codeph>greenplum_path.sh</codeph>, and that the
              <codeph>$MASTER_DATA_DIRECTORY</codeph> and <codeph>$GPHOME</codeph> variables are
            set.</p>
          <ol id="ol_nxv_ql2_4p">
            <li id="py213681" otherprops="pivotal">Download the PL/R extension package from <xref
                href="https://network.pivotal.io/products/pivotal-gpdb" format="html"
                scope="external">Pivotal Network</xref>.</li>
            <li>Copy the PL/R package to the Greenplum Database master host. </li>
            <li id="py214844">Install the software extension package by running the
                <codeph>gppkg</codeph> command. This example installs the PL/R extension on a Linux
              system:<codeblock>$ gppkg -i plr-3.0.3-gp6-rhel7_x86_64.gppkg</codeblock></li>
            <li id="py215434">Source the file <codeph>$GPHOME/greenplum_path.sh</codeph>.</li>
            <li id="py215420">Restart Greenplum Database.<codeblock>$ gpstop -r</codeblock></li>
          </ol>
        </body>
      </topic>
    </topic>
    <topic id="topic5" xml:lang="en">
      <title>Enabling PL/R Language Support</title>
      <body>
        <p>For each database that requires its use, register the PL/R language with the SQL command
            <codeph>CREATE EXTENSION</codeph>. Because PL/R is an untrusted language, only
          superusers can register PL/R with a database. For example, run this command as the
            <codeph>gpadmin</codeph> user to register the language with the database named
            <codeph>testdb</codeph>:</p>
        <codeblock>$ psql -d testdb -c 'CREATE EXTENSION plr;'</codeblock>
        <p>PL/R is registered as an untrusted language.</p>
        <note>Using the deprecated <codeph>createlang</codeph> command to enable PL/R generates an
          error.</note>
      </body>
    </topic>
    <topic id="topic6" xml:lang="en" otherprops="pivotal">
      <title id="py213692">Uninstalling PL/R</title>
      <body>
        <ul id="ul_mhq_rl2_4p">
          <li id="py216937">
            <xref href="#topic7" type="topic" format="dita"/>
          </li>
          <li id="py216956">
            <xref href="#topic8" type="topic" format="dita"/>
          </li>
          <li><xref href="#topic_ifv_tsf_w3b" format="dita"/></li>
        </ul>
        <p>When you remove PL/R language support from a database, the PL/R routines that you created
          in the database will no longer work. </p>
      </body>
      <topic id="topic7" xml:lang="en">
        <title id="py216910">Remove PL/R Support for a Database</title>
        <body>
          <p>For a database that no longer requires the PL/R language, remove support for PL/R with
            the SQL command <codeph>DROP EXTENSION</codeph>. Because PL/R is an untrusted language,
            only superusers can remove support for the PL/R language from a database. For example,
            run this command as the <codeph>gpadmin</codeph> user to remove support for PL/R from
            the database named <codeph>testdb</codeph>:</p>
          <codeblock>$ psql -d testdb -c 'DROP EXTENSION plr;'</codeblock>
          <p> The default command fails if any existing objects (such as functions) depend on the
            language. Specify the <codeph>CASCADE</codeph> option to also drop all dependent
            objects, including functions that you created with PL/R. </p>
          <note>Using the deprecated <codeph>droplang</codeph> command to remove support for PL/R
            generates an error.</note>
        </body>
      </topic>
      <topic id="topic8" xml:lang="en">
        <title id="py216924">Uninstall the Extension Package</title>
        <body>
          <p>If no databases have PL/R as a registered language, uninstall the Greenplum PL/R
            extension with the <codeph>gppkg</codeph> utility. This example uninstalls PL/R package
            version 3.0.3.</p>
          <codeblock>$ gppkg -r plr-3.0.3</codeblock>
          <p>On RHEL and CentOS systems, uninstalling the extension uninstalls the R software that
            was installed with the extension.</p>
          <p>You can run the <codeph>gppkg</codeph> utility with the options <codeph>-q
              --all</codeph> to list the installed extensions and their versions.</p>
          <p>For Ubuntu systems, remove the <codeph>R_HOME</codeph> environment variable from
              <codeph>greenplum_path.sh</codeph> on all Greenplum Database host systems.</p>
          <p>Source the file <codeph>$GPHOME/greenplum_path.sh</codeph> and restart the
            database.</p>
          <codeblock>$ gpstop -r</codeblock>
        </body>
      </topic>
      <topic id="topic_ifv_tsf_w3b">
        <title>Uninstall R (Ubuntu)</title>
        <body>
          <p>For Ubuntu systems, remove R from all Greenplum Database host systems. These commands
            remove R from an Ubuntu
            system.<codeblock>$ sudo apt remove r-base
$ sudo apt remove r-base-core</codeblock></p>
          <p>Removing <codeph>r-base</codeph> does not uninstall the R executable. Removing
              <codeph>r-base-core</codeph> uninstalls the R executable.</p>
        </body>
      </topic>
    </topic>
    <topic id="topic9" xml:lang="en">
      <title id="py214084">Examples</title>
      <body>
        <p>The following are simple PL/R examples.</p>
      </body>
      <topic id="topic10" xml:lang="en">
        <title>Example 1: Using PL/R for single row operators</title>
        <body>
          <p>This function generates an array of numbers with a normal distribution using the R
            function <codeph>rnorm()</codeph>. </p>
          <codeblock>CREATE OR REPLACE FUNCTION r_norm(n integer, mean float8,
  std_dev float8) RETURNS float8[ ] AS
$$
  x&lt;-rnorm(n,mean,std_dev)
  return(x)
$$
LANGUAGE 'plr';</codeblock>
          <p>The following <codeph>CREATE TABLE</codeph> command uses the <codeph>r_norm()</codeph>
            function to populate the table. The <codeph>r_norm()</codeph> function creates an array
            of 10 numbers.</p>
          <codeblock>CREATE TABLE test_norm_var
  AS SELECT id, r_norm(10,0,1) as x
  FROM (SELECT generate_series(1,30:: bigint) AS ID) foo
  DISTRIBUTED BY (id);</codeblock>
        </body>
      </topic>
      <topic id="topic11" xml:lang="en">
        <title>Example 2: Returning PL/R data.frames in Tabular Form</title>
        <body>
          <p>Assuming your PL/R function returns an R <codeph>data.frame</codeph> as its output,
            unless you want to use arrays of arrays, some work is required to see your
              <codeph>data.frame</codeph> from PL/R as a simple SQL table:</p>
          <ul id="ul_dsh_tl2_4p">
            <li id="py213770">Create a <codeph>TYPE</codeph> in a Greenplum database with the same
              dimensions as your R
              <codeph>data.frame:</codeph><codeblock>CREATE TYPE t1 AS ...</codeblock></li>
            <li id="py213772">Use this <codeph>TYPE</codeph> when defining your PL/R function
              <codeblock>... RETURNS SET OF t1 AS ...</codeblock></li>
          </ul>
          <p>Sample SQL for this is given in the next example.</p>
        </body>
      </topic>
      <topic id="topic12" xml:lang="en">
        <title>Example 3: Hierarchical Regression using PL/R</title>
        <body>
          <p>The SQL below defines a <codeph>TYPE</codeph> and runs hierarchical regression using
            PL/R:</p>
          <codeblock>--Create TYPE to store model results
DROP TYPE IF EXISTS wj_model_results CASCADE;
CREATE TYPE wj_model_results AS (
  cs text, coefext float, ci_95_lower float, ci_95_upper float,
  ci_90_lower float, ci_90_upper float, ci_80_lower float,
  ci_80_upper float);

--Create PL/R function to run model in R
DROP FUNCTION IF EXISTS wj_plr_RE(float [ ], text [ ]);
CREATE FUNCTION wj_plr_RE(response float [ ], cs text [ ])
RETURNS SETOF wj_model_results AS
$$
  library(arm)
  y&lt;- log(response)
  cs&lt;- cs
  d_temp&lt;- data.frame(y,cs)
  m0 &lt;- lmer (y ~ 1 + (1 | cs), data=d_temp)
  cs_unique&lt;- sort(unique(cs))
  n_cs_unique&lt;- length(cs_unique)
  temp_m0&lt;- data.frame(matrix0,n_cs_unique, 7))
  for (i in 1:n_cs_unique){temp_m0[i,]&lt;-
    c(exp(coef(m0)$cs[i,1] + c(0,-1.96,1.96,-1.65,1.65,
      -1.28,1.28)*se.ranef(m0)$cs[i]))}
  names(temp_m0)&lt;- c("Coefest", "CI_95_Lower",
    "CI_95_Upper", "CI_90_Lower", "CI_90_Upper",
   "CI_80_Lower", "CI_80_Upper")
  temp_m0_v2&lt;- data.frames(cs_unique, temp_m0)
  return(temp_m0_v2)
$$
LANGUAGE 'plr';

--Run modeling plr function and store model results in a
--table
DROP TABLE IF EXISTS wj_model_results_roi;
CREATE TABLE wj_model_results_roi AS SELECT *
  FROM wj_plr_RE((SELECT wj_droi2_array),
  (SELECT cs FROM wj_droi2_array));</codeblock>
        </body>
      </topic>
    </topic>
    <topic id="topic13" xml:lang="en">
      <title id="py218988">Downloading and Installing R Packages</title>
      <body>
        <p>R packages are modules that contain R functions and data sets. You can install R packages
          to extend R and PL/R functionality in Greenplum Database. </p>
        <p otherprops="pivotal">Greenplum Database provides a collection of data science-related R
          libraries that can be used with the Greenplum Database PL/R language. You can download
          these libraries in <codeph>.gppkg</codeph> format from <xref
            href="https://network.pivotal.io/products/pivotal-gpdb" format="html" scope="external"
            >Pivotal Network</xref>. For information about the libraries, see <xref scope="peer"
            type="topic" format="dita" href="../../install_guide/install_r_dslib.xml#topic1">R Data
            Science Library Package</xref>.</p>
        <note type="note">If you expand Greenplum Database and add segment hosts, you must install
          the R packages in the R installation of the new hosts. </note>
        <ol id="ol_bjw_tl2_4p">
          <li id="py218997">For an R package, identify all dependent R packages and each package web
            URL. The information can be found by selecting the given package from the following
            navigation page: <p><xref
                href="https://cran.r-project.org/web/packages/available_packages_by_name.html"
                format="html" scope="external"/></p><p>As an example, the page for the R package arm
              indicates that the package requires the following R libraries: Matrix, lattice, lme4,
              R2WinBUGS, coda, abind, foreign, and MASS.</p><p>You can also try installing the
              package with <codeph>R CMD INSTALL</codeph> command to determine the dependent
              packages.</p><p>For the R installation included with the Greenplum Database PL/R
              extension, the required R packages are installed with the PL/R extension. However, the
              Matrix package requires a newer version. </p></li>
          <li id="py219006">From the command line, use the <codeph>wget</codeph> utility to download
            the <codeph>tar.gz</codeph> files for the arm package to the Greenplum Database master
            host:<codeblock>wget https://cran.r-project.org/src/contrib/Archive/arm/arm_1.5-03.tar.gz</codeblock><codeblock>wget https://cran.r-project.org/src/contrib/Archive/Matrix/Matrix_0.9996875-1.tar.gz</codeblock></li>
          <li id="py219012">Use the <codeph><xref
                href="../../utility_guide/ref/gpscp.xml"/></codeph> utility and the
              <codeph>hosts_all</codeph> file to copy the <codeph>tar.gz</codeph> files to the same
            directory on all nodes of the Greenplum Database cluster. The <codeph>hosts_all</codeph>
            file contains a list of all the Greenplum Database segment hosts. You might require root
            access to do
            this.<codeblock>gpscp -f hosts_all Matrix_0.9996875-1.tar.gz =:/home/gpadmin </codeblock><codeblock>gpscp -f /hosts_all arm_1.5-03.tar.gz =:/home/gpadmin</codeblock></li>
          <li id="py219020">Use the <codeph>gpssh</codeph> utility in interactive mode to log into
            each Greenplum Database segment host (<codeph>gpssh -f all_hosts</codeph>). Install the
            packages from the command prompt using the <codeph>R CMD INSTALL</codeph> command. Note
            that this may require root access. For example, this R install command installs the
            packages for the arm package.
            <codeblock>$R_HOME/bin/R CMD INSTALL Matrix_0.9996875-1.tar.gz   arm_1.5-03.tar.gz</codeblock></li>
          <li id="py219023">Ensure that the package is installed in the
              <codeph>$R_HOME/library</codeph> directory on all the segments (the
              <codeph>gpssh</codeph> can be use to install the package). For example, this
              <codeph>gpssh</codeph> command list the contents of the R library
              directory.<codeblock>gpssh -s -f all_hosts "ls $R_HOME/library"</codeblock><p>The
                <codeph>gpssh</codeph> option <codeph>-s</codeph> sources the
                <codeph>greenplum_path.sh</codeph> file before running commands on the remote hosts.
            </p></li>
          <li id="py219025">Test if the R package can be loaded. <p>This function performs a simple
              test to if an R package can be
              loaded:</p><codeblock>CREATE OR REPLACE FUNCTION R_test_require(fname text)
RETURNS boolean AS
$BODY$
    return(require(fname,character.only=T))
$BODY$
LANGUAGE 'plr';</codeblock><p>This
              SQL command checks if the R package arm can be
            loaded:</p><codeblock>SELECT R_test_require('arm');</codeblock></li>
        </ol>
      </body>
    </topic>
    <topic id="topic14" xml:lang="en">
      <title id="py217297">Displaying R Library Information</title>
      <body>
        <p>You can use the R command line to display information about the installed libraries and
          functions on the Greenplum Database host. You can also add and remove libraries from the R
          installation. To start the R command line on the host, log into the host as the
            <codeph>gadmin</codeph> user and run the script R from the directory
            <codeph>$GPHOME/ext/R-3.3.3/bin</codeph>.</p>
        <p>This R function lists the available R packages from the R command line:</p>
        <codeblock>&gt; library()</codeblock>
        <p>Display the documentation for a particular R package</p>
        <codeblock>&gt; library(help="<varname>package_name</varname>")
&gt; help(package="<varname>package_name</varname>")</codeblock>
        <p>Display the help file for an R function:</p>
        <codeblock>&gt; help("<varname>function_name</varname>")
&gt; ?<varname>function_name</varname></codeblock>
        <p>To see what packages are installed, use the R command
            <codeph>installed.packages()</codeph>. This will return a matrix with a row for each
          package that has been installed. Below, we look at the first 5 rows of this matrix.</p>
        <codeblock>&gt; installed.packages()</codeblock>
        <p>Any package that does not appear in the installed packages matrix must be installed and
          loaded before its functions can be used. </p>
        <p>An R package can be installed with <codeph>install.packages()</codeph>:</p>
        <codeblock>&gt; install.packages("<varname>package_name</varname>")
&gt; install.packages("mypkg", dependencies = TRUE, type="source")</codeblock>
        <p>Load a package from the R command
          line.<codeblock>&gt; library(" <varname>package_name</varname> ") </codeblock></p>
        <p>An R package can be removed with <codeph>remove.packages</codeph></p>
        <codeblock>&gt; remove.packages("<varname>package_name</varname>")</codeblock>
        <p>You can use the R command <codeph>-e</codeph> option to run functions from the command
          line. For example, this command displays help on the R package MASS.</p>
        <codeblock>$ R -e 'help("MASS")'</codeblock>
      </body>
    </topic>
    <topic id="topic_g12_gwt_3gb">
      <title>Loading R Modules at Startup</title>
      <body>
        <p>PL/R can automatically load saved R code during interpreter initialization. To use this
          feature, you create the <codeph>plr_modules</codeph> database table and then insert the R
          modules you want to auto-load into the table. If the table exists, PL/R will load the code
          it contains into the interpreter.</p>
        <p>In a Greenplum Database system, table rows are usually distributed so that each row
          exists at only one segment instance. The R interpreter at each segment instance, however,
          needs to load all of the modules, so a normally distributed table will not work. You must
          create the <codeph>plr_modules</codeph> table as a <i>replicated table</i> in the default
          schema so that all rows in the table are present at every segment instance. For
          example:</p>
        <codeblock>CREATE TABLE public.plr_modules {
  modseq int4,
  modsrc text
) DISTRIBUTED REPLICATED;</codeblock>
        <p>See <xref href="https://www.joeconway.com/plr/doc/plr-module-funcs.html" format="html"
            scope="external"/> for more information about using the PL/R auto-load feature.</p>
      </body>
    </topic>
    <topic id="topic15" xml:lang="en">
      <title id="py216497">References</title>
      <body>
        <p><xref href="https://www.r-project.org/" scope="external" format="html"
            >https://www.r-project.org/</xref> - The R Project home page</p>
        <p><xref href="https://cran.r-project.org/web/packages/PivotalR/" format="html"
            scope="external">https://cran.r-project.org/web/packages/PivotalR/</xref> - The home
          page for PivotalR, a package that provides an R interface to operate on Greenplum Database
          tables and views that is similar to the R <cmdname>data.frame</cmdname>. PivotalR also
          supports using the machine learning package <xref href="https://madlib.apache.org/"
            format="html" scope="external">MADlib</xref> directly from R.</p>
        <p>The following links highlight key topics from the <xref
            href="https://www.joeconway.com/doc/doc.html" format="html" scope="external">R
            documentation</xref>.<ul id="ul_z4z_gh4_w3b">
            <li>R Functions and Arguments - <xref
                href="https://www.joeconway.com/doc/plr-funcs.html" scope="external" format="html"
                >https://www.joeconway.com/doc/plr-funcs.html</xref></li>
            <li>Passing Data Values in R - <xref href="https://www.joeconway.com/doc/plr-data.html"
                scope="external" format="html"
              >https://www.joeconway.com/doc/plr-data.html</xref></li>
            <li>Aggregate Functions in R - <xref
                href="https://www.joeconway.com/doc/plr-aggregate-funcs.html" scope="external"
                format="html">https://www.joeconway.com/doc/plr-aggregate-funcs.html</xref></li>
          </ul></p>
      </body>
    </topic>
  </topic>
</topic>
