# Set the shell
SHELL=/bin/bash

# Determine the default target architecture on this machine, if override not set
ifeq "$(BLD_ARCH)" ""
export BLD_ARCH:=$(shell $(BLD_TOP)/releng/set_bld_arch.sh)
endif

# include thirdparty infrastructure which depends on WHERE_THE...
BLD_WHERE_THE_LIBRARY_THINGS_ARE=LD_LIBRARY_PATH
aix7_ppc_64_WHERE_THE_LIBRARY_THINGS_ARE=LIBPATH
ifneq "$($(BLD_ARCH)_WHERE_THE_LIBRARY_THINGS_ARE)" ""
BLD_WHERE_THE_LIBRARY_THINGS_ARE=$($(BLD_ARCH)_WHERE_THE_LIBRARY_THINGS_ARE)
endif

include $(BLD_TOP)/Makefile.thirdparty

# get current working directory with symlinks maintained
HERE:=$(shell pwd -L)

# override MPP_ARCH values on BLD_ARCH's not native to the build server (e.g., 32-bit builds on 64-bit OSes)
ifneq "$($(BLD_ARCH)_MPP_ARCH)" ""
export MPP_ARCH=$($(BLD_ARCH)_MPP_ARCH)
endif

# take over the gcc version we use
BLD_CC=gcc

ifneq "$($(BLD_ARCH)_CC)" ""
BLD_CC=$($(BLD_ARCH)_CC)
export CC=$(BLD_CC)
export CPP=$(subst gcc,cpp,$(BLD_CC))
export CXX=$(subst gcc,g++,$(BLD_CC))
endif

ifneq "$($(BLD_ARCH)_CXX)" ""
export CXX=$($(BLD_ARCH)_CXX)
endif

# take over the path
ifneq "$(BLD_PATH_FIXED)" "true"
aix7_ppc_64_PATH_PREPEND=/opt/freeware/bin
BLD_PATH_PREPEND=$($(BLD_ARCH)_PATH_PREPEND)
ifneq "$(BLD_PATH_PREPEND)" ""
export PATH:=$(BLD_PATH_PREPEND):$(PATH)
endif
export BLD_PATH_FIXED=true
endif

# take over the library search path
aix7_ppc_64_LD_LIBRARY_PATH_PREPEND=/opt/freeware/lib
BLD_LD_LIBRARY_PATH_PREPEND=$($(BLD_ARCH)_LD_LIBRARY_PATH_PREPEND)
ifneq "$(BLD_LD_LIBRARY_PATH_PREPEND)" ""
export $(BLD_WHERE_THE_LIBRARY_THINGS_ARE):=$(BLD_LD_LIBRARY_PATH_PREPEND):$($(BLD_WHERE_THE_LIBRARY_THINGS_ARE))
endif
export BLD_LD_LIBRARY_PATH_FIXED=true

# specify python version to use for build-time and run-time
aix7_ppc_64_PYTHONHOME=/opt/freeware
rhel6_x86_64_PYTHONHOME=$(BLD_THIRDPARTY_DIR)/python-2.7.12
rhel7_x86_64_PYTHONHOME=$(BLD_THIRDPARTY_DIR)/python-2.7.12
ubuntu18.04_x86_64_PYTHONHOME=$(BLD_THIRDPARTY_DIR)/python-2.7.12

ifneq "$($(BLD_ARCH)_PYTHONHOME)" ""
export PYTHONHOME=$($(BLD_ARCH)_PYTHONHOME)
endif

export PYTHON=python
ifneq "$(PYTHONHOME)" ""
export PYTHON=$(PYTHONHOME)/bin/python
aix7_ppc_64_PYTHON=$(PYTHONHOME)/bin/python2.7_64
ifneq "$($(BLD_ARCH)_PYTHON)" ""
export PYTHON=$($(BLD_ARCH)_PYTHON)
endif
endif

# if PYTHONHOME was specified above, use it for the build
ifneq "$(PYTHONHOME)" ""
ifeq "$(findstring $(BLD_ARCH),aix7_ppc_64)" ""
tmpPATH=$(PYTHONHOME)/bin:$(PATH)
export PATH:=$(tmpPATH)
tmpLD_LIBRARY_PATH=$(PYTHONHOME)/lib:$($(BLD_WHERE_THE_LIBRARY_THINGS_ARE))
export $(BLD_WHERE_THE_LIBRARY_THINGS_ARE):=$(tmpLD_LIBRARY_PATH)
endif
endif

##
## Control if PATH and LD_LIBRARY_PATH|DYLD_LIBRARY_PATH values are displayed.
##

ifeq "$(ENABLE_MAKE_WARNING)" "true"
$(warning PATH=$(PATH))
$(warning $(BLD_WHERE_THE_LIBRARY_THINGS_ARE)=$($(BLD_WHERE_THE_LIBRARY_THINGS_ARE)))
endif

# disable our gcc wrapper
export NO_M64=1

# 32-bit/64-bit compiler/linker flag settings
rhel6_x86_64_BLD_CFLAGS=-m64 -gdwarf-2 -gstrict-dwarf
rhel7_x86_64_BLD_CFLAGS=-m64
aix7_ppc_64_BLD_CFLAGS=-maix64
BLD_CFLAGS=$($(BLD_ARCH)_BLD_CFLAGS)

aix7_ppc_64_BLD_LDFLAGS=-maix64 -Wl,-bbigtoc
BLD_LDFLAGS=$($(BLD_ARCH)_BLD_LDFLAGS)

# See http://www.postgresql.org/docs/faqs.FAQ_AIX.html for an explanation of this
ifneq "$(findstring $(BLD_ARCH),aix7_ppc_64)" ""
export OBJECT_MODE=64
export CONFIG_SHELL=/usr/bin/bash
endif

BLD_BITS:=$(strip $(findstring 32,$(BLD_ARCH)) $(findstring 64,$(BLD_ARCH)))
ifeq "$(BLD_BITS)" ""
aix7_ppc_64_BLD_BITS=64
BLD_BITS=$($(BLD_ARCH)_BLD_BITS)
endif

ifeq "$(BLD_ARCH)" ""
$(error Unable to determine value for BLD_ARCH!  You may set this on the command line.)
endif

ifeq "$(BLD_BITS)" ""
$(error Unable to determine value for BLD_BITS!  You may set this on the command line.)
endif

# grep by platform
GREP=grep
aix7_ppc_64_GREP=/opt/freeware/bin/grep
ifneq "$($(BLD_ARCH)_GREP)" ""
GREP=$($(BLD_ARCH)_GREP)
endif

# tar by platform
TAR=tar
aix7_ppc_64_TAR=gtar
ifneq "$($(BLD_ARCH)_TAR)" ""
TAR=$($(BLD_ARCH)_TAR)
endif

# awk by platform
aix7_ppc_64_AWK=gawk
ifneq "$($(BLD_ARCH)_AWK)" ""
AWK=$($(BLD_ARCH)_AWK)
else
AWK=awk
endif

# Functions for use in this and including makefiles

# function: check_pipe_for_errors
# purpose: detect cases where a member of a pipe sequence fails; make normally only checks the last command in the pipe
ifeq "$(origin check_pipe_for_errors)" "undefined"
check_pipe_for_errors=; if [ x`echo $${PIPESTATUS[*]} | sed -e s,0,,g | sed -e s,\ ,,g` != x ]; then echo "`date` -- ERROR: failure detected in piped operation"; exit 1; fi
endif
